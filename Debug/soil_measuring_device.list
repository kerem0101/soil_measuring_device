
soil_measuring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000528c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005554  08005554  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800555c  0800555c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000070  080055d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080055d4  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd91  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002017  00000000  00000000  0002be31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002de48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002e748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a44  00000000  00000000  0002ef58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd20  00000000  00000000  0004699c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913fc  00000000  00000000  000536bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4ab8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000264c  00000000  00000000  000e4b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005414 	.word	0x08005414

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005414 	.word	0x08005414

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fd91 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f907 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fa7f 	bl	8000aa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f9f9 	bl	800099c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005aa:	f000 fa21 	bl	80009f0 <MX_USART6_UART_Init>
  MX_DMA_Init();
 80005ae:	f000 fa49 	bl	8000a44 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005b2:	f000 f9c9 	bl	8000948 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005b6:	f000 f967 	bl	8000888 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 80005ba:	f003 ffdb 	bl	8004574 <LCD_Init>
  LCD_Clear();
 80005be:	f003 ff95 	bl	80044ec <LCD_Clear>
  LCD_Set_Cursor(1, 1);
 80005c2:	2101      	movs	r1, #1
 80005c4:	2001      	movs	r0, #1
 80005c6:	f003 ff9b 	bl	8004500 <LCD_Set_Cursor>
  LCD_Write_String("Baslatiliyor... ");
 80005ca:	486e      	ldr	r0, [pc, #440]	; (8000784 <main+0x1f0>)
 80005cc:	f004 f92e 	bl	800482c <LCD_Write_String>
  HAL_ADC_Start_DMA(&hadc1, value, 2);
 80005d0:	2202      	movs	r2, #2
 80005d2:	496d      	ldr	r1, [pc, #436]	; (8000788 <main+0x1f4>)
 80005d4:	486d      	ldr	r0, [pc, #436]	; (800078c <main+0x1f8>)
 80005d6:	f000 fe4d 	bl	8001274 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 80005da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005de:	f000 fde1 	bl	80011a4 <HAL_Delay>

	hum[0]=value[0]/40;
 80005e2:	4b69      	ldr	r3, [pc, #420]	; (8000788 <main+0x1f4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a6a      	ldr	r2, [pc, #424]	; (8000790 <main+0x1fc>)
 80005e8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ec:	095b      	lsrs	r3, r3, #5
 80005ee:	4a69      	ldr	r2, [pc, #420]	; (8000794 <main+0x200>)
 80005f0:	6013      	str	r3, [r2, #0]
	hum[1]=-(value[1]-4095)/26;
 80005f2:	4b65      	ldr	r3, [pc, #404]	; (8000788 <main+0x1f4>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80005fa:	330f      	adds	r3, #15
 80005fc:	4a66      	ldr	r2, [pc, #408]	; (8000798 <main+0x204>)
 80005fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000602:	08db      	lsrs	r3, r3, #3
 8000604:	4a63      	ldr	r2, [pc, #396]	; (8000794 <main+0x200>)
 8000606:	6053      	str	r3, [r2, #4]
	avr_hum = (hum[0]+hum[1])/2;
 8000608:	4b62      	ldr	r3, [pc, #392]	; (8000794 <main+0x200>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b61      	ldr	r3, [pc, #388]	; (8000794 <main+0x200>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	4413      	add	r3, r2
 8000612:	085b      	lsrs	r3, r3, #1
 8000614:	4a61      	ldr	r2, [pc, #388]	; (800079c <main+0x208>)
 8000616:	6013      	str	r3, [r2, #0]

	nitroVal = get_nitrogen_data();
 8000618:	f004 f924 	bl	8004864 <get_nitrogen_data>
 800061c:	4603      	mov	r3, r0
 800061e:	723b      	strb	r3, [r7, #8]
	phosVal = get_phosphorous_data();
 8000620:	f004 f978 	bl	8004914 <get_phosphorous_data>
 8000624:	4603      	mov	r3, r0
 8000626:	71fb      	strb	r3, [r7, #7]
	potaVal = get_potassium_data();
 8000628:	f004 f9cc 	bl	80049c4 <get_potassium_data>
 800062c:	4603      	mov	r3, r0
 800062e:	71bb      	strb	r3, [r7, #6]

	send_nitro_data_to_bluetooth(nitroVal);
 8000630:	7a3b      	ldrb	r3, [r7, #8]
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fdcc 	bl	80041d0 <send_nitro_data_to_bluetooth>
	send_phos_data_to_bluetooth(phosVal);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fdf6 	bl	800422c <send_phos_data_to_bluetooth>
	send_pota_data_to_bluetooth(potaVal);
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fe20 	bl	8004288 <send_pota_data_to_bluetooth>
	send_hum_data_to_bluetooth(avr_hum);
 8000648:	4b54      	ldr	r3, [pc, #336]	; (800079c <main+0x208>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fe49 	bl	80042e4 <send_hum_data_to_bluetooth>

	if(nitroVal == 0 && phosVal == 0 && potaVal == 0){
 8000652:	7a3b      	ldrb	r3, [r7, #8]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10d      	bne.n	8000674 <main+0xe0>
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d10a      	bne.n	8000674 <main+0xe0>
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d107      	bne.n	8000674 <main+0xe0>
		LCD_Set_Cursor(1, 1);
 8000664:	2101      	movs	r1, #1
 8000666:	2001      	movs	r0, #1
 8000668:	f003 ff4a 	bl	8004500 <LCD_Set_Cursor>
		LCD_Write_String("Olcume Hazir!  ");
 800066c:	484c      	ldr	r0, [pc, #304]	; (80007a0 <main+0x20c>)
 800066e:	f004 f8dd 	bl	800482c <LCD_Write_String>
 8000672:	e064      	b.n	800073e <main+0x1aa>
	}
	else if(nitroVal != 0 && nitroVal != 1 && phosVal != 0 && phosVal != 1 && potaVal != 0 && potaVal != 1){
 8000674:	7a3b      	ldrb	r3, [r7, #8]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d061      	beq.n	800073e <main+0x1aa>
 800067a:	7a3b      	ldrb	r3, [r7, #8]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d05e      	beq.n	800073e <main+0x1aa>
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d05b      	beq.n	800073e <main+0x1aa>
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d058      	beq.n	800073e <main+0x1aa>
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d055      	beq.n	800073e <main+0x1aa>
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d052      	beq.n	800073e <main+0x1aa>
		LCD_Set_Cursor(1, 1);
 8000698:	2101      	movs	r1, #1
 800069a:	2001      	movs	r0, #1
 800069c:	f003 ff30 	bl	8004500 <LCD_Set_Cursor>
		LCD_Write_String("Olcum Yapiliyor!");
 80006a0:	4840      	ldr	r0, [pc, #256]	; (80007a4 <main+0x210>)
 80006a2:	f004 f8c3 	bl	800482c <LCD_Write_String>

		if(nitroVal == nitroVal1 && nitroVal == nitroVal2 && nitroVal == nitroVal3 && nitroVal == nitroVal4 && nitroVal == nitroVal5
 80006a6:	7a3a      	ldrb	r2, [r7, #8]
 80006a8:	7dfb      	ldrb	r3, [r7, #23]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d147      	bne.n	800073e <main+0x1aa>
 80006ae:	7a3a      	ldrb	r2, [r7, #8]
 80006b0:	7d3b      	ldrb	r3, [r7, #20]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d143      	bne.n	800073e <main+0x1aa>
 80006b6:	7a3a      	ldrb	r2, [r7, #8]
 80006b8:	7c7b      	ldrb	r3, [r7, #17]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d13f      	bne.n	800073e <main+0x1aa>
 80006be:	7a3a      	ldrb	r2, [r7, #8]
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d13b      	bne.n	800073e <main+0x1aa>
 80006c6:	7a3a      	ldrb	r2, [r7, #8]
 80006c8:	7afb      	ldrb	r3, [r7, #11]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d137      	bne.n	800073e <main+0x1aa>
			&& phosVal == phosVal1 && phosVal == phosVal2 && phosVal == phosVal3 && phosVal == phosVal4 && phosVal == phosVal5
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	7dbb      	ldrb	r3, [r7, #22]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d133      	bne.n	800073e <main+0x1aa>
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	7cfb      	ldrb	r3, [r7, #19]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d12f      	bne.n	800073e <main+0x1aa>
 80006de:	79fa      	ldrb	r2, [r7, #7]
 80006e0:	7c3b      	ldrb	r3, [r7, #16]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d12b      	bne.n	800073e <main+0x1aa>
 80006e6:	79fa      	ldrb	r2, [r7, #7]
 80006e8:	7b7b      	ldrb	r3, [r7, #13]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d127      	bne.n	800073e <main+0x1aa>
 80006ee:	79fa      	ldrb	r2, [r7, #7]
 80006f0:	7abb      	ldrb	r3, [r7, #10]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d123      	bne.n	800073e <main+0x1aa>
			&& potaVal == potaVal1 && potaVal == potaVal2 && potaVal == potaVal3 && potaVal == potaVal4 && potaVal == potaVal5){
 80006f6:	79ba      	ldrb	r2, [r7, #6]
 80006f8:	7d7b      	ldrb	r3, [r7, #21]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d11f      	bne.n	800073e <main+0x1aa>
 80006fe:	79ba      	ldrb	r2, [r7, #6]
 8000700:	7cbb      	ldrb	r3, [r7, #18]
 8000702:	429a      	cmp	r2, r3
 8000704:	d11b      	bne.n	800073e <main+0x1aa>
 8000706:	79ba      	ldrb	r2, [r7, #6]
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	429a      	cmp	r2, r3
 800070c:	d117      	bne.n	800073e <main+0x1aa>
 800070e:	79ba      	ldrb	r2, [r7, #6]
 8000710:	7b3b      	ldrb	r3, [r7, #12]
 8000712:	429a      	cmp	r2, r3
 8000714:	d113      	bne.n	800073e <main+0x1aa>
 8000716:	79ba      	ldrb	r2, [r7, #6]
 8000718:	7a7b      	ldrb	r3, [r7, #9]
 800071a:	429a      	cmp	r2, r3
 800071c:	d10f      	bne.n	800073e <main+0x1aa>

			LCD_Set_Cursor(1, 1);
 800071e:	2101      	movs	r1, #1
 8000720:	2001      	movs	r0, #1
 8000722:	f003 feed 	bl	8004500 <LCD_Set_Cursor>
			LCD_Write_String("     Olcum      ");
 8000726:	4820      	ldr	r0, [pc, #128]	; (80007a8 <main+0x214>)
 8000728:	f004 f880 	bl	800482c <LCD_Write_String>
			LCD_Set_Cursor(2, 1);
 800072c:	2101      	movs	r1, #1
 800072e:	2002      	movs	r0, #2
 8000730:	f003 fee6 	bl	8004500 <LCD_Set_Cursor>
			LCD_Write_String("  Tamamlandi!   ");
 8000734:	481d      	ldr	r0, [pc, #116]	; (80007ac <main+0x218>)
 8000736:	f004 f879 	bl	800482c <LCD_Write_String>

			return 0;
 800073a:	2300      	movs	r3, #0
 800073c:	e01e      	b.n	800077c <main+0x1e8>
		}
	}
	nitroVal5 = nitroVal4;
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	72fb      	strb	r3, [r7, #11]
	phosVal5 = phosVal4;
 8000742:	7b7b      	ldrb	r3, [r7, #13]
 8000744:	72bb      	strb	r3, [r7, #10]
	potaVal5 = potaVal4;
 8000746:	7b3b      	ldrb	r3, [r7, #12]
 8000748:	727b      	strb	r3, [r7, #9]

	nitroVal4 = nitroVal3;
 800074a:	7c7b      	ldrb	r3, [r7, #17]
 800074c:	73bb      	strb	r3, [r7, #14]
	phosVal4 = phosVal3;
 800074e:	7c3b      	ldrb	r3, [r7, #16]
 8000750:	737b      	strb	r3, [r7, #13]
	potaVal4 = potaVal3;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	733b      	strb	r3, [r7, #12]

	nitroVal3 = nitroVal2;
 8000756:	7d3b      	ldrb	r3, [r7, #20]
 8000758:	747b      	strb	r3, [r7, #17]
	phosVal3 = phosVal2;
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	743b      	strb	r3, [r7, #16]
	potaVal3 = potaVal2;
 800075e:	7cbb      	ldrb	r3, [r7, #18]
 8000760:	73fb      	strb	r3, [r7, #15]

	nitroVal2 = nitroVal1;
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	753b      	strb	r3, [r7, #20]
	phosVal2 = phosVal1;
 8000766:	7dbb      	ldrb	r3, [r7, #22]
 8000768:	74fb      	strb	r3, [r7, #19]
	potaVal2 = potaVal1;
 800076a:	7d7b      	ldrb	r3, [r7, #21]
 800076c:	74bb      	strb	r3, [r7, #18]

	nitroVal1 = nitroVal;
 800076e:	7a3b      	ldrb	r3, [r7, #8]
 8000770:	75fb      	strb	r3, [r7, #23]
	phosVal1 = phosVal;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	75bb      	strb	r3, [r7, #22]
	potaVal1 = potaVal;
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	757b      	strb	r3, [r7, #21]
	HAL_Delay(1000);
 800077a:	e72e      	b.n	80005da <main+0x46>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800077c:	4618      	mov	r0, r3
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	0800542c 	.word	0x0800542c
 8000788:	200002c0 	.word	0x200002c0
 800078c:	2000008c 	.word	0x2000008c
 8000790:	cccccccd 	.word	0xcccccccd
 8000794:	200002c8 	.word	0x200002c8
 8000798:	4ec4ec4f 	.word	0x4ec4ec4f
 800079c:	200002d0 	.word	0x200002d0
 80007a0:	08005440 	.word	0x08005440
 80007a4:	08005450 	.word	0x08005450
 80007a8:	08005464 	.word	0x08005464
 80007ac:	08005478 	.word	0x08005478

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 f9b2 	bl	8004b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <SystemClock_Config+0xd0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a28      	ldr	r2, [pc, #160]	; (8000880 <SystemClock_Config+0xd0>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b26      	ldr	r3, [pc, #152]	; (8000880 <SystemClock_Config+0xd0>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <SystemClock_Config+0xd4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <SystemClock_Config+0xd4>)
 80007fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <SystemClock_Config+0xd4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000810:	2302      	movs	r3, #2
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000818:	2310      	movs	r3, #16
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081c:	2302      	movs	r3, #2
 800081e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000820:	2300      	movs	r3, #0
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000824:	2310      	movs	r3, #16
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000828:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800082c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800082e:	2304      	movs	r3, #4
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000832:	2307      	movs	r3, #7
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	4618      	mov	r0, r3
 800083c:	f001 ff7a 	bl	8002734 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000846:	f000 f9b1 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2102      	movs	r1, #2
 8000866:	4618      	mov	r0, r3
 8000868:	f002 f9dc 	bl	8002c24 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000872:	f000 f99b 	bl	8000bac <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	; 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <MX_ADC1_Init+0xb4>)
 800089c:	4a28      	ldr	r2, [pc, #160]	; (8000940 <MX_ADC1_Init+0xb8>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_ADC1_Init+0xb4>)
 80008a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <MX_ADC1_Init+0xb4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <MX_ADC1_Init+0xb4>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_ADC1_Init+0xb4>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <MX_ADC1_Init+0xb4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <MX_ADC1_Init+0xb4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_ADC1_Init+0xb4>)
 80008ca:	4a1e      	ldr	r2, [pc, #120]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_ADC1_Init+0xb4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_ADC1_Init+0xb4>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_ADC1_Init+0xb4>)
 80008dc:	2201      	movs	r2, #1
 80008de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_ADC1_Init+0xb4>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <MX_ADC1_Init+0xb4>)
 80008ea:	f000 fc7f 	bl	80011ec <HAL_ADC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008f4:	f000 f95a 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000900:	2307      	movs	r3, #7
 8000902:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_ADC1_Init+0xb4>)
 800090a:	f000 fdc1 	bl	8001490 <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000914:	f000 f94a 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000918:	2301      	movs	r3, #1
 800091a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800091c:	2302      	movs	r3, #2
 800091e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_ADC1_Init+0xb4>)
 8000926:	f000 fdb3 	bl	8001490 <HAL_ADC_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000930:	f000 f93c 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000008c 	.word	0x2000008c
 8000940:	40012000 	.word	0x40012000
 8000944:	0f000001 	.word	0x0f000001

08000948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <MX_USART1_UART_Init+0x50>)
 8000950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000954:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000980:	f002 fb70 	bl	8003064 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800098a:	f000 f90f 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000134 	.word	0x20000134
 8000998:	40011000 	.word	0x40011000

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART2_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009d4:	f002 fb46 	bl	8003064 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 f8e5 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000178 	.word	0x20000178
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART6_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_USART6_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4800;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_USART6_UART_Init+0x4c>)
 80009fc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000a00:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART6_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART6_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART6_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART6_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART6_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART6_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART6_UART_Init+0x4c>)
 8000a28:	f002 fb1c 	bl	8003064 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f000 f8bb 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200001bc 	.word	0x200001bc
 8000a40:	40011400 	.word	0x40011400

08000a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_DMA_Init+0x5c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <MX_DMA_Init+0x5c>)
 8000a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_DMA_Init+0x5c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2038      	movs	r0, #56	; 0x38
 8000a6c:	f001 f88b 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a70:	2038      	movs	r0, #56	; 0x38
 8000a72:	f001 f8a4 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2039      	movs	r0, #57	; 0x39
 8000a7c:	f001 f883 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a80:	2039      	movs	r0, #57	; 0x39
 8000a82:	f001 f89c 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2045      	movs	r0, #69	; 0x45
 8000a8c:	f001 f87b 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a90:	2045      	movs	r0, #69	; 0x45
 8000a92:	f001 f894 	bl	8001bbe <HAL_NVIC_EnableIRQ>

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a37      	ldr	r2, [pc, #220]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a29      	ldr	r2, [pc, #164]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	481d      	ldr	r0, [pc, #116]	; (8000ba4 <MX_GPIO_Init+0x100>)
 8000b30:	f001 fde6 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000b3a:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <MX_GPIO_Init+0x104>)
 8000b3c:	f001 fde0 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <MX_GPIO_Init+0x104>)
 8000b58:	f001 fc4e 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_GPIO_Init+0x100>)
 8000b74:	f001 fc40 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_GPIO_Init+0x104>)
 8000b92:	f001 fc31 	bl	80023f8 <HAL_GPIO_Init>

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020800 	.word	0x40020800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf6:	2007      	movs	r0, #7
 8000bf8:	f000 ffba 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a2f      	ldr	r2, [pc, #188]	; (8000ce4 <HAL_ADC_MspInit+0xdc>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d157      	bne.n	8000cda <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a2d      	ldr	r2, [pc, #180]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c62:	2303      	movs	r3, #3
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	481d      	ldr	r0, [pc, #116]	; (8000cec <HAL_ADC_MspInit+0xe4>)
 8000c76:	f001 fbbf 	bl	80023f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	; (8000cf4 <HAL_ADC_MspInit+0xec>)
 8000c7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ca0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000ca4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ca8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cc0:	f000 ff98 	bl	8001bf4 <HAL_DMA_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000cca:	f7ff ff6f 	bl	8000bac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	200000d4 	.word	0x200000d4
 8000cf4:	40026410 	.word	0x40026410

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a7e      	ldr	r2, [pc, #504]	; (8000f10 <HAL_UART_MspInit+0x218>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12d      	bne.n	8000d76 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
 8000d1e:	4b7d      	ldr	r3, [pc, #500]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a7c      	ldr	r2, [pc, #496]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b7a      	ldr	r3, [pc, #488]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	623b      	str	r3, [r7, #32]
 8000d34:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	4b76      	ldr	r3, [pc, #472]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a75      	ldr	r2, [pc, #468]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b73      	ldr	r3, [pc, #460]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d64:	2307      	movs	r3, #7
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	486a      	ldr	r0, [pc, #424]	; (8000f18 <HAL_UART_MspInit+0x220>)
 8000d70:	f001 fb42 	bl	80023f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d74:	e0c7      	b.n	8000f06 <HAL_UART_MspInit+0x20e>
  else if(huart->Instance==USART2)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a68      	ldr	r2, [pc, #416]	; (8000f1c <HAL_UART_MspInit+0x224>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d12c      	bne.n	8000dda <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	4b63      	ldr	r3, [pc, #396]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a62      	ldr	r2, [pc, #392]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b60      	ldr	r3, [pc, #384]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	4b5c      	ldr	r3, [pc, #368]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a5b      	ldr	r2, [pc, #364]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b59      	ldr	r3, [pc, #356]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000db8:	230c      	movs	r3, #12
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4851      	ldr	r0, [pc, #324]	; (8000f18 <HAL_UART_MspInit+0x220>)
 8000dd4:	f001 fb10 	bl	80023f8 <HAL_GPIO_Init>
}
 8000dd8:	e095      	b.n	8000f06 <HAL_UART_MspInit+0x20e>
  else if(huart->Instance==USART6)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a50      	ldr	r2, [pc, #320]	; (8000f20 <HAL_UART_MspInit+0x228>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	f040 8090 	bne.w	8000f06 <HAL_UART_MspInit+0x20e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a49      	ldr	r2, [pc, #292]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f003 0320 	and.w	r3, r3, #32
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a42      	ldr	r2, [pc, #264]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <HAL_UART_MspInit+0x21c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e1e:	23c0      	movs	r3, #192	; 0xc0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e2e:	2308      	movs	r3, #8
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	483a      	ldr	r0, [pc, #232]	; (8000f24 <HAL_UART_MspInit+0x22c>)
 8000e3a:	f001 fadd 	bl	80023f8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e40:	4a3a      	ldr	r2, [pc, #232]	; (8000f2c <HAL_UART_MspInit+0x234>)
 8000e42:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e46:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000e4a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e58:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e5e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e60:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e66:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000e7e:	482a      	ldr	r0, [pc, #168]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e80:	f000 feb8 	bl	8001bf4 <HAL_DMA_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_UART_MspInit+0x196>
      Error_Handler();
 8000e8a:	f7ff fe8f 	bl	8000bac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a25      	ldr	r2, [pc, #148]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e92:	639a      	str	r2, [r3, #56]	; 0x38
 8000e94:	4a24      	ldr	r2, [pc, #144]	; (8000f28 <HAL_UART_MspInit+0x230>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000e9c:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <HAL_UART_MspInit+0x23c>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000ea2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000ea6:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000eaa:	2240      	movs	r2, #64	; 0x40
 8000eac:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eba:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000eda:	4815      	ldr	r0, [pc, #84]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000edc:	f000 fe8a 	bl	8001bf4 <HAL_DMA_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 8000ee6:	f7ff fe61 	bl	8000bac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <HAL_UART_MspInit+0x238>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2047      	movs	r0, #71	; 0x47
 8000efc:	f000 fe43 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f00:	2047      	movs	r0, #71	; 0x47
 8000f02:	f000 fe5c 	bl	8001bbe <HAL_NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3738      	adds	r7, #56	; 0x38
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40011400 	.word	0x40011400
 8000f24:	40020800 	.word	0x40020800
 8000f28:	20000200 	.word	0x20000200
 8000f2c:	40026428 	.word	0x40026428
 8000f30:	20000260 	.word	0x20000260
 8000f34:	400264a0 	.word	0x400264a0

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f84:	f000 f8ee 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <DMA2_Stream0_IRQHandler+0x10>)
 8000f92:	f000 ffc7 	bl	8001f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000d4 	.word	0x200000d4

08000fa0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <DMA2_Stream1_IRQHandler+0x10>)
 8000fa6:	f000 ffbd 	bl	8001f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000200 	.word	0x20000200

08000fb4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <DMA2_Stream6_IRQHandler+0x10>)
 8000fba:	f000 ffb3 	bl	8001f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000260 	.word	0x20000260

08000fc8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <USART6_IRQHandler+0x10>)
 8000fce:	f002 f9cb 	bl	8003368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001bc 	.word	0x200001bc

08000fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <_sbrk+0x5c>)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <_sbrk+0x60>)
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <_sbrk+0x64>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <_sbrk+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800100c:	f003 fd62 	bl	8004ad4 <__errno>
 8001010:	4603      	mov	r3, r0
 8001012:	220c      	movs	r2, #12
 8001014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e009      	b.n	8001030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <_sbrk+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20018000 	.word	0x20018000
 800103c:	00000400 	.word	0x00000400
 8001040:	200002d4 	.word	0x200002d4
 8001044:	200002f0 	.word	0x200002f0

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001072:	490e      	ldr	r1, [pc, #56]	; (80010ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001088:	4c0b      	ldr	r4, [pc, #44]	; (80010b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001096:	f7ff ffd7 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f003 fd21 	bl	8004ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fa79 	bl	8000594 <main>
  bx  lr    
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010b0:	08005564 	.word	0x08005564
  ldr r2, =_sbss
 80010b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010b8:	200002ec 	.word	0x200002ec

080010bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_Init+0x40>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_Init+0x40>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_Init+0x40>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 fd41 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff fd60 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fd59 	bl	8001bda <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 fd21 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	; (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000000 	.word	0x20000000
 800115c:	20000008 	.word	0x20000008
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008
 8001188:	200002d8 	.word	0x200002d8

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200002d8 	.word	0x200002d8

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008

080011ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e033      	b.n	800126a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fcfc 	bl	8000c08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	d118      	bne.n	800125c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001232:	f023 0302 	bic.w	r3, r3, #2
 8001236:	f043 0202 	orr.w	r2, r3, #2
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fa48 	bl	80016d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f023 0303 	bic.w	r3, r3, #3
 8001252:	f043 0201 	orr.w	r2, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	641a      	str	r2, [r3, #64]	; 0x40
 800125a:	e001      	b.n	8001260 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_ADC_Start_DMA+0x1e>
 800128e:	2302      	movs	r3, #2
 8001290:	e0ce      	b.n	8001430 <HAL_ADC_Start_DMA+0x1bc>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d018      	beq.n	80012da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012b8:	4b5f      	ldr	r3, [pc, #380]	; (8001438 <HAL_ADC_Start_DMA+0x1c4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a5f      	ldr	r2, [pc, #380]	; (800143c <HAL_ADC_Start_DMA+0x1c8>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	0c9a      	lsrs	r2, r3, #18
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012cc:	e002      	b.n	80012d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f9      	bne.n	80012ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012e8:	d107      	bne.n	80012fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	f040 8086 	bne.w	8001416 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001312:	f023 0301 	bic.w	r3, r3, #1
 8001316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001334:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001348:	d106      	bne.n	8001358 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f023 0206 	bic.w	r2, r3, #6
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
 8001356:	e002      	b.n	800135e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001366:	4b36      	ldr	r3, [pc, #216]	; (8001440 <HAL_ADC_Start_DMA+0x1cc>)
 8001368:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136e:	4a35      	ldr	r2, [pc, #212]	; (8001444 <HAL_ADC_Start_DMA+0x1d0>)
 8001370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001376:	4a34      	ldr	r2, [pc, #208]	; (8001448 <HAL_ADC_Start_DMA+0x1d4>)
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	4a33      	ldr	r2, [pc, #204]	; (800144c <HAL_ADC_Start_DMA+0x1d8>)
 8001380:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800138a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800139a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	334c      	adds	r3, #76	; 0x4c
 80013b6:	4619      	mov	r1, r3
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f000 fcc8 	bl	8001d50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10f      	bne.n	80013ec <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d129      	bne.n	800142e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	e020      	b.n	800142e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a17      	ldr	r2, [pc, #92]	; (8001450 <HAL_ADC_Start_DMA+0x1dc>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d11b      	bne.n	800142e <HAL_ADC_Start_DMA+0x1ba>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d114      	bne.n	800142e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	e00b      	b.n	800142e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f043 0210 	orr.w	r2, r3, #16
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f043 0201 	orr.w	r2, r3, #1
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	431bde83 	.word	0x431bde83
 8001440:	40012300 	.word	0x40012300
 8001444:	080018cd 	.word	0x080018cd
 8001448:	08001987 	.word	0x08001987
 800144c:	080019a3 	.word	0x080019a3
 8001450:	40012000 	.word	0x40012000

08001454 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1c>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e105      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x228>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	d925      	bls.n	8001508 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68d9      	ldr	r1, [r3, #12]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	3b1e      	subs	r3, #30
 80014d2:	2207      	movs	r2, #7
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43da      	mvns	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	400a      	ands	r2, r1
 80014e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68d9      	ldr	r1, [r3, #12]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	4603      	mov	r3, r0
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4403      	add	r3, r0
 80014fa:	3b1e      	subs	r3, #30
 80014fc:	409a      	lsls	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	e022      	b.n	800154e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6919      	ldr	r1, [r3, #16]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	2207      	movs	r2, #7
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	400a      	ands	r2, r1
 800152a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6919      	ldr	r1, [r3, #16]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	4603      	mov	r3, r0
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4403      	add	r3, r0
 8001544:	409a      	lsls	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b06      	cmp	r3, #6
 8001554:	d824      	bhi.n	80015a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b05      	subs	r3, #5
 8001568:	221f      	movs	r2, #31
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	400a      	ands	r2, r1
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b05      	subs	r3, #5
 8001592:	fa00 f203 	lsl.w	r2, r0, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
 800159e:	e04c      	b.n	800163a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b0c      	cmp	r3, #12
 80015a6:	d824      	bhi.n	80015f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	3b23      	subs	r3, #35	; 0x23
 80015ba:	221f      	movs	r2, #31
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43da      	mvns	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	400a      	ands	r2, r1
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3b23      	subs	r3, #35	; 0x23
 80015e4:	fa00 f203 	lsl.w	r2, r0, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
 80015f0:	e023      	b.n	800163a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b41      	subs	r3, #65	; 0x41
 8001604:	221f      	movs	r2, #31
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	400a      	ands	r2, r1
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3b41      	subs	r3, #65	; 0x41
 800162e:	fa00 f203 	lsl.w	r2, r0, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800163a:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_ADC_ConfigChannel+0x234>)
 800163c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <HAL_ADC_ConfigChannel+0x238>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d109      	bne.n	800165c <HAL_ADC_ConfigChannel+0x1cc>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b12      	cmp	r3, #18
 800164e:	d105      	bne.n	800165c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <HAL_ADC_ConfigChannel+0x238>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d123      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x21e>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d003      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x1e6>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b11      	cmp	r3, #17
 8001674:	d11b      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b10      	cmp	r3, #16
 8001688:	d111      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_ADC_ConfigChannel+0x23c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_ADC_ConfigChannel+0x240>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	0c9a      	lsrs	r2, r3, #18
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016a0:	e002      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f9      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40012300 	.word	0x40012300
 80016c8:	40012000 	.word	0x40012000
 80016cc:	20000000 	.word	0x20000000
 80016d0:	431bde83 	.word	0x431bde83

080016d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016dc:	4b79      	ldr	r3, [pc, #484]	; (80018c4 <ADC_Init+0x1f0>)
 80016de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	021a      	lsls	r2, r3, #8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800172c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6859      	ldr	r1, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6899      	ldr	r1, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	4a58      	ldr	r2, [pc, #352]	; (80018c8 <ADC_Init+0x1f4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d022      	beq.n	80017b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800177a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6899      	ldr	r1, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800179c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6899      	ldr	r1, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	e00f      	b.n	80017d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0202 	bic.w	r2, r2, #2
 80017e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6899      	ldr	r1, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e1b      	ldrb	r3, [r3, #24]
 80017ec:	005a      	lsls	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d01b      	beq.n	8001838 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800180e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800181e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6859      	ldr	r1, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	3b01      	subs	r3, #1
 800182c:	035a      	lsls	r2, r3, #13
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	e007      	b.n	8001848 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001846:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	3b01      	subs	r3, #1
 8001864:	051a      	lsls	r2, r3, #20
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800187c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6899      	ldr	r1, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800188a:	025a      	lsls	r2, r3, #9
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6899      	ldr	r1, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	029a      	lsls	r2, r3, #10
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	609a      	str	r2, [r3, #8]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40012300 	.word	0x40012300
 80018c8:	0f000001 	.word	0x0f000001

080018cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d13c      	bne.n	8001960 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d12b      	bne.n	8001958 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001904:	2b00      	cmp	r3, #0
 8001906:	d127      	bne.n	8001958 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001920:	2b00      	cmp	r3, #0
 8001922:	d119      	bne.n	8001958 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0220 	bic.w	r2, r2, #32
 8001932:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff fd7b 	bl	8001454 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800195e:	e00e      	b.n	800197e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f7ff fd85 	bl	800147c <HAL_ADC_ErrorCallback>
}
 8001972:	e004      	b.n	800197e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	4798      	blx	r3
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001992:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f7ff fd67 	bl	8001468 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2240      	movs	r2, #64	; 0x40
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f043 0204 	orr.w	r2, r3, #4
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff fd5a 	bl	800147c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	; (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff29 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff3e 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff8e 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5d 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff31 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffa2 	bl	8001b2c <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff fac4 	bl	800118c <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e099      	b.n	8001d44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c30:	e00f      	b.n	8001c52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c32:	f7ff faab 	bl	800118c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d908      	bls.n	8001c52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2203      	movs	r2, #3
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e078      	b.n	8001d44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e8      	bne.n	8001c32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_DMA_Init+0x158>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d107      	bne.n	8001cbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d117      	bne.n	8001d16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00e      	beq.n	8001d16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fb01 	bl	8002300 <DMA_CheckFifoParam>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d12:	2301      	movs	r3, #1
 8001d14:	e016      	b.n	8001d44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fab8 	bl	8002294 <DMA_CalcBaseAndBitshift>
 8001d24:	4603      	mov	r3, r0
 8001d26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	223f      	movs	r2, #63	; 0x3f
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	f010803f 	.word	0xf010803f

08001d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_DMA_Start_IT+0x26>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e040      	b.n	8001df8 <HAL_DMA_Start_IT+0xa8>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d12f      	bne.n	8001dea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fa4a 	bl	8002238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	223f      	movs	r2, #63	; 0x3f
 8001daa:	409a      	lsls	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0216 	orr.w	r2, r2, #22
 8001dbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0208 	orr.w	r2, r2, #8
 8001dd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e005      	b.n	8001df6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e0e:	f7ff f9bd 	bl	800118c <HAL_GetTick>
 8001e12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d008      	beq.n	8001e32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e052      	b.n	8001ed8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0216 	bic.w	r2, r2, #22
 8001e40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <HAL_DMA_Abort+0x62>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0208 	bic.w	r2, r2, #8
 8001e70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e82:	e013      	b.n	8001eac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e84:	f7ff f982 	bl	800118c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d90c      	bls.n	8001eac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e015      	b.n	8001ed8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1e4      	bne.n	8001e84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	223f      	movs	r2, #63	; 0x3f
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d004      	beq.n	8001efe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00c      	b.n	8001f18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2205      	movs	r2, #5
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f30:	4b8e      	ldr	r3, [pc, #568]	; (800216c <HAL_DMA_IRQHandler+0x248>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a8e      	ldr	r2, [pc, #568]	; (8002170 <HAL_DMA_IRQHandler+0x24c>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0a9b      	lsrs	r3, r3, #10
 8001f3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	2208      	movs	r2, #8
 8001f50:	409a      	lsls	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01a      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0204 	bic.w	r2, r2, #4
 8001f76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	2201      	movs	r2, #1
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d012      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f043 0202 	orr.w	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	2204      	movs	r2, #4
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe8:	2204      	movs	r2, #4
 8001fea:	409a      	lsls	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	f043 0204 	orr.w	r2, r3, #4
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	2210      	movs	r2, #16
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d043      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d03c      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	2210      	movs	r2, #16
 8002020:	409a      	lsls	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d018      	beq.n	8002066 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d108      	bne.n	8002054 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d024      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
 8002052:	e01f      	b.n	8002094 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01b      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e016      	b.n	8002094 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d107      	bne.n	8002084 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0208 	bic.w	r2, r2, #8
 8002082:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	2220      	movs	r2, #32
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 808f 	beq.w	80021c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8087 	beq.w	80021c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	2220      	movs	r2, #32
 80020bc:	409a      	lsls	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d136      	bne.n	800213c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0216 	bic.w	r2, r2, #22
 80020dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d103      	bne.n	80020fe <HAL_DMA_IRQHandler+0x1da>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0208 	bic.w	r2, r2, #8
 800210c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	223f      	movs	r2, #63	; 0x3f
 8002114:	409a      	lsls	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212e:	2b00      	cmp	r3, #0
 8002130:	d07e      	beq.n	8002230 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
        }
        return;
 800213a:	e079      	b.n	8002230 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01d      	beq.n	8002186 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10d      	bne.n	8002174 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	2b00      	cmp	r3, #0
 800215e:	d031      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
 8002168:	e02c      	b.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000
 8002170:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d023      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
 8002184:	e01e      	b.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10f      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0210 	bic.w	r2, r2, #16
 80021a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d032      	beq.n	8002232 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d022      	beq.n	800221e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2205      	movs	r2, #5
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	3301      	adds	r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d307      	bcc.n	800220c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f2      	bne.n	80021f0 <HAL_DMA_IRQHandler+0x2cc>
 800220a:	e000      	b.n	800220e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800220c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
 800222e:	e000      	b.n	8002232 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002230:	bf00      	nop
    }
  }
}
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b40      	cmp	r3, #64	; 0x40
 8002264:	d108      	bne.n	8002278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002276:	e007      	b.n	8002288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	60da      	str	r2, [r3, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3b10      	subs	r3, #16
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <DMA_CalcBaseAndBitshift+0x64>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <DMA_CalcBaseAndBitshift+0x68>)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d909      	bls.n	80022d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	1d1a      	adds	r2, r3, #4
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	; 0x58
 80022d4:	e007      	b.n	80022e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	aaaaaaab 	.word	0xaaaaaaab
 80022fc:	08005504 	.word	0x08005504

08002300 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d11f      	bne.n	800235a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d856      	bhi.n	80023ce <DMA_CheckFifoParam+0xce>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <DMA_CheckFifoParam+0x28>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	08002339 	.word	0x08002339
 800232c:	0800234b 	.word	0x0800234b
 8002330:	08002339 	.word	0x08002339
 8002334:	080023cf 	.word	0x080023cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d046      	beq.n	80023d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002348:	e043      	b.n	80023d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002352:	d140      	bne.n	80023d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002358:	e03d      	b.n	80023d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002362:	d121      	bne.n	80023a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d837      	bhi.n	80023da <DMA_CheckFifoParam+0xda>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <DMA_CheckFifoParam+0x70>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	08002381 	.word	0x08002381
 8002374:	08002387 	.word	0x08002387
 8002378:	08002381 	.word	0x08002381
 800237c:	08002399 	.word	0x08002399
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      break;
 8002384:	e030      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d025      	beq.n	80023de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002396:	e022      	b.n	80023de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023a0:	d11f      	bne.n	80023e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023a6:	e01c      	b.n	80023e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d903      	bls.n	80023b6 <DMA_CheckFifoParam+0xb6>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d003      	beq.n	80023bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023b4:	e018      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
      break;
 80023ba:	e015      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e00b      	b.n	80023e6 <DMA_CheckFifoParam+0xe6>
      break;
 80023ce:	bf00      	nop
 80023d0:	e00a      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e008      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
 80023d8:	e006      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023da:	bf00      	nop
 80023dc:	e004      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
 80023e0:	e002      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023e6:	bf00      	nop
    }
  } 
  
  return status; 
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop

080023f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	e159      	b.n	80026c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002414:	2201      	movs	r2, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	f040 8148 	bne.w	80026c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d005      	beq.n	800244a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002446:	2b02      	cmp	r3, #2
 8002448:	d130      	bne.n	80024ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 0201 	and.w	r2, r3, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d017      	beq.n	80024e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d123      	bne.n	800253c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3208      	adds	r2, #8
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80a2 	beq.w	80026c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b57      	ldr	r3, [pc, #348]	; (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a56      	ldr	r2, [pc, #344]	; (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259a:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_GPIO_Init+0x2ec>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	220f      	movs	r2, #15
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a49      	ldr	r2, [pc, #292]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d019      	beq.n	80025fa <HAL_GPIO_Init+0x202>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a48      	ldr	r2, [pc, #288]	; (80026ec <HAL_GPIO_Init+0x2f4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0x1fe>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a47      	ldr	r2, [pc, #284]	; (80026f0 <HAL_GPIO_Init+0x2f8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00d      	beq.n	80025f2 <HAL_GPIO_Init+0x1fa>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a46      	ldr	r2, [pc, #280]	; (80026f4 <HAL_GPIO_Init+0x2fc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d007      	beq.n	80025ee <HAL_GPIO_Init+0x1f6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a45      	ldr	r2, [pc, #276]	; (80026f8 <HAL_GPIO_Init+0x300>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_GPIO_Init+0x1f2>
 80025e6:	2304      	movs	r3, #4
 80025e8:	e008      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025ea:	2307      	movs	r3, #7
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025fa:	2300      	movs	r3, #0
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800260c:	4935      	ldr	r1, [pc, #212]	; (80026e4 <HAL_GPIO_Init+0x2ec>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_GPIO_Init+0x304>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a2f      	ldr	r2, [pc, #188]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a24      	ldr	r2, [pc, #144]	; (80026fc <HAL_GPIO_Init+0x304>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002692:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_GPIO_Init+0x304>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026bc:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_GPIO_Init+0x304>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	f67f aea2 	bls.w	8002414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800271c:	e003      	b.n	8002726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e267      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d075      	beq.n	800283e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002752:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d00c      	beq.n	8002778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b85      	ldr	r3, [pc, #532]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002766:	2b08      	cmp	r3, #8
 8002768:	d112      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4b82      	ldr	r3, [pc, #520]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002776:	d10b      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	4b7e      	ldr	r3, [pc, #504]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d05b      	beq.n	800283c <HAL_RCC_OscConfig+0x108>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d157      	bne.n	800283c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e242      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002798:	d106      	bne.n	80027a8 <HAL_RCC_OscConfig+0x74>
 800279a:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a75      	ldr	r2, [pc, #468]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e01d      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x98>
 80027b2:	4b70      	ldr	r3, [pc, #448]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6f      	ldr	r2, [pc, #444]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6c      	ldr	r2, [pc, #432]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027cc:	4b69      	ldr	r3, [pc, #420]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a68      	ldr	r2, [pc, #416]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b66      	ldr	r3, [pc, #408]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a65      	ldr	r2, [pc, #404]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe fcce 	bl	800118c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe fcca 	bl	800118c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e207      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b5b      	ldr	r3, [pc, #364]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0xc0>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fcba 	bl	800118c <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fcb6 	bl	800118c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1f3      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	4b51      	ldr	r3, [pc, #324]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0xe8>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800284a:	4b4a      	ldr	r3, [pc, #296]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800285e:	2b08      	cmp	r3, #8
 8002860:	d11c      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b44      	ldr	r3, [pc, #272]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1c7      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4937      	ldr	r1, [pc, #220]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	e03a      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a4:	4b34      	ldr	r3, [pc, #208]	; (8002978 <HAL_RCC_OscConfig+0x244>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe fc6f 	bl	800118c <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe fc6b 	bl	800118c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1a8      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4925      	ldr	r1, [pc, #148]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e015      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_RCC_OscConfig+0x244>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fc4e 	bl	800118c <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f4:	f7fe fc4a 	bl	800118c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e187      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d036      	beq.n	800298c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d016      	beq.n	8002954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_RCC_OscConfig+0x248>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fc2e 	bl	800118c <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fc2a 	bl	800118c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e167      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x200>
 8002952:	e01b      	b.n	800298c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_OscConfig+0x248>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7fe fc17 	bl	800118c <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	e00e      	b.n	8002980 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002962:	f7fe fc13 	bl	800118c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d907      	bls.n	8002980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e150      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
 8002974:	40023800 	.word	0x40023800
 8002978:	42470000 	.word	0x42470000
 800297c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ea      	bne.n	8002962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8097 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b81      	ldr	r3, [pc, #516]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b7d      	ldr	r3, [pc, #500]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a7c      	ldr	r2, [pc, #496]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b7a      	ldr	r3, [pc, #488]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b77      	ldr	r3, [pc, #476]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b74      	ldr	r3, [pc, #464]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a73      	ldr	r2, [pc, #460]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe fbd3 	bl	800118c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7fe fbcf 	bl	800118c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e10c      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x2ea>
 8002a10:	4b64      	ldr	r3, [pc, #400]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a63      	ldr	r2, [pc, #396]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	e01c      	b.n	8002a58 <HAL_RCC_OscConfig+0x324>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x30c>
 8002a26:	4b5f      	ldr	r3, [pc, #380]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70
 8002a32:	4b5c      	ldr	r3, [pc, #368]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a5b      	ldr	r2, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0x324>
 8002a40:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a57      	ldr	r2, [pc, #348]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	4b55      	ldr	r3, [pc, #340]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a54      	ldr	r2, [pc, #336]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe fb94 	bl	800118c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7fe fb90 	bl	800118c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0cb      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	4b49      	ldr	r3, [pc, #292]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ee      	beq.n	8002a68 <HAL_RCC_OscConfig+0x334>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fb7e 	bl	800118c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe fb7a 	bl	800118c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0b5      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aaa:	4b3e      	ldr	r3, [pc, #248]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ee      	bne.n	8002a94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abc:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	4a38      	ldr	r2, [pc, #224]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80a1 	beq.w	8002c14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ad2:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d05c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d141      	bne.n	8002b6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCC_OscConfig+0x478>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fb4e 	bl	800118c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fb4a 	bl	800118c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e087      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	019b      	lsls	r3, r3, #6
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	491b      	ldr	r1, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x478>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe fb23 	bl	800118c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe fb1f 	bl	800118c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e05c      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x416>
 8002b68:	e054      	b.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x478>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fb0c 	bl	800118c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fb08 	bl	800118c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e045      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x444>
 8002b96:	e03d      	b.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e038      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_RCC_OscConfig+0x4ec>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d028      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d121      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11a      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d111      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800

08002c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0cc      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c38:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d90c      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0b8      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d020      	beq.n	8002cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c78:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a58      	ldr	r2, [pc, #352]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	494d      	ldr	r1, [pc, #308]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d044      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d119      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e07f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e067      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f023 0203 	bic.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4934      	ldr	r1, [pc, #208]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d14:	f7fe fa3a 	bl	800118c <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1c:	f7fe fa36 	bl	800118c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e04f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 020c 	and.w	r2, r3, #12
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d1eb      	bne.n	8002d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d20c      	bcs.n	8002d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e032      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4916      	ldr	r1, [pc, #88]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	490e      	ldr	r1, [pc, #56]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002daa:	f000 f821 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	490a      	ldr	r1, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	5ccb      	ldrb	r3, [r1, r3]
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe f99a 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023c00 	.word	0x40023c00
 8002de0:	40023800 	.word	0x40023800
 8002de4:	080054ec 	.word	0x080054ec
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000004 	.word	0x20000004

08002df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df4:	b094      	sub	sp, #80	; 0x50
 8002df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e00:	2300      	movs	r3, #0
 8002e02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e08:	4b79      	ldr	r3, [pc, #484]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d00d      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x40>
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	f200 80e1 	bhi.w	8002fdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e22:	e0db      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e24:	4b73      	ldr	r3, [pc, #460]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e28:	e0db      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e2a:	4b73      	ldr	r3, [pc, #460]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e2e:	e0d8      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e30:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d063      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e46:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e62:	4622      	mov	r2, r4
 8002e64:	462b      	mov	r3, r5
 8002e66:	f04f 0000 	mov.w	r0, #0
 8002e6a:	f04f 0100 	mov.w	r1, #0
 8002e6e:	0159      	lsls	r1, r3, #5
 8002e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e74:	0150      	lsls	r0, r2, #5
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	1a51      	subs	r1, r2, r1
 8002e7e:	6139      	str	r1, [r7, #16]
 8002e80:	4629      	mov	r1, r5
 8002e82:	eb63 0301 	sbc.w	r3, r3, r1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e94:	4659      	mov	r1, fp
 8002e96:	018b      	lsls	r3, r1, #6
 8002e98:	4651      	mov	r1, sl
 8002e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	018a      	lsls	r2, r1, #6
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ea8:	4659      	mov	r1, fp
 8002eaa:	eb63 0901 	sbc.w	r9, r3, r1
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ec2:	4690      	mov	r8, r2
 8002ec4:	4699      	mov	r9, r3
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	eb18 0303 	adds.w	r3, r8, r3
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	462b      	mov	r3, r5
 8002ed0:	eb49 0303 	adc.w	r3, r9, r3
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	024b      	lsls	r3, r1, #9
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eec:	4621      	mov	r1, r4
 8002eee:	024a      	lsls	r2, r1, #9
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002efc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f00:	f7fd f9c6 	bl	8000290 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f0c:	e058      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0e:	4b38      	ldr	r3, [pc, #224]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	2200      	movs	r2, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	4611      	mov	r1, r2
 8002f1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f1e:	623b      	str	r3, [r7, #32]
 8002f20:	2300      	movs	r3, #0
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
 8002f24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f28:	4642      	mov	r2, r8
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	f04f 0000 	mov.w	r0, #0
 8002f30:	f04f 0100 	mov.w	r1, #0
 8002f34:	0159      	lsls	r1, r3, #5
 8002f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3a:	0150      	lsls	r0, r2, #5
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4641      	mov	r1, r8
 8002f42:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f46:	4649      	mov	r1, r9
 8002f48:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f60:	ebb2 040a 	subs.w	r4, r2, sl
 8002f64:	eb63 050b 	sbc.w	r5, r3, fp
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	00eb      	lsls	r3, r5, #3
 8002f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f76:	00e2      	lsls	r2, r4, #3
 8002f78:	4614      	mov	r4, r2
 8002f7a:	461d      	mov	r5, r3
 8002f7c:	4643      	mov	r3, r8
 8002f7e:	18e3      	adds	r3, r4, r3
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	464b      	mov	r3, r9
 8002f84:	eb45 0303 	adc.w	r3, r5, r3
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f96:	4629      	mov	r1, r5
 8002f98:	028b      	lsls	r3, r1, #10
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	028a      	lsls	r2, r1, #10
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002faa:	2200      	movs	r2, #0
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	61fa      	str	r2, [r7, #28]
 8002fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb4:	f7fd f96c 	bl	8000290 <__aeabi_uldivmod>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fda:	e002      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3750      	adds	r7, #80	; 0x50
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	00f42400 	.word	0x00f42400
 8002ff8:	007a1200 	.word	0x007a1200

08002ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCC_GetHCLKFreq+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000000 	.word	0x20000000

08003014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003018:	f7ff fff0 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	0a9b      	lsrs	r3, r3, #10
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	4903      	ldr	r1, [pc, #12]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40023800 	.word	0x40023800
 8003038:	080054fc 	.word	0x080054fc

0800303c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003040:	f7ff ffdc 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	0b5b      	lsrs	r3, r3, #13
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4903      	ldr	r1, [pc, #12]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40023800 	.word	0x40023800
 8003060:	080054fc 	.word	0x080054fc

08003064 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e03f      	b.n	80030f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fd fe34 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2224      	movs	r2, #36	; 0x24
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fe1d 	bl	8003ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b08a      	sub	sp, #40	; 0x28
 8003102:	af02      	add	r7, sp, #8
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b20      	cmp	r3, #32
 800311c:	d17c      	bne.n	8003218 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_UART_Transmit+0x2c>
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e075      	b.n	800321a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_UART_Transmit+0x3e>
 8003138:	2302      	movs	r3, #2
 800313a:	e06e      	b.n	800321a <HAL_UART_Transmit+0x11c>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2221      	movs	r2, #33	; 0x21
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003152:	f7fe f81b 	bl	800118c <HAL_GetTick>
 8003156:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	88fa      	ldrh	r2, [r7, #6]
 8003162:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316c:	d108      	bne.n	8003180 <HAL_UART_Transmit+0x82>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d104      	bne.n	8003180 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	e003      	b.n	8003188 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003190:	e02a      	b.n	80031e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	2180      	movs	r1, #128	; 0x80
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fb9b 	bl	80038d8 <UART_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e036      	b.n	800321a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	3302      	adds	r3, #2
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	e007      	b.n	80031da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	781a      	ldrb	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	3301      	adds	r3, #1
 80031d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1cf      	bne.n	8003192 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2140      	movs	r1, #64	; 0x40
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fb6b 	bl	80038d8 <UART_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e006      	b.n	800321a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	e000      	b.n	800321a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003218:	2302      	movs	r3, #2
  }
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b08a      	sub	sp, #40	; 0x28
 8003226:	af02      	add	r7, sp, #8
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b20      	cmp	r3, #32
 8003240:	f040 808c 	bne.w	800335c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_UART_Receive+0x2e>
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e084      	b.n	800335e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_UART_Receive+0x40>
 800325e:	2302      	movs	r3, #2
 8003260:	e07d      	b.n	800335e <HAL_UART_Receive+0x13c>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2222      	movs	r2, #34	; 0x22
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800327e:	f7fd ff85 	bl	800118c <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003298:	d108      	bne.n	80032ac <HAL_UART_Receive+0x8a>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d104      	bne.n	80032ac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	e003      	b.n	80032b4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80032bc:	e043      	b.n	8003346 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2200      	movs	r2, #0
 80032c6:	2120      	movs	r1, #32
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fb05 	bl	80038d8 <UART_WaitOnFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e042      	b.n	800335e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	3302      	adds	r3, #2
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	e01f      	b.n	8003338 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003300:	d007      	beq.n	8003312 <HAL_UART_Receive+0xf0>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <HAL_UART_Receive+0xfe>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e008      	b.n	8003332 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332c:	b2da      	uxtb	r2, r3
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3301      	adds	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1b6      	bne.n	80032be <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	e000      	b.n	800335e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800335c:	2302      	movs	r3, #2
  }
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b0ba      	sub	sp, #232	; 0xe8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003394:	2300      	movs	r3, #0
 8003396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800339a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_UART_IRQHandler+0x66>
 80033ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fbd3 	bl	8003b72 <UART_Receive_IT>
      return;
 80033cc:	e256      	b.n	800387c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80de 	beq.w	8003594 <HAL_UART_IRQHandler+0x22c>
 80033d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80d1 	beq.w	8003594 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_UART_IRQHandler+0xae>
 80033fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_UART_IRQHandler+0xd2>
 8003422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f043 0202 	orr.w	r2, r3, #2
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_UART_IRQHandler+0xf6>
 8003446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f043 0204 	orr.w	r2, r3, #4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800345e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d011      	beq.n	800348e <HAL_UART_IRQHandler+0x126>
 800346a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f043 0208 	orr.w	r2, r3, #8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 81ed 	beq.w	8003872 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_UART_IRQHandler+0x14e>
 80034a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fb5e 	bl	8003b72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c0:	2b40      	cmp	r3, #64	; 0x40
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <HAL_UART_IRQHandler+0x17a>
 80034da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d04f      	beq.n	8003582 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fa66 	bl	80039b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d141      	bne.n	800357a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3314      	adds	r3, #20
 80034fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800350c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3314      	adds	r3, #20
 800351e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003522:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800352e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800353a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1d9      	bne.n	80034f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	2b00      	cmp	r3, #0
 8003548:	d013      	beq.n	8003572 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	4a7d      	ldr	r2, [pc, #500]	; (8003744 <HAL_UART_IRQHandler+0x3dc>)
 8003550:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fcc2 	bl	8001ee0 <HAL_DMA_Abort_IT>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800356c:	4610      	mov	r0, r2
 800356e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	e00e      	b.n	8003590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f99a 	bl	80038ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003578:	e00a      	b.n	8003590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f996 	bl	80038ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003580:	e006      	b.n	8003590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f992 	bl	80038ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800358e:	e170      	b.n	8003872 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003590:	bf00      	nop
    return;
 8003592:	e16e      	b.n	8003872 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	2b01      	cmp	r3, #1
 800359a:	f040 814a 	bne.w	8003832 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8143 	beq.w	8003832 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 813c 	beq.w	8003832 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	f040 80b4 	bne.w	8003748 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8140 	beq.w	8003876 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035fe:	429a      	cmp	r2, r3
 8003600:	f080 8139 	bcs.w	8003876 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800360a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003616:	f000 8088 	beq.w	800372a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800364a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003652:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800365e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1d9      	bne.n	800361a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3314      	adds	r3, #20
 800366c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3314      	adds	r3, #20
 8003686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800368a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800368e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003692:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800369c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e1      	bne.n	8003666 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3314      	adds	r3, #20
 80036a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3314      	adds	r3, #20
 80036c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e3      	bne.n	80036a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036fa:	f023 0310 	bic.w	r3, r3, #16
 80036fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800370c:	65ba      	str	r2, [r7, #88]	; 0x58
 800370e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003714:	e841 2300 	strex	r3, r2, [r1]
 8003718:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800371a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e3      	bne.n	80036e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe fb6b 	bl	8001e00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003732:	b29b      	uxth	r3, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	b29b      	uxth	r3, r3
 8003738:	4619      	mov	r1, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8c0 	bl	80038c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003740:	e099      	b.n	8003876 <HAL_UART_IRQHandler+0x50e>
 8003742:	bf00      	nop
 8003744:	08003a7b 	.word	0x08003a7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003750:	b29b      	uxth	r3, r3
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 808b 	beq.w	800387a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8086 	beq.w	800387a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	330c      	adds	r3, #12
 8003774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003792:	647a      	str	r2, [r7, #68]	; 0x44
 8003794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e3      	bne.n	800376e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3314      	adds	r3, #20
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	623b      	str	r3, [r7, #32]
   return(result);
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3314      	adds	r3, #20
 80037c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037ca:	633a      	str	r2, [r7, #48]	; 0x30
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e3      	bne.n	80037a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	330c      	adds	r3, #12
 80037f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0310 	bic.w	r3, r3, #16
 8003802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	330c      	adds	r3, #12
 800380c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003810:	61fa      	str	r2, [r7, #28]
 8003812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	69b9      	ldr	r1, [r7, #24]
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	617b      	str	r3, [r7, #20]
   return(result);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e3      	bne.n	80037ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003828:	4619      	mov	r1, r3
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f848 	bl	80038c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003830:	e023      	b.n	800387a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <HAL_UART_IRQHandler+0x4ea>
 800383e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f929 	bl	8003aa2 <UART_Transmit_IT>
    return;
 8003850:	e014      	b.n	800387c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00e      	beq.n	800387c <HAL_UART_IRQHandler+0x514>
 800385e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f969 	bl	8003b42 <UART_EndTransmit_IT>
    return;
 8003870:	e004      	b.n	800387c <HAL_UART_IRQHandler+0x514>
    return;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <HAL_UART_IRQHandler+0x514>
      return;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <HAL_UART_IRQHandler+0x514>
      return;
 800387a:	bf00      	nop
  }
}
 800387c:	37e8      	adds	r7, #232	; 0xe8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop

08003884 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b090      	sub	sp, #64	; 0x40
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e8:	e050      	b.n	800398c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d04c      	beq.n	800398c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <UART_WaitOnFlagUntilTimeout+0x30>
 80038f8:	f7fd fc48 	bl	800118c <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003904:	429a      	cmp	r2, r3
 8003906:	d241      	bcs.n	800398c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003928:	637a      	str	r2, [r7, #52]	; 0x34
 800392a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800392e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3314      	adds	r3, #20
 8003942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	613b      	str	r3, [r7, #16]
   return(result);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	63bb      	str	r3, [r7, #56]	; 0x38
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3314      	adds	r3, #20
 800395a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395c:	623a      	str	r2, [r7, #32]
 800395e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	69f9      	ldr	r1, [r7, #28]
 8003962:	6a3a      	ldr	r2, [r7, #32]
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	61bb      	str	r3, [r7, #24]
   return(result);
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e5      	bne.n	800393c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e00f      	b.n	80039ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4013      	ands	r3, r2
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d09f      	beq.n	80038ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3740      	adds	r7, #64	; 0x40
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b095      	sub	sp, #84	; 0x54
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	330c      	adds	r3, #12
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	330c      	adds	r3, #12
 80039da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039dc:	643a      	str	r2, [r7, #64]	; 0x40
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e5      	bne.n	80039bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3314      	adds	r3, #20
 80039f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3314      	adds	r3, #20
 8003a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e5      	bne.n	80039f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d119      	bne.n	8003a60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	330c      	adds	r3, #12
 8003a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f023 0310 	bic.w	r3, r3, #16
 8003a42:	647b      	str	r3, [r7, #68]	; 0x44
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a4c:	61ba      	str	r2, [r7, #24]
 8003a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6979      	ldr	r1, [r7, #20]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	613b      	str	r3, [r7, #16]
   return(result);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e5      	bne.n	8003a2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a6e:	bf00      	nop
 8003a70:	3754      	adds	r7, #84	; 0x54
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7ff ff09 	bl	80038ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b21      	cmp	r3, #33	; 0x21
 8003ab4:	d13e      	bne.n	8003b34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abe:	d114      	bne.n	8003aea <UART_Transmit_IT+0x48>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d110      	bne.n	8003aea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003adc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	621a      	str	r2, [r3, #32]
 8003ae8:	e008      	b.n	8003afc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	1c59      	adds	r1, r3, #1
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6211      	str	r1, [r2, #32]
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10f      	bne.n	8003b30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff fe8e 	bl	8003884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b08c      	sub	sp, #48	; 0x30
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b22      	cmp	r3, #34	; 0x22
 8003b84:	f040 80ab 	bne.w	8003cde <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b90:	d117      	bne.n	8003bc2 <UART_Receive_IT+0x50>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d113      	bne.n	8003bc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	1c9a      	adds	r2, r3, #2
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8003bc0:	e026      	b.n	8003c10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd4:	d007      	beq.n	8003be6 <UART_Receive_IT+0x74>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <UART_Receive_IT+0x82>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	e008      	b.n	8003c06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d15a      	bne.n	8003cda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0220 	bic.w	r2, r2, #32
 8003c32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d135      	bne.n	8003cd0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	613b      	str	r3, [r7, #16]
   return(result);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f023 0310 	bic.w	r3, r3, #16
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8a:	623a      	str	r2, [r7, #32]
 8003c8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	69f9      	ldr	r1, [r7, #28]
 8003c90:	6a3a      	ldr	r2, [r7, #32]
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e5      	bne.n	8003c6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d10a      	bne.n	8003cc2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff fdf9 	bl	80038c0 <HAL_UARTEx_RxEventCallback>
 8003cce:	e002      	b.n	8003cd6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff fde1 	bl	8003898 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e002      	b.n	8003ce0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e000      	b.n	8003ce0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
  }
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3730      	adds	r7, #48	; 0x30
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cec:	b0c0      	sub	sp, #256	; 0x100
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	68d9      	ldr	r1, [r3, #12]
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	ea40 0301 	orr.w	r3, r0, r1
 8003d10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d40:	f021 010c 	bic.w	r1, r1, #12
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d62:	6999      	ldr	r1, [r3, #24]
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	ea40 0301 	orr.w	r3, r0, r1
 8003d6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4b8f      	ldr	r3, [pc, #572]	; (8003fb4 <UART_SetConfig+0x2cc>)
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d005      	beq.n	8003d88 <UART_SetConfig+0xa0>
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b8d      	ldr	r3, [pc, #564]	; (8003fb8 <UART_SetConfig+0x2d0>)
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d104      	bne.n	8003d92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7ff f958 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 8003d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d90:	e003      	b.n	8003d9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d92:	f7ff f93f 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 8003d96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da4:	f040 810c 	bne.w	8003fc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dac:	2200      	movs	r2, #0
 8003dae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003db2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003db6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dba:	4622      	mov	r2, r4
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	1891      	adds	r1, r2, r2
 8003dc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dc2:	415b      	adcs	r3, r3
 8003dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dca:	4621      	mov	r1, r4
 8003dcc:	eb12 0801 	adds.w	r8, r2, r1
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	eb43 0901 	adc.w	r9, r3, r1
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dea:	4690      	mov	r8, r2
 8003dec:	4699      	mov	r9, r3
 8003dee:	4623      	mov	r3, r4
 8003df0:	eb18 0303 	adds.w	r3, r8, r3
 8003df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003df8:	462b      	mov	r3, r5
 8003dfa:	eb49 0303 	adc.w	r3, r9, r3
 8003dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e16:	460b      	mov	r3, r1
 8003e18:	18db      	adds	r3, r3, r3
 8003e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	eb42 0303 	adc.w	r3, r2, r3
 8003e22:	657b      	str	r3, [r7, #84]	; 0x54
 8003e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e2c:	f7fc fa30 	bl	8000290 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4b61      	ldr	r3, [pc, #388]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003e36:	fba3 2302 	umull	r2, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	011c      	lsls	r4, r3, #4
 8003e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e50:	4642      	mov	r2, r8
 8003e52:	464b      	mov	r3, r9
 8003e54:	1891      	adds	r1, r2, r2
 8003e56:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e58:	415b      	adcs	r3, r3
 8003e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e60:	4641      	mov	r1, r8
 8003e62:	eb12 0a01 	adds.w	sl, r2, r1
 8003e66:	4649      	mov	r1, r9
 8003e68:	eb43 0b01 	adc.w	fp, r3, r1
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e80:	4692      	mov	sl, r2
 8003e82:	469b      	mov	fp, r3
 8003e84:	4643      	mov	r3, r8
 8003e86:	eb1a 0303 	adds.w	r3, sl, r3
 8003e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e8e:	464b      	mov	r3, r9
 8003e90:	eb4b 0303 	adc.w	r3, fp, r3
 8003e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ea4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ea8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003eac:	460b      	mov	r3, r1
 8003eae:	18db      	adds	r3, r3, r3
 8003eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	eb42 0303 	adc.w	r3, r2, r3
 8003eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ebe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ec2:	f7fc f9e5 	bl	8000290 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003ece:	fba3 2301 	umull	r2, r3, r3, r1
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2264      	movs	r2, #100	; 0x64
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	1acb      	subs	r3, r1, r3
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ee2:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ef0:	441c      	add	r4, r3
 8003ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003efc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f04:	4642      	mov	r2, r8
 8003f06:	464b      	mov	r3, r9
 8003f08:	1891      	adds	r1, r2, r2
 8003f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f0c:	415b      	adcs	r3, r3
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f14:	4641      	mov	r1, r8
 8003f16:	1851      	adds	r1, r2, r1
 8003f18:	6339      	str	r1, [r7, #48]	; 0x30
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	414b      	adcs	r3, r1
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	00cb      	lsls	r3, r1, #3
 8003f30:	4651      	mov	r1, sl
 8003f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f36:	4651      	mov	r1, sl
 8003f38:	00ca      	lsls	r2, r1, #3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4642      	mov	r2, r8
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f48:	464b      	mov	r3, r9
 8003f4a:	460a      	mov	r2, r1
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f68:	460b      	mov	r3, r1
 8003f6a:	18db      	adds	r3, r3, r3
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f6e:	4613      	mov	r3, r2
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f7e:	f7fc f987 	bl	8000290 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	2164      	movs	r1, #100	; 0x64
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	3332      	adds	r3, #50	; 0x32
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	f003 0207 	and.w	r2, r3, #7
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4422      	add	r2, r4
 8003fae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fb0:	e105      	b.n	80041be <UART_SetConfig+0x4d6>
 8003fb2:	bf00      	nop
 8003fb4:	40011000 	.word	0x40011000
 8003fb8:	40011400 	.word	0x40011400
 8003fbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fd2:	4642      	mov	r2, r8
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	1891      	adds	r1, r2, r2
 8003fd8:	6239      	str	r1, [r7, #32]
 8003fda:	415b      	adcs	r3, r3
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	1854      	adds	r4, r2, r1
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	eb43 0501 	adc.w	r5, r3, r1
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	00eb      	lsls	r3, r5, #3
 8003ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffa:	00e2      	lsls	r2, r4, #3
 8003ffc:	4614      	mov	r4, r2
 8003ffe:	461d      	mov	r5, r3
 8004000:	4643      	mov	r3, r8
 8004002:	18e3      	adds	r3, r4, r3
 8004004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004008:	464b      	mov	r3, r9
 800400a:	eb45 0303 	adc.w	r3, r5, r3
 800400e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800401e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800402e:	4629      	mov	r1, r5
 8004030:	008b      	lsls	r3, r1, #2
 8004032:	4621      	mov	r1, r4
 8004034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004038:	4621      	mov	r1, r4
 800403a:	008a      	lsls	r2, r1, #2
 800403c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004040:	f7fc f926 	bl	8000290 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4b60      	ldr	r3, [pc, #384]	; (80041cc <UART_SetConfig+0x4e4>)
 800404a:	fba3 2302 	umull	r2, r3, r3, r2
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	011c      	lsls	r4, r3, #4
 8004052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800405c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004060:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004064:	4642      	mov	r2, r8
 8004066:	464b      	mov	r3, r9
 8004068:	1891      	adds	r1, r2, r2
 800406a:	61b9      	str	r1, [r7, #24]
 800406c:	415b      	adcs	r3, r3
 800406e:	61fb      	str	r3, [r7, #28]
 8004070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004074:	4641      	mov	r1, r8
 8004076:	1851      	adds	r1, r2, r1
 8004078:	6139      	str	r1, [r7, #16]
 800407a:	4649      	mov	r1, r9
 800407c:	414b      	adcs	r3, r1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800408c:	4659      	mov	r1, fp
 800408e:	00cb      	lsls	r3, r1, #3
 8004090:	4651      	mov	r1, sl
 8004092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004096:	4651      	mov	r1, sl
 8004098:	00ca      	lsls	r2, r1, #3
 800409a:	4610      	mov	r0, r2
 800409c:	4619      	mov	r1, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	4642      	mov	r2, r8
 80040a2:	189b      	adds	r3, r3, r2
 80040a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040a8:	464b      	mov	r3, r9
 80040aa:	460a      	mov	r2, r1
 80040ac:	eb42 0303 	adc.w	r3, r2, r3
 80040b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80040be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040cc:	4649      	mov	r1, r9
 80040ce:	008b      	lsls	r3, r1, #2
 80040d0:	4641      	mov	r1, r8
 80040d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d6:	4641      	mov	r1, r8
 80040d8:	008a      	lsls	r2, r1, #2
 80040da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040de:	f7fc f8d7 	bl	8000290 <__aeabi_uldivmod>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4b39      	ldr	r3, [pc, #228]	; (80041cc <UART_SetConfig+0x4e4>)
 80040e8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	2164      	movs	r1, #100	; 0x64
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	3332      	adds	r3, #50	; 0x32
 80040fa:	4a34      	ldr	r2, [pc, #208]	; (80041cc <UART_SetConfig+0x4e4>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004106:	441c      	add	r4, r3
 8004108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410c:	2200      	movs	r2, #0
 800410e:	673b      	str	r3, [r7, #112]	; 0x70
 8004110:	677a      	str	r2, [r7, #116]	; 0x74
 8004112:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004116:	4642      	mov	r2, r8
 8004118:	464b      	mov	r3, r9
 800411a:	1891      	adds	r1, r2, r2
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	415b      	adcs	r3, r3
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004126:	4641      	mov	r1, r8
 8004128:	1851      	adds	r1, r2, r1
 800412a:	6039      	str	r1, [r7, #0]
 800412c:	4649      	mov	r1, r9
 800412e:	414b      	adcs	r3, r1
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800413e:	4659      	mov	r1, fp
 8004140:	00cb      	lsls	r3, r1, #3
 8004142:	4651      	mov	r1, sl
 8004144:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004148:	4651      	mov	r1, sl
 800414a:	00ca      	lsls	r2, r1, #3
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	4603      	mov	r3, r0
 8004152:	4642      	mov	r2, r8
 8004154:	189b      	adds	r3, r3, r2
 8004156:	66bb      	str	r3, [r7, #104]	; 0x68
 8004158:	464b      	mov	r3, r9
 800415a:	460a      	mov	r2, r1
 800415c:	eb42 0303 	adc.w	r3, r2, r3
 8004160:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	663b      	str	r3, [r7, #96]	; 0x60
 800416c:	667a      	str	r2, [r7, #100]	; 0x64
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800417a:	4649      	mov	r1, r9
 800417c:	008b      	lsls	r3, r1, #2
 800417e:	4641      	mov	r1, r8
 8004180:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004184:	4641      	mov	r1, r8
 8004186:	008a      	lsls	r2, r1, #2
 8004188:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800418c:	f7fc f880 	bl	8000290 <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <UART_SetConfig+0x4e4>)
 8004196:	fba3 1302 	umull	r1, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2164      	movs	r1, #100	; 0x64
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	3332      	adds	r3, #50	; 0x32
 80041a8:	4a08      	ldr	r2, [pc, #32]	; (80041cc <UART_SetConfig+0x4e4>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	f003 020f 	and.w	r2, r3, #15
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4422      	add	r2, r4
 80041bc:	609a      	str	r2, [r3, #8]
}
 80041be:	bf00      	nop
 80041c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ca:	bf00      	nop
 80041cc:	51eb851f 	.word	0x51eb851f

080041d0 <send_nitro_data_to_bluetooth>:
#include "bluetooth_driver.h"
#include "main.h"

extern UART_HandleTypeDef huart1;

void send_nitro_data_to_bluetooth(uint8_t data){
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	71fb      	strb	r3, [r7, #7]

	char send_nitro[16];

	if(1 == data){
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d106      	bne.n	80041ee <send_nitro_data_to_bluetooth+0x1e>
		HAL_UART_Transmit(&huart1, (uint8_t*)"N: NULL\n", strlen("N: NULL\n"), 50);
 80041e0:	2332      	movs	r3, #50	; 0x32
 80041e2:	2208      	movs	r2, #8
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <send_nitro_data_to_bluetooth+0x50>)
 80041e6:	480f      	ldr	r0, [pc, #60]	; (8004224 <send_nitro_data_to_bluetooth+0x54>)
 80041e8:	f7fe ff89 	bl	80030fe <HAL_UART_Transmit>
	}
	else{
		sprintf(send_nitro, "N: %d\n", data);
		HAL_UART_Transmit(&huart1, (uint8_t*)send_nitro, strlen(send_nitro), 50);
	}
}
 80041ec:	e013      	b.n	8004216 <send_nitro_data_to_bluetooth+0x46>
		sprintf(send_nitro, "N: %d\n", data);
 80041ee:	79fa      	ldrb	r2, [r7, #7]
 80041f0:	f107 0308 	add.w	r3, r7, #8
 80041f4:	490c      	ldr	r1, [pc, #48]	; (8004228 <send_nitro_data_to_bluetooth+0x58>)
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fc9e 	bl	8004b38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)send_nitro, strlen(send_nitro), 50);
 80041fc:	f107 0308 	add.w	r3, r7, #8
 8004200:	4618      	mov	r0, r3
 8004202:	f7fb ffed 	bl	80001e0 <strlen>
 8004206:	4603      	mov	r3, r0
 8004208:	b29a      	uxth	r2, r3
 800420a:	f107 0108 	add.w	r1, r7, #8
 800420e:	2332      	movs	r3, #50	; 0x32
 8004210:	4804      	ldr	r0, [pc, #16]	; (8004224 <send_nitro_data_to_bluetooth+0x54>)
 8004212:	f7fe ff74 	bl	80030fe <HAL_UART_Transmit>
}
 8004216:	bf00      	nop
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	0800548c 	.word	0x0800548c
 8004224:	20000134 	.word	0x20000134
 8004228:	08005498 	.word	0x08005498

0800422c <send_phos_data_to_bluetooth>:

void send_phos_data_to_bluetooth(uint8_t data){
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]

	char send_phos[16];

	if(1 == data){
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d106      	bne.n	800424a <send_phos_data_to_bluetooth+0x1e>
		HAL_UART_Transmit(&huart1, (uint8_t*)"P: NULL\n", strlen("P: NULL\n"), 50);
 800423c:	2332      	movs	r3, #50	; 0x32
 800423e:	2208      	movs	r2, #8
 8004240:	490e      	ldr	r1, [pc, #56]	; (800427c <send_phos_data_to_bluetooth+0x50>)
 8004242:	480f      	ldr	r0, [pc, #60]	; (8004280 <send_phos_data_to_bluetooth+0x54>)
 8004244:	f7fe ff5b 	bl	80030fe <HAL_UART_Transmit>
	}
	else{
		sprintf(send_phos, "P: %d\n", data);
		HAL_UART_Transmit(&huart1, (uint8_t*)send_phos, strlen(send_phos), 50);
	}
}
 8004248:	e013      	b.n	8004272 <send_phos_data_to_bluetooth+0x46>
		sprintf(send_phos, "P: %d\n", data);
 800424a:	79fa      	ldrb	r2, [r7, #7]
 800424c:	f107 0308 	add.w	r3, r7, #8
 8004250:	490c      	ldr	r1, [pc, #48]	; (8004284 <send_phos_data_to_bluetooth+0x58>)
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fc70 	bl	8004b38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)send_phos, strlen(send_phos), 50);
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	4618      	mov	r0, r3
 800425e:	f7fb ffbf 	bl	80001e0 <strlen>
 8004262:	4603      	mov	r3, r0
 8004264:	b29a      	uxth	r2, r3
 8004266:	f107 0108 	add.w	r1, r7, #8
 800426a:	2332      	movs	r3, #50	; 0x32
 800426c:	4804      	ldr	r0, [pc, #16]	; (8004280 <send_phos_data_to_bluetooth+0x54>)
 800426e:	f7fe ff46 	bl	80030fe <HAL_UART_Transmit>
}
 8004272:	bf00      	nop
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	080054a0 	.word	0x080054a0
 8004280:	20000134 	.word	0x20000134
 8004284:	080054ac 	.word	0x080054ac

08004288 <send_pota_data_to_bluetooth>:

void send_pota_data_to_bluetooth(uint8_t data){
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]

	char send_pota[16];

	if(1 == data){
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d106      	bne.n	80042a6 <send_pota_data_to_bluetooth+0x1e>
		HAL_UART_Transmit(&huart1, (uint8_t*)"K: NULL\n", strlen("K: NULL\n"), 50);
 8004298:	2332      	movs	r3, #50	; 0x32
 800429a:	2208      	movs	r2, #8
 800429c:	490e      	ldr	r1, [pc, #56]	; (80042d8 <send_pota_data_to_bluetooth+0x50>)
 800429e:	480f      	ldr	r0, [pc, #60]	; (80042dc <send_pota_data_to_bluetooth+0x54>)
 80042a0:	f7fe ff2d 	bl	80030fe <HAL_UART_Transmit>
	}
	else{
		sprintf(send_pota, "K: %d\n", data);
		HAL_UART_Transmit(&huart1, (uint8_t*)send_pota, strlen(send_pota), 50);
	}
}
 80042a4:	e013      	b.n	80042ce <send_pota_data_to_bluetooth+0x46>
		sprintf(send_pota, "K: %d\n", data);
 80042a6:	79fa      	ldrb	r2, [r7, #7]
 80042a8:	f107 0308 	add.w	r3, r7, #8
 80042ac:	490c      	ldr	r1, [pc, #48]	; (80042e0 <send_pota_data_to_bluetooth+0x58>)
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fc42 	bl	8004b38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)send_pota, strlen(send_pota), 50);
 80042b4:	f107 0308 	add.w	r3, r7, #8
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fb ff91 	bl	80001e0 <strlen>
 80042be:	4603      	mov	r3, r0
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	f107 0108 	add.w	r1, r7, #8
 80042c6:	2332      	movs	r3, #50	; 0x32
 80042c8:	4804      	ldr	r0, [pc, #16]	; (80042dc <send_pota_data_to_bluetooth+0x54>)
 80042ca:	f7fe ff18 	bl	80030fe <HAL_UART_Transmit>
}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	080054b4 	.word	0x080054b4
 80042dc:	20000134 	.word	0x20000134
 80042e0:	080054c0 	.word	0x080054c0

080042e4 <send_hum_data_to_bluetooth>:

void send_hum_data_to_bluetooth(uint32_t data){
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

	char send_hum[16];

	sprintf(send_hum, "Hum: %d\n", data);
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	490a      	ldr	r1, [pc, #40]	; (800431c <send_hum_data_to_bluetooth+0x38>)
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fc1f 	bl	8004b38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)send_hum, strlen(send_hum), 50);
 80042fa:	f107 0308 	add.w	r3, r7, #8
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fb ff6e 	bl	80001e0 <strlen>
 8004304:	4603      	mov	r3, r0
 8004306:	b29a      	uxth	r2, r3
 8004308:	f107 0108 	add.w	r1, r7, #8
 800430c:	2332      	movs	r3, #50	; 0x32
 800430e:	4804      	ldr	r0, [pc, #16]	; (8004320 <send_hum_data_to_bluetooth+0x3c>)
 8004310:	f7fe fef5 	bl	80030fe <HAL_UART_Transmit>
}
 8004314:	bf00      	nop
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	080054c8 	.word	0x080054c8
 8004320:	20000134 	.word	0x20000134

08004324 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <DWT_Delay_us+0x48>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8004332:	f7fe fe63 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8004336:	4603      	mov	r3, r0
 8004338:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <DWT_Delay_us+0x4c>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	0c9b      	lsrs	r3, r3, #18
 8004340:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800434c:	bf00      	nop
 800434e:	4b07      	ldr	r3, [pc, #28]	; (800436c <DWT_Delay_us+0x48>)
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad2      	subs	r2, r2, r3
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	1acb      	subs	r3, r1, r3
 800435c:	429a      	cmp	r2, r3
 800435e:	d3f6      	bcc.n	800434e <DWT_Delay_us+0x2a>
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	e0001000 	.word	0xe0001000
 8004370:	431bde83 	.word	0x431bde83

08004374 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800437c:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <DWT_Delay_ms+0x44>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8004382:	f7fe fe3b 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8004386:	4603      	mov	r3, r0
 8004388:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <DWT_Delay_ms+0x48>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 800439c:	bf00      	nop
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <DWT_Delay_ms+0x44>)
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad2      	subs	r2, r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d3f8      	bcc.n	800439e <DWT_Delay_ms+0x2a>
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	e0001000 	.word	0xe0001000
 80043bc:	10624dd3 	.word	0x10624dd3

080043c0 <LCD_DATA>:
#include "../util/DWT_Delay.h"

//-----[ Alphanumeric LCD 16x2 Routines ]-----

void LCD_DATA(unsigned char Data)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <LCD_DATA+0x26>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 80043d4:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <LCD_DATA+0xc4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a2a      	ldr	r2, [pc, #168]	; (8004484 <LCD_DATA+0xc4>)
 80043da:	8891      	ldrh	r1, [r2, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe f98e 	bl	8002700 <HAL_GPIO_WritePin>
 80043e4:	e007      	b.n	80043f6 <LCD_DATA+0x36>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 80043e6:	4b27      	ldr	r3, [pc, #156]	; (8004484 <LCD_DATA+0xc4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a26      	ldr	r2, [pc, #152]	; (8004484 <LCD_DATA+0xc4>)
 80043ec:	8891      	ldrh	r1, [r2, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe f985 	bl	8002700 <HAL_GPIO_WritePin>
    if(Data & 2)
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <LCD_DATA+0x52>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <LCD_DATA+0xc4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <LCD_DATA+0xc4>)
 8004406:	88d1      	ldrh	r1, [r2, #6]
 8004408:	2201      	movs	r2, #1
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe f978 	bl	8002700 <HAL_GPIO_WritePin>
 8004410:	e007      	b.n	8004422 <LCD_DATA+0x62>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 8004412:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <LCD_DATA+0xc4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1b      	ldr	r2, [pc, #108]	; (8004484 <LCD_DATA+0xc4>)
 8004418:	88d1      	ldrh	r1, [r2, #6]
 800441a:	2200      	movs	r2, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe f96f 	bl	8002700 <HAL_GPIO_WritePin>
    if(Data & 4)
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <LCD_DATA+0x7e>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 800442c:	4b15      	ldr	r3, [pc, #84]	; (8004484 <LCD_DATA+0xc4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a14      	ldr	r2, [pc, #80]	; (8004484 <LCD_DATA+0xc4>)
 8004432:	8911      	ldrh	r1, [r2, #8]
 8004434:	2201      	movs	r2, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe f962 	bl	8002700 <HAL_GPIO_WritePin>
 800443c:	e007      	b.n	800444e <LCD_DATA+0x8e>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 800443e:	4b11      	ldr	r3, [pc, #68]	; (8004484 <LCD_DATA+0xc4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a10      	ldr	r2, [pc, #64]	; (8004484 <LCD_DATA+0xc4>)
 8004444:	8911      	ldrh	r1, [r2, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe f959 	bl	8002700 <HAL_GPIO_WritePin>
    if(Data & 8)
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <LCD_DATA+0xaa>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 1);
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <LCD_DATA+0xc4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a09      	ldr	r2, [pc, #36]	; (8004484 <LCD_DATA+0xc4>)
 800445e:	8951      	ldrh	r1, [r2, #10]
 8004460:	2201      	movs	r2, #1
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe f94c 	bl	8002700 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
}
 8004468:	e007      	b.n	800447a <LCD_DATA+0xba>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <LCD_DATA+0xc4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a05      	ldr	r2, [pc, #20]	; (8004484 <LCD_DATA+0xc4>)
 8004470:	8951      	ldrh	r1, [r2, #10]
 8004472:	2200      	movs	r2, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe f943 	bl	8002700 <HAL_GPIO_WritePin>
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	0800550c 	.word	0x0800550c

08004488 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <LCD_CMD+0x60>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <LCD_CMD+0x60>)
 8004498:	89d1      	ldrh	r1, [r2, #14]
 800449a:	2200      	movs	r2, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f7fe f92f 	bl	8002700 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff ff8b 	bl	80043c0 <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 80044aa:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <LCD_CMD+0x60>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <LCD_CMD+0x60>)
 80044b0:	8991      	ldrh	r1, [r2, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe f923 	bl	8002700 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <LCD_CMD+0x60>)
 80044bc:	8a1b      	ldrh	r3, [r3, #16]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff ff30 	bl	8004324 <DWT_Delay_us>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <LCD_CMD+0x60>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a07      	ldr	r2, [pc, #28]	; (80044e8 <LCD_CMD+0x60>)
 80044ca:	8991      	ldrh	r1, [r2, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe f916 	bl	8002700 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <LCD_CMD+0x60>)
 80044d6:	8a1b      	ldrh	r3, [r3, #16]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff23 	bl	8004324 <DWT_Delay_us>
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	0800550c 	.word	0x0800550c

080044ec <LCD_Clear>:
void LCD_Clear()
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 80044f0:	2000      	movs	r0, #0
 80044f2:	f7ff ffc9 	bl	8004488 <LCD_CMD>
    LCD_CMD(1);
 80044f6:	2001      	movs	r0, #1
 80044f8:	f7ff ffc6 	bl	8004488 <LCD_CMD>
}
 80044fc:	bf00      	nop
 80044fe:	bd80      	pop	{r7, pc}

08004500 <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	460a      	mov	r2, r1
 800450a:	71fb      	strb	r3, [r7, #7]
 800450c:	4613      	mov	r3, r2
 800450e:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d111      	bne.n	800453a <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8004516:	79bb      	ldrb	r3, [r7, #6]
 8004518:	337f      	adds	r3, #127	; 0x7f
 800451a:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 800452a:	7bbb      	ldrb	r3, [r7, #14]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff ffab 	bl	8004488 <LCD_CMD>
      LCD_CMD(Low4);
 8004532:	7b7b      	ldrb	r3, [r7, #13]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff ffa7 	bl	8004488 <LCD_CMD>
    }
    if(r == 2)
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d111      	bne.n	8004564 <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 8004540:	79bb      	ldrb	r3, [r7, #6]
 8004542:	3b41      	subs	r3, #65	; 0x41
 8004544:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8004554:	7bbb      	ldrb	r3, [r7, #14]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ff96 	bl	8004488 <LCD_CMD>
      LCD_CMD(Low4);
 800455c:	7b7b      	ldrb	r3, [r7, #13]
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff ff92 	bl	8004488 <LCD_CMD>
    }
    DWT_Delay_ms(1);
 8004564:	2001      	movs	r0, #1
 8004566:	f7ff ff05 	bl	8004374 <DWT_Delay_ms>
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <LCD_Init>:
void LCD_Init()
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	; 0x28
 8004578:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457a:	f107 0314 	add.w	r3, r7, #20
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	609a      	str	r2, [r3, #8]
 8004586:	60da      	str	r2, [r3, #12]
 8004588:	611a      	str	r2, [r3, #16]
	// Initialize The DWT Delay Function Which Will Be Used Later On
	DWT_Delay_Init();
 800458a:	f000 fa73 	bl	8004a74 <DWT_Delay_Init>
    // IO Pin Configurations
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 800458e:	4b74      	ldr	r3, [pc, #464]	; (8004760 <LCD_Init+0x1ec>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a74      	ldr	r2, [pc, #464]	; (8004764 <LCD_Init+0x1f0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d10e      	bne.n	80045b6 <LCD_Init+0x42>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	4b72      	ldr	r3, [pc, #456]	; (8004768 <LCD_Init+0x1f4>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	4a71      	ldr	r2, [pc, #452]	; (8004768 <LCD_Init+0x1f4>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6313      	str	r3, [r2, #48]	; 0x30
 80045a8:	4b6f      	ldr	r3, [pc, #444]	; (8004768 <LCD_Init+0x1f4>)
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	e03a      	b.n	800462c <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 80045b6:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <LCD_Init+0x1ec>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a6c      	ldr	r2, [pc, #432]	; (800476c <LCD_Init+0x1f8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d10e      	bne.n	80045de <LCD_Init+0x6a>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	4b68      	ldr	r3, [pc, #416]	; (8004768 <LCD_Init+0x1f4>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	4a67      	ldr	r2, [pc, #412]	; (8004768 <LCD_Init+0x1f4>)
 80045ca:	f043 0302 	orr.w	r3, r3, #2
 80045ce:	6313      	str	r3, [r2, #48]	; 0x30
 80045d0:	4b65      	ldr	r3, [pc, #404]	; (8004768 <LCD_Init+0x1f4>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	e026      	b.n	800462c <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 80045de:	4b60      	ldr	r3, [pc, #384]	; (8004760 <LCD_Init+0x1ec>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a63      	ldr	r2, [pc, #396]	; (8004770 <LCD_Init+0x1fc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d10e      	bne.n	8004606 <LCD_Init+0x92>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80045e8:	2300      	movs	r3, #0
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	4b5e      	ldr	r3, [pc, #376]	; (8004768 <LCD_Init+0x1f4>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	4a5d      	ldr	r2, [pc, #372]	; (8004768 <LCD_Init+0x1f4>)
 80045f2:	f043 0304 	orr.w	r3, r3, #4
 80045f6:	6313      	str	r3, [r2, #48]	; 0x30
 80045f8:	4b5b      	ldr	r3, [pc, #364]	; (8004768 <LCD_Init+0x1f4>)
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	e012      	b.n	800462c <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 8004606:	4b56      	ldr	r3, [pc, #344]	; (8004760 <LCD_Init+0x1ec>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a5a      	ldr	r2, [pc, #360]	; (8004774 <LCD_Init+0x200>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d10d      	bne.n	800462c <LCD_Init+0xb8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8004610:	2300      	movs	r3, #0
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	4b54      	ldr	r3, [pc, #336]	; (8004768 <LCD_Init+0x1f4>)
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	4a53      	ldr	r2, [pc, #332]	; (8004768 <LCD_Init+0x1f4>)
 800461a:	f043 0308 	orr.w	r3, r3, #8
 800461e:	6313      	str	r3, [r2, #48]	; 0x30
 8004620:	4b51      	ldr	r3, [pc, #324]	; (8004768 <LCD_Init+0x1f4>)
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 800462c:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <LCD_Init+0x1ec>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a4b      	ldr	r2, [pc, #300]	; (8004760 <LCD_Init+0x1ec>)
 8004632:	8891      	ldrh	r1, [r2, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe f862 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 800463c:	4b48      	ldr	r3, [pc, #288]	; (8004760 <LCD_Init+0x1ec>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a47      	ldr	r2, [pc, #284]	; (8004760 <LCD_Init+0x1ec>)
 8004642:	88d1      	ldrh	r1, [r2, #6]
 8004644:	2200      	movs	r2, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe f85a 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 800464c:	4b44      	ldr	r3, [pc, #272]	; (8004760 <LCD_Init+0x1ec>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a43      	ldr	r2, [pc, #268]	; (8004760 <LCD_Init+0x1ec>)
 8004652:	8911      	ldrh	r1, [r2, #8]
 8004654:	2200      	movs	r2, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe f852 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 800465c:	4b40      	ldr	r3, [pc, #256]	; (8004760 <LCD_Init+0x1ec>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a3f      	ldr	r2, [pc, #252]	; (8004760 <LCD_Init+0x1ec>)
 8004662:	8951      	ldrh	r1, [r2, #10]
 8004664:	2200      	movs	r2, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe f84a 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 800466c:	4b3c      	ldr	r3, [pc, #240]	; (8004760 <LCD_Init+0x1ec>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a3b      	ldr	r2, [pc, #236]	; (8004760 <LCD_Init+0x1ec>)
 8004672:	89d1      	ldrh	r1, [r2, #14]
 8004674:	2200      	movs	r2, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe f842 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 800467c:	4b38      	ldr	r3, [pc, #224]	; (8004760 <LCD_Init+0x1ec>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a37      	ldr	r2, [pc, #220]	; (8004760 <LCD_Init+0x1ec>)
 8004682:	8991      	ldrh	r1, [r2, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe f83a 	bl	8002700 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 800468c:	4b34      	ldr	r3, [pc, #208]	; (8004760 <LCD_Init+0x1ec>)
 800468e:	889a      	ldrh	r2, [r3, #4]
 8004690:	4b33      	ldr	r3, [pc, #204]	; (8004760 <LCD_Init+0x1ec>)
 8004692:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8004694:	4313      	orrs	r3, r2
 8004696:	b29a      	uxth	r2, r3
 8004698:	4b31      	ldr	r3, [pc, #196]	; (8004760 <LCD_Init+0x1ec>)
 800469a:	891b      	ldrh	r3, [r3, #8]
 800469c:	4313      	orrs	r3, r2
 800469e:	b29a      	uxth	r2, r3
 80046a0:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <LCD_Init+0x1ec>)
 80046a2:	895b      	ldrh	r3, [r3, #10]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	4b2d      	ldr	r3, [pc, #180]	; (8004760 <LCD_Init+0x1ec>)
 80046aa:	89db      	ldrh	r3, [r3, #14]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 80046b0:	4b2b      	ldr	r3, [pc, #172]	; (8004760 <LCD_Init+0x1ec>)
 80046b2:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 80046b4:	4313      	orrs	r3, r2
 80046b6:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 80046b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046ba:	2301      	movs	r3, #1
 80046bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c2:	2300      	movs	r3, #0
 80046c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 80046c6:	4b26      	ldr	r3, [pc, #152]	; (8004760 <LCD_Init+0x1ec>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f107 0214 	add.w	r2, r7, #20
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fd fe91 	bl	80023f8 <HAL_GPIO_Init>

	// The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 80046d6:	4b22      	ldr	r3, [pc, #136]	; (8004760 <LCD_Init+0x1ec>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a21      	ldr	r2, [pc, #132]	; (8004760 <LCD_Init+0x1ec>)
 80046dc:	89d1      	ldrh	r1, [r2, #14]
 80046de:	2200      	movs	r2, #0
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fe f80d 	bl	8002700 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 80046e6:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <LCD_Init+0x1ec>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1d      	ldr	r2, [pc, #116]	; (8004760 <LCD_Init+0x1ec>)
 80046ec:	8991      	ldrh	r1, [r2, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe f805 	bl	8002700 <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 80046f6:	2000      	movs	r0, #0
 80046f8:	f7ff fe62 	bl	80043c0 <LCD_DATA>
    DWT_Delay_ms(150);
 80046fc:	2096      	movs	r0, #150	; 0x96
 80046fe:	f7ff fe39 	bl	8004374 <DWT_Delay_ms>
    LCD_CMD(0x03);
 8004702:	2003      	movs	r0, #3
 8004704:	f7ff fec0 	bl	8004488 <LCD_CMD>
    DWT_Delay_ms(5);
 8004708:	2005      	movs	r0, #5
 800470a:	f7ff fe33 	bl	8004374 <DWT_Delay_ms>
    LCD_CMD(0x03);
 800470e:	2003      	movs	r0, #3
 8004710:	f7ff feba 	bl	8004488 <LCD_CMD>
    DWT_Delay_us(150);
 8004714:	2096      	movs	r0, #150	; 0x96
 8004716:	f7ff fe05 	bl	8004324 <DWT_Delay_us>
    LCD_CMD(0x03);
 800471a:	2003      	movs	r0, #3
 800471c:	f7ff feb4 	bl	8004488 <LCD_CMD>
    LCD_CMD(0x02);
 8004720:	2002      	movs	r0, #2
 8004722:	f7ff feb1 	bl	8004488 <LCD_CMD>
    LCD_CMD(0x02);
 8004726:	2002      	movs	r0, #2
 8004728:	f7ff feae 	bl	8004488 <LCD_CMD>
    LCD_CMD(0x08);
 800472c:	2008      	movs	r0, #8
 800472e:	f7ff feab 	bl	8004488 <LCD_CMD>
    LCD_CMD(0x00);
 8004732:	2000      	movs	r0, #0
 8004734:	f7ff fea8 	bl	8004488 <LCD_CMD>
    LCD_CMD(0x0C);
 8004738:	200c      	movs	r0, #12
 800473a:	f7ff fea5 	bl	8004488 <LCD_CMD>
    LCD_CMD(0x00);
 800473e:	2000      	movs	r0, #0
 8004740:	f7ff fea2 	bl	8004488 <LCD_CMD>
    LCD_CMD(0x06);
 8004744:	2006      	movs	r0, #6
 8004746:	f7ff fe9f 	bl	8004488 <LCD_CMD>
    LCD_CMD(0x00);
 800474a:	2000      	movs	r0, #0
 800474c:	f7ff fe9c 	bl	8004488 <LCD_CMD>
    LCD_CMD(0x01);
 8004750:	2001      	movs	r0, #1
 8004752:	f7ff fe99 	bl	8004488 <LCD_CMD>
}
 8004756:	bf00      	nop
 8004758:	3728      	adds	r7, #40	; 0x28
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	0800550c 	.word	0x0800550c
 8004764:	40020000 	.word	0x40020000
 8004768:	40023800 	.word	0x40023800
 800476c:	40020400 	.word	0x40020400
 8004770:	40020800 	.word	0x40020800
 8004774:	40020c00 	.word	0x40020c00

08004778 <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	f023 030f 	bic.w	r3, r3, #15
 8004790:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 8004792:	4b25      	ldr	r3, [pc, #148]	; (8004828 <LCD_Write_Char+0xb0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a24      	ldr	r2, [pc, #144]	; (8004828 <LCD_Write_Char+0xb0>)
 8004798:	89d1      	ldrh	r1, [r2, #14]
 800479a:	2201      	movs	r2, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f7fd ffaf 	bl	8002700 <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 80047a2:	7bbb      	ldrb	r3, [r7, #14]
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fe09 	bl	80043c0 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 80047ae:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <LCD_Write_Char+0xb0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <LCD_Write_Char+0xb0>)
 80047b4:	8991      	ldrh	r1, [r2, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fd ffa1 	bl	8002700 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80047be:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <LCD_Write_Char+0xb0>)
 80047c0:	8a1b      	ldrh	r3, [r3, #16]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fdae 	bl	8004324 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 80047c8:	4b17      	ldr	r3, [pc, #92]	; (8004828 <LCD_Write_Char+0xb0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a16      	ldr	r2, [pc, #88]	; (8004828 <LCD_Write_Char+0xb0>)
 80047ce:	8991      	ldrh	r1, [r2, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fd ff94 	bl	8002700 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80047d8:	4b13      	ldr	r3, [pc, #76]	; (8004828 <LCD_Write_Char+0xb0>)
 80047da:	8a1b      	ldrh	r3, [r3, #16]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fda1 	bl	8004324 <DWT_Delay_us>

   LCD_DATA(Low4);
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff fdeb 	bl	80043c0 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 80047ea:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <LCD_Write_Char+0xb0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a0e      	ldr	r2, [pc, #56]	; (8004828 <LCD_Write_Char+0xb0>)
 80047f0:	8991      	ldrh	r1, [r2, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fd ff83 	bl	8002700 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <LCD_Write_Char+0xb0>)
 80047fc:	8a1b      	ldrh	r3, [r3, #16]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fd90 	bl	8004324 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <LCD_Write_Char+0xb0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a07      	ldr	r2, [pc, #28]	; (8004828 <LCD_Write_Char+0xb0>)
 800480a:	8991      	ldrh	r1, [r2, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f7fd ff76 	bl	8002700 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8004814:	4b04      	ldr	r3, [pc, #16]	; (8004828 <LCD_Write_Char+0xb0>)
 8004816:	8a1b      	ldrh	r3, [r3, #16]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fd83 	bl	8004324 <DWT_Delay_us>
}
 800481e:	bf00      	nop
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	0800550c 	.word	0x0800550c

0800482c <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e009      	b.n	800484e <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4413      	add	r3, r2
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff ff98 	bl	8004778 <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3301      	adds	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	4413      	add	r3, r2
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ef      	bne.n	800483a <LCD_Write_String+0xe>
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <get_nitrogen_data>:
#include "npk_driver.h"
#include "main.h"

extern UART_HandleTypeDef huart6;

uint8_t get_nitrogen_data(void){
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0

	uint8_t nitroAdd[] = {0x01,0x03, 0x00, 0x1e, 0x00, 0x01, 0xe4, 0x0c};
 800486a:	4a27      	ldr	r2, [pc, #156]	; (8004908 <get_nitrogen_data+0xa4>)
 800486c:	f107 030c 	add.w	r3, r7, #12
 8004870:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004874:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t nitroVal[9] = {0};
 8004878:	2300      	movs	r3, #0
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	1d3b      	adds	r3, r7, #4
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	711a      	strb	r2, [r3, #4]
	uint8_t nitroRet;

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8004884:	2201      	movs	r2, #1
 8004886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800488a:	4820      	ldr	r0, [pc, #128]	; (800490c <get_nitrogen_data+0xa8>)
 800488c:	f7fd ff38 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8004890:	2201      	movs	r2, #1
 8004892:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004896:	481d      	ldr	r0, [pc, #116]	; (800490c <get_nitrogen_data+0xa8>)
 8004898:	f7fd ff32 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800489c:	200a      	movs	r0, #10
 800489e:	f7fc fc81 	bl	80011a4 <HAL_Delay>
	if(HAL_UART_Transmit(&huart6, nitroAdd, sizeof(nitroAdd),50) == HAL_OK){
 80048a2:	f107 010c 	add.w	r1, r7, #12
 80048a6:	2332      	movs	r3, #50	; 0x32
 80048a8:	2208      	movs	r2, #8
 80048aa:	4819      	ldr	r0, [pc, #100]	; (8004910 <get_nitrogen_data+0xac>)
 80048ac:	f7fe fc27 	bl	80030fe <HAL_UART_Transmit>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d122      	bne.n	80048fc <get_nitrogen_data+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 80048b6:	2200      	movs	r2, #0
 80048b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048bc:	4813      	ldr	r0, [pc, #76]	; (800490c <get_nitrogen_data+0xa8>)
 80048be:	f7fd ff1f 	bl	8002700 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 80048c2:	2200      	movs	r2, #0
 80048c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048c8:	4810      	ldr	r0, [pc, #64]	; (800490c <get_nitrogen_data+0xa8>)
 80048ca:	f7fd ff19 	bl	8002700 <HAL_GPIO_WritePin>

		HAL_UART_Receive(&huart6, (uint8_t*)nitroVal, sizeof(nitroVal),200);
 80048ce:	4639      	mov	r1, r7
 80048d0:	23c8      	movs	r3, #200	; 0xc8
 80048d2:	2209      	movs	r2, #9
 80048d4:	480e      	ldr	r0, [pc, #56]	; (8004910 <get_nitrogen_data+0xac>)
 80048d6:	f7fe fca4 	bl	8003222 <HAL_UART_Receive>

		if(nitroVal[0]==0 && nitroVal[1]==1 && nitroVal[2]==3 && nitroVal[3]==2){
 80048da:	783b      	ldrb	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <get_nitrogen_data+0x94>
 80048e0:	787b      	ldrb	r3, [r7, #1]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d108      	bne.n	80048f8 <get_nitrogen_data+0x94>
 80048e6:	78bb      	ldrb	r3, [r7, #2]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d105      	bne.n	80048f8 <get_nitrogen_data+0x94>
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d102      	bne.n	80048f8 <get_nitrogen_data+0x94>

			nitroRet = nitroVal[5];
 80048f2:	797b      	ldrb	r3, [r7, #5]
 80048f4:	75fb      	strb	r3, [r7, #23]
 80048f6:	e001      	b.n	80048fc <get_nitrogen_data+0x98>
		}
		else{

			nitroRet = (uint8_t)1;
 80048f8:	2301      	movs	r3, #1
 80048fa:	75fb      	strb	r3, [r7, #23]
		}
	}
	return nitroRet;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	080054d4 	.word	0x080054d4
 800490c:	40020800 	.word	0x40020800
 8004910:	200001bc 	.word	0x200001bc

08004914 <get_phosphorous_data>:

uint8_t get_phosphorous_data(void){
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0

	uint8_t phosAdd[] = {0x01,0x03, 0x00, 0x1f, 0x00, 0x01, 0xb5, 0xcc};
 800491a:	4a27      	ldr	r2, [pc, #156]	; (80049b8 <get_phosphorous_data+0xa4>)
 800491c:	f107 030c 	add.w	r3, r7, #12
 8004920:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004924:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t phosVal[9] = {0};
 8004928:	2300      	movs	r3, #0
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	1d3b      	adds	r3, r7, #4
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	711a      	strb	r2, [r3, #4]
	uint8_t phosRet;

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8004934:	2201      	movs	r2, #1
 8004936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800493a:	4820      	ldr	r0, [pc, #128]	; (80049bc <get_phosphorous_data+0xa8>)
 800493c:	f7fd fee0 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8004940:	2201      	movs	r2, #1
 8004942:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004946:	481d      	ldr	r0, [pc, #116]	; (80049bc <get_phosphorous_data+0xa8>)
 8004948:	f7fd feda 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800494c:	200a      	movs	r0, #10
 800494e:	f7fc fc29 	bl	80011a4 <HAL_Delay>
	if(HAL_UART_Transmit(&huart6, phosAdd, sizeof(phosAdd),50) == HAL_OK){
 8004952:	f107 010c 	add.w	r1, r7, #12
 8004956:	2332      	movs	r3, #50	; 0x32
 8004958:	2208      	movs	r2, #8
 800495a:	4819      	ldr	r0, [pc, #100]	; (80049c0 <get_phosphorous_data+0xac>)
 800495c:	f7fe fbcf 	bl	80030fe <HAL_UART_Transmit>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d122      	bne.n	80049ac <get_phosphorous_data+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8004966:	2200      	movs	r2, #0
 8004968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800496c:	4813      	ldr	r0, [pc, #76]	; (80049bc <get_phosphorous_data+0xa8>)
 800496e:	f7fd fec7 	bl	8002700 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8004972:	2200      	movs	r2, #0
 8004974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004978:	4810      	ldr	r0, [pc, #64]	; (80049bc <get_phosphorous_data+0xa8>)
 800497a:	f7fd fec1 	bl	8002700 <HAL_GPIO_WritePin>

		HAL_UART_Receive(&huart6, (uint8_t*)phosVal, sizeof(phosVal),200);
 800497e:	4639      	mov	r1, r7
 8004980:	23c8      	movs	r3, #200	; 0xc8
 8004982:	2209      	movs	r2, #9
 8004984:	480e      	ldr	r0, [pc, #56]	; (80049c0 <get_phosphorous_data+0xac>)
 8004986:	f7fe fc4c 	bl	8003222 <HAL_UART_Receive>

		if(phosVal[0]==0 && phosVal[1]==1 && phosVal[2]==3 && phosVal[3]==2){
 800498a:	783b      	ldrb	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <get_phosphorous_data+0x94>
 8004990:	787b      	ldrb	r3, [r7, #1]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d108      	bne.n	80049a8 <get_phosphorous_data+0x94>
 8004996:	78bb      	ldrb	r3, [r7, #2]
 8004998:	2b03      	cmp	r3, #3
 800499a:	d105      	bne.n	80049a8 <get_phosphorous_data+0x94>
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d102      	bne.n	80049a8 <get_phosphorous_data+0x94>

			phosRet = phosVal[5];
 80049a2:	797b      	ldrb	r3, [r7, #5]
 80049a4:	75fb      	strb	r3, [r7, #23]
 80049a6:	e001      	b.n	80049ac <get_phosphorous_data+0x98>
		}
		else{

			phosRet = (uint8_t)1;
 80049a8:	2301      	movs	r3, #1
 80049aa:	75fb      	strb	r3, [r7, #23]
		}
	}
	return phosRet;
 80049ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	080054dc 	.word	0x080054dc
 80049bc:	40020800 	.word	0x40020800
 80049c0:	200001bc 	.word	0x200001bc

080049c4 <get_potassium_data>:

uint8_t get_potassium_data(void){
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0

	uint8_t potaAdd[] = {0x01,0x03, 0x00, 0x20, 0x00, 0x01, 0x85, 0xc0};
 80049ca:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <get_potassium_data+0xa4>)
 80049cc:	f107 030c 	add.w	r3, r7, #12
 80049d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049d4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t potaVal[9] = {0};
 80049d8:	2300      	movs	r3, #0
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	1d3b      	adds	r3, r7, #4
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	711a      	strb	r2, [r3, #4]
	uint8_t potaRet;

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 80049e4:	2201      	movs	r2, #1
 80049e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049ea:	4820      	ldr	r0, [pc, #128]	; (8004a6c <get_potassium_data+0xa8>)
 80049ec:	f7fd fe88 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 80049f0:	2201      	movs	r2, #1
 80049f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049f6:	481d      	ldr	r0, [pc, #116]	; (8004a6c <get_potassium_data+0xa8>)
 80049f8:	f7fd fe82 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80049fc:	200a      	movs	r0, #10
 80049fe:	f7fc fbd1 	bl	80011a4 <HAL_Delay>
	if(HAL_UART_Transmit(&huart6, potaAdd, sizeof(potaAdd),50) == HAL_OK){
 8004a02:	f107 010c 	add.w	r1, r7, #12
 8004a06:	2332      	movs	r3, #50	; 0x32
 8004a08:	2208      	movs	r2, #8
 8004a0a:	4819      	ldr	r0, [pc, #100]	; (8004a70 <get_potassium_data+0xac>)
 8004a0c:	f7fe fb77 	bl	80030fe <HAL_UART_Transmit>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d122      	bne.n	8004a5c <get_potassium_data+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8004a16:	2200      	movs	r2, #0
 8004a18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a1c:	4813      	ldr	r0, [pc, #76]	; (8004a6c <get_potassium_data+0xa8>)
 8004a1e:	f7fd fe6f 	bl	8002700 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8004a22:	2200      	movs	r2, #0
 8004a24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a28:	4810      	ldr	r0, [pc, #64]	; (8004a6c <get_potassium_data+0xa8>)
 8004a2a:	f7fd fe69 	bl	8002700 <HAL_GPIO_WritePin>

		HAL_UART_Receive(&huart6, (uint8_t*)potaVal, sizeof(potaVal),200);
 8004a2e:	4639      	mov	r1, r7
 8004a30:	23c8      	movs	r3, #200	; 0xc8
 8004a32:	2209      	movs	r2, #9
 8004a34:	480e      	ldr	r0, [pc, #56]	; (8004a70 <get_potassium_data+0xac>)
 8004a36:	f7fe fbf4 	bl	8003222 <HAL_UART_Receive>

		if(potaVal[0]==0 && potaVal[1]==1 && potaVal[2]==3 && potaVal[3]==2){
 8004a3a:	783b      	ldrb	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <get_potassium_data+0x94>
 8004a40:	787b      	ldrb	r3, [r7, #1]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d108      	bne.n	8004a58 <get_potassium_data+0x94>
 8004a46:	78bb      	ldrb	r3, [r7, #2]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d105      	bne.n	8004a58 <get_potassium_data+0x94>
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d102      	bne.n	8004a58 <get_potassium_data+0x94>

			potaRet = potaVal[5];
 8004a52:	797b      	ldrb	r3, [r7, #5]
 8004a54:	75fb      	strb	r3, [r7, #23]
 8004a56:	e001      	b.n	8004a5c <get_potassium_data+0x98>
		}
		else{

			potaRet = (uint8_t)1;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	75fb      	strb	r3, [r7, #23]
		}

	}
	return potaRet;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	080054e4 	.word	0x080054e4
 8004a6c:	40020800 	.word	0x40020800
 8004a70:	200001bc 	.word	0x200001bc

08004a74 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8004a78:	4b14      	ldr	r3, [pc, #80]	; (8004acc <DWT_Delay_Init+0x58>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4a13      	ldr	r2, [pc, #76]	; (8004acc <DWT_Delay_Init+0x58>)
 8004a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a82:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <DWT_Delay_Init+0x58>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a10      	ldr	r2, [pc, #64]	; (8004acc <DWT_Delay_Init+0x58>)
 8004a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <DWT_Delay_Init+0x5c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a0e      	ldr	r2, [pc, #56]	; (8004ad0 <DWT_Delay_Init+0x5c>)
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <DWT_Delay_Init+0x5c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <DWT_Delay_Init+0x5c>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <DWT_Delay_Init+0x5c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8004aae:	bf00      	nop
    __ASM volatile ("NOP");
 8004ab0:	bf00      	nop
    __ASM volatile ("NOP");
 8004ab2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <DWT_Delay_Init+0x5c>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8004ac0:	2301      	movs	r3, #1
    }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	e000edf0 	.word	0xe000edf0
 8004ad0:	e0001000 	.word	0xe0001000

08004ad4 <__errno>:
 8004ad4:	4b01      	ldr	r3, [pc, #4]	; (8004adc <__errno+0x8>)
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	2000000c 	.word	0x2000000c

08004ae0 <__libc_init_array>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	4d0d      	ldr	r5, [pc, #52]	; (8004b18 <__libc_init_array+0x38>)
 8004ae4:	4c0d      	ldr	r4, [pc, #52]	; (8004b1c <__libc_init_array+0x3c>)
 8004ae6:	1b64      	subs	r4, r4, r5
 8004ae8:	10a4      	asrs	r4, r4, #2
 8004aea:	2600      	movs	r6, #0
 8004aec:	42a6      	cmp	r6, r4
 8004aee:	d109      	bne.n	8004b04 <__libc_init_array+0x24>
 8004af0:	4d0b      	ldr	r5, [pc, #44]	; (8004b20 <__libc_init_array+0x40>)
 8004af2:	4c0c      	ldr	r4, [pc, #48]	; (8004b24 <__libc_init_array+0x44>)
 8004af4:	f000 fc8e 	bl	8005414 <_init>
 8004af8:	1b64      	subs	r4, r4, r5
 8004afa:	10a4      	asrs	r4, r4, #2
 8004afc:	2600      	movs	r6, #0
 8004afe:	42a6      	cmp	r6, r4
 8004b00:	d105      	bne.n	8004b0e <__libc_init_array+0x2e>
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
 8004b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b08:	4798      	blx	r3
 8004b0a:	3601      	adds	r6, #1
 8004b0c:	e7ee      	b.n	8004aec <__libc_init_array+0xc>
 8004b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b12:	4798      	blx	r3
 8004b14:	3601      	adds	r6, #1
 8004b16:	e7f2      	b.n	8004afe <__libc_init_array+0x1e>
 8004b18:	0800555c 	.word	0x0800555c
 8004b1c:	0800555c 	.word	0x0800555c
 8004b20:	0800555c 	.word	0x0800555c
 8004b24:	08005560 	.word	0x08005560

08004b28 <memset>:
 8004b28:	4402      	add	r2, r0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d100      	bne.n	8004b32 <memset+0xa>
 8004b30:	4770      	bx	lr
 8004b32:	f803 1b01 	strb.w	r1, [r3], #1
 8004b36:	e7f9      	b.n	8004b2c <memset+0x4>

08004b38 <siprintf>:
 8004b38:	b40e      	push	{r1, r2, r3}
 8004b3a:	b500      	push	{lr}
 8004b3c:	b09c      	sub	sp, #112	; 0x70
 8004b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b40:	9002      	str	r0, [sp, #8]
 8004b42:	9006      	str	r0, [sp, #24]
 8004b44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b48:	4809      	ldr	r0, [pc, #36]	; (8004b70 <siprintf+0x38>)
 8004b4a:	9107      	str	r1, [sp, #28]
 8004b4c:	9104      	str	r1, [sp, #16]
 8004b4e:	4909      	ldr	r1, [pc, #36]	; (8004b74 <siprintf+0x3c>)
 8004b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b54:	9105      	str	r1, [sp, #20]
 8004b56:	6800      	ldr	r0, [r0, #0]
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	a902      	add	r1, sp, #8
 8004b5c:	f000 f868 	bl	8004c30 <_svfiprintf_r>
 8004b60:	9b02      	ldr	r3, [sp, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	b01c      	add	sp, #112	; 0x70
 8004b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b6c:	b003      	add	sp, #12
 8004b6e:	4770      	bx	lr
 8004b70:	2000000c 	.word	0x2000000c
 8004b74:	ffff0208 	.word	0xffff0208

08004b78 <__ssputs_r>:
 8004b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	688e      	ldr	r6, [r1, #8]
 8004b7e:	429e      	cmp	r6, r3
 8004b80:	4682      	mov	sl, r0
 8004b82:	460c      	mov	r4, r1
 8004b84:	4690      	mov	r8, r2
 8004b86:	461f      	mov	r7, r3
 8004b88:	d838      	bhi.n	8004bfc <__ssputs_r+0x84>
 8004b8a:	898a      	ldrh	r2, [r1, #12]
 8004b8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b90:	d032      	beq.n	8004bf8 <__ssputs_r+0x80>
 8004b92:	6825      	ldr	r5, [r4, #0]
 8004b94:	6909      	ldr	r1, [r1, #16]
 8004b96:	eba5 0901 	sub.w	r9, r5, r1
 8004b9a:	6965      	ldr	r5, [r4, #20]
 8004b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	444b      	add	r3, r9
 8004ba8:	106d      	asrs	r5, r5, #1
 8004baa:	429d      	cmp	r5, r3
 8004bac:	bf38      	it	cc
 8004bae:	461d      	movcc	r5, r3
 8004bb0:	0553      	lsls	r3, r2, #21
 8004bb2:	d531      	bpl.n	8004c18 <__ssputs_r+0xa0>
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	f000 fb63 	bl	8005280 <_malloc_r>
 8004bba:	4606      	mov	r6, r0
 8004bbc:	b950      	cbnz	r0, 8004bd4 <__ssputs_r+0x5c>
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	f8ca 3000 	str.w	r3, [sl]
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bca:	81a3      	strh	r3, [r4, #12]
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd4:	6921      	ldr	r1, [r4, #16]
 8004bd6:	464a      	mov	r2, r9
 8004bd8:	f000 fabe 	bl	8005158 <memcpy>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be6:	81a3      	strh	r3, [r4, #12]
 8004be8:	6126      	str	r6, [r4, #16]
 8004bea:	6165      	str	r5, [r4, #20]
 8004bec:	444e      	add	r6, r9
 8004bee:	eba5 0509 	sub.w	r5, r5, r9
 8004bf2:	6026      	str	r6, [r4, #0]
 8004bf4:	60a5      	str	r5, [r4, #8]
 8004bf6:	463e      	mov	r6, r7
 8004bf8:	42be      	cmp	r6, r7
 8004bfa:	d900      	bls.n	8004bfe <__ssputs_r+0x86>
 8004bfc:	463e      	mov	r6, r7
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	4632      	mov	r2, r6
 8004c02:	4641      	mov	r1, r8
 8004c04:	f000 fab6 	bl	8005174 <memmove>
 8004c08:	68a3      	ldr	r3, [r4, #8]
 8004c0a:	1b9b      	subs	r3, r3, r6
 8004c0c:	60a3      	str	r3, [r4, #8]
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	4433      	add	r3, r6
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	2000      	movs	r0, #0
 8004c16:	e7db      	b.n	8004bd0 <__ssputs_r+0x58>
 8004c18:	462a      	mov	r2, r5
 8004c1a:	f000 fba5 	bl	8005368 <_realloc_r>
 8004c1e:	4606      	mov	r6, r0
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d1e1      	bne.n	8004be8 <__ssputs_r+0x70>
 8004c24:	6921      	ldr	r1, [r4, #16]
 8004c26:	4650      	mov	r0, sl
 8004c28:	f000 fabe 	bl	80051a8 <_free_r>
 8004c2c:	e7c7      	b.n	8004bbe <__ssputs_r+0x46>
	...

08004c30 <_svfiprintf_r>:
 8004c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	4698      	mov	r8, r3
 8004c36:	898b      	ldrh	r3, [r1, #12]
 8004c38:	061b      	lsls	r3, r3, #24
 8004c3a:	b09d      	sub	sp, #116	; 0x74
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	460d      	mov	r5, r1
 8004c40:	4614      	mov	r4, r2
 8004c42:	d50e      	bpl.n	8004c62 <_svfiprintf_r+0x32>
 8004c44:	690b      	ldr	r3, [r1, #16]
 8004c46:	b963      	cbnz	r3, 8004c62 <_svfiprintf_r+0x32>
 8004c48:	2140      	movs	r1, #64	; 0x40
 8004c4a:	f000 fb19 	bl	8005280 <_malloc_r>
 8004c4e:	6028      	str	r0, [r5, #0]
 8004c50:	6128      	str	r0, [r5, #16]
 8004c52:	b920      	cbnz	r0, 8004c5e <_svfiprintf_r+0x2e>
 8004c54:	230c      	movs	r3, #12
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5c:	e0d1      	b.n	8004e02 <_svfiprintf_r+0x1d2>
 8004c5e:	2340      	movs	r3, #64	; 0x40
 8004c60:	616b      	str	r3, [r5, #20]
 8004c62:	2300      	movs	r3, #0
 8004c64:	9309      	str	r3, [sp, #36]	; 0x24
 8004c66:	2320      	movs	r3, #32
 8004c68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c70:	2330      	movs	r3, #48	; 0x30
 8004c72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e1c <_svfiprintf_r+0x1ec>
 8004c76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c7a:	f04f 0901 	mov.w	r9, #1
 8004c7e:	4623      	mov	r3, r4
 8004c80:	469a      	mov	sl, r3
 8004c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c86:	b10a      	cbz	r2, 8004c8c <_svfiprintf_r+0x5c>
 8004c88:	2a25      	cmp	r2, #37	; 0x25
 8004c8a:	d1f9      	bne.n	8004c80 <_svfiprintf_r+0x50>
 8004c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c90:	d00b      	beq.n	8004caa <_svfiprintf_r+0x7a>
 8004c92:	465b      	mov	r3, fp
 8004c94:	4622      	mov	r2, r4
 8004c96:	4629      	mov	r1, r5
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f7ff ff6d 	bl	8004b78 <__ssputs_r>
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	f000 80aa 	beq.w	8004df8 <_svfiprintf_r+0x1c8>
 8004ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ca6:	445a      	add	r2, fp
 8004ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8004caa:	f89a 3000 	ldrb.w	r3, [sl]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 80a2 	beq.w	8004df8 <_svfiprintf_r+0x1c8>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cbe:	f10a 0a01 	add.w	sl, sl, #1
 8004cc2:	9304      	str	r3, [sp, #16]
 8004cc4:	9307      	str	r3, [sp, #28]
 8004cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cca:	931a      	str	r3, [sp, #104]	; 0x68
 8004ccc:	4654      	mov	r4, sl
 8004cce:	2205      	movs	r2, #5
 8004cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cd4:	4851      	ldr	r0, [pc, #324]	; (8004e1c <_svfiprintf_r+0x1ec>)
 8004cd6:	f7fb fa8b 	bl	80001f0 <memchr>
 8004cda:	9a04      	ldr	r2, [sp, #16]
 8004cdc:	b9d8      	cbnz	r0, 8004d16 <_svfiprintf_r+0xe6>
 8004cde:	06d0      	lsls	r0, r2, #27
 8004ce0:	bf44      	itt	mi
 8004ce2:	2320      	movmi	r3, #32
 8004ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ce8:	0711      	lsls	r1, r2, #28
 8004cea:	bf44      	itt	mi
 8004cec:	232b      	movmi	r3, #43	; 0x2b
 8004cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf8:	d015      	beq.n	8004d26 <_svfiprintf_r+0xf6>
 8004cfa:	9a07      	ldr	r2, [sp, #28]
 8004cfc:	4654      	mov	r4, sl
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f04f 0c0a 	mov.w	ip, #10
 8004d04:	4621      	mov	r1, r4
 8004d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d0a:	3b30      	subs	r3, #48	; 0x30
 8004d0c:	2b09      	cmp	r3, #9
 8004d0e:	d94e      	bls.n	8004dae <_svfiprintf_r+0x17e>
 8004d10:	b1b0      	cbz	r0, 8004d40 <_svfiprintf_r+0x110>
 8004d12:	9207      	str	r2, [sp, #28]
 8004d14:	e014      	b.n	8004d40 <_svfiprintf_r+0x110>
 8004d16:	eba0 0308 	sub.w	r3, r0, r8
 8004d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	9304      	str	r3, [sp, #16]
 8004d22:	46a2      	mov	sl, r4
 8004d24:	e7d2      	b.n	8004ccc <_svfiprintf_r+0x9c>
 8004d26:	9b03      	ldr	r3, [sp, #12]
 8004d28:	1d19      	adds	r1, r3, #4
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	9103      	str	r1, [sp, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bfbb      	ittet	lt
 8004d32:	425b      	neglt	r3, r3
 8004d34:	f042 0202 	orrlt.w	r2, r2, #2
 8004d38:	9307      	strge	r3, [sp, #28]
 8004d3a:	9307      	strlt	r3, [sp, #28]
 8004d3c:	bfb8      	it	lt
 8004d3e:	9204      	strlt	r2, [sp, #16]
 8004d40:	7823      	ldrb	r3, [r4, #0]
 8004d42:	2b2e      	cmp	r3, #46	; 0x2e
 8004d44:	d10c      	bne.n	8004d60 <_svfiprintf_r+0x130>
 8004d46:	7863      	ldrb	r3, [r4, #1]
 8004d48:	2b2a      	cmp	r3, #42	; 0x2a
 8004d4a:	d135      	bne.n	8004db8 <_svfiprintf_r+0x188>
 8004d4c:	9b03      	ldr	r3, [sp, #12]
 8004d4e:	1d1a      	adds	r2, r3, #4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	9203      	str	r2, [sp, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bfb8      	it	lt
 8004d58:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d5c:	3402      	adds	r4, #2
 8004d5e:	9305      	str	r3, [sp, #20]
 8004d60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e2c <_svfiprintf_r+0x1fc>
 8004d64:	7821      	ldrb	r1, [r4, #0]
 8004d66:	2203      	movs	r2, #3
 8004d68:	4650      	mov	r0, sl
 8004d6a:	f7fb fa41 	bl	80001f0 <memchr>
 8004d6e:	b140      	cbz	r0, 8004d82 <_svfiprintf_r+0x152>
 8004d70:	2340      	movs	r3, #64	; 0x40
 8004d72:	eba0 000a 	sub.w	r0, r0, sl
 8004d76:	fa03 f000 	lsl.w	r0, r3, r0
 8004d7a:	9b04      	ldr	r3, [sp, #16]
 8004d7c:	4303      	orrs	r3, r0
 8004d7e:	3401      	adds	r4, #1
 8004d80:	9304      	str	r3, [sp, #16]
 8004d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d86:	4826      	ldr	r0, [pc, #152]	; (8004e20 <_svfiprintf_r+0x1f0>)
 8004d88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d8c:	2206      	movs	r2, #6
 8004d8e:	f7fb fa2f 	bl	80001f0 <memchr>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d038      	beq.n	8004e08 <_svfiprintf_r+0x1d8>
 8004d96:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <_svfiprintf_r+0x1f4>)
 8004d98:	bb1b      	cbnz	r3, 8004de2 <_svfiprintf_r+0x1b2>
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	3307      	adds	r3, #7
 8004d9e:	f023 0307 	bic.w	r3, r3, #7
 8004da2:	3308      	adds	r3, #8
 8004da4:	9303      	str	r3, [sp, #12]
 8004da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da8:	4433      	add	r3, r6
 8004daa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dac:	e767      	b.n	8004c7e <_svfiprintf_r+0x4e>
 8004dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004db2:	460c      	mov	r4, r1
 8004db4:	2001      	movs	r0, #1
 8004db6:	e7a5      	b.n	8004d04 <_svfiprintf_r+0xd4>
 8004db8:	2300      	movs	r3, #0
 8004dba:	3401      	adds	r4, #1
 8004dbc:	9305      	str	r3, [sp, #20]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f04f 0c0a 	mov.w	ip, #10
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dca:	3a30      	subs	r2, #48	; 0x30
 8004dcc:	2a09      	cmp	r2, #9
 8004dce:	d903      	bls.n	8004dd8 <_svfiprintf_r+0x1a8>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0c5      	beq.n	8004d60 <_svfiprintf_r+0x130>
 8004dd4:	9105      	str	r1, [sp, #20]
 8004dd6:	e7c3      	b.n	8004d60 <_svfiprintf_r+0x130>
 8004dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ddc:	4604      	mov	r4, r0
 8004dde:	2301      	movs	r3, #1
 8004de0:	e7f0      	b.n	8004dc4 <_svfiprintf_r+0x194>
 8004de2:	ab03      	add	r3, sp, #12
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	462a      	mov	r2, r5
 8004de8:	4b0f      	ldr	r3, [pc, #60]	; (8004e28 <_svfiprintf_r+0x1f8>)
 8004dea:	a904      	add	r1, sp, #16
 8004dec:	4638      	mov	r0, r7
 8004dee:	f3af 8000 	nop.w
 8004df2:	1c42      	adds	r2, r0, #1
 8004df4:	4606      	mov	r6, r0
 8004df6:	d1d6      	bne.n	8004da6 <_svfiprintf_r+0x176>
 8004df8:	89ab      	ldrh	r3, [r5, #12]
 8004dfa:	065b      	lsls	r3, r3, #25
 8004dfc:	f53f af2c 	bmi.w	8004c58 <_svfiprintf_r+0x28>
 8004e00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e02:	b01d      	add	sp, #116	; 0x74
 8004e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e08:	ab03      	add	r3, sp, #12
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	462a      	mov	r2, r5
 8004e0e:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <_svfiprintf_r+0x1f8>)
 8004e10:	a904      	add	r1, sp, #16
 8004e12:	4638      	mov	r0, r7
 8004e14:	f000 f87a 	bl	8004f0c <_printf_i>
 8004e18:	e7eb      	b.n	8004df2 <_svfiprintf_r+0x1c2>
 8004e1a:	bf00      	nop
 8004e1c:	08005520 	.word	0x08005520
 8004e20:	0800552a 	.word	0x0800552a
 8004e24:	00000000 	.word	0x00000000
 8004e28:	08004b79 	.word	0x08004b79
 8004e2c:	08005526 	.word	0x08005526

08004e30 <_printf_common>:
 8004e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e34:	4616      	mov	r6, r2
 8004e36:	4699      	mov	r9, r3
 8004e38:	688a      	ldr	r2, [r1, #8]
 8004e3a:	690b      	ldr	r3, [r1, #16]
 8004e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e40:	4293      	cmp	r3, r2
 8004e42:	bfb8      	it	lt
 8004e44:	4613      	movlt	r3, r2
 8004e46:	6033      	str	r3, [r6, #0]
 8004e48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e4c:	4607      	mov	r7, r0
 8004e4e:	460c      	mov	r4, r1
 8004e50:	b10a      	cbz	r2, 8004e56 <_printf_common+0x26>
 8004e52:	3301      	adds	r3, #1
 8004e54:	6033      	str	r3, [r6, #0]
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	0699      	lsls	r1, r3, #26
 8004e5a:	bf42      	ittt	mi
 8004e5c:	6833      	ldrmi	r3, [r6, #0]
 8004e5e:	3302      	addmi	r3, #2
 8004e60:	6033      	strmi	r3, [r6, #0]
 8004e62:	6825      	ldr	r5, [r4, #0]
 8004e64:	f015 0506 	ands.w	r5, r5, #6
 8004e68:	d106      	bne.n	8004e78 <_printf_common+0x48>
 8004e6a:	f104 0a19 	add.w	sl, r4, #25
 8004e6e:	68e3      	ldr	r3, [r4, #12]
 8004e70:	6832      	ldr	r2, [r6, #0]
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	42ab      	cmp	r3, r5
 8004e76:	dc26      	bgt.n	8004ec6 <_printf_common+0x96>
 8004e78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e7c:	1e13      	subs	r3, r2, #0
 8004e7e:	6822      	ldr	r2, [r4, #0]
 8004e80:	bf18      	it	ne
 8004e82:	2301      	movne	r3, #1
 8004e84:	0692      	lsls	r2, r2, #26
 8004e86:	d42b      	bmi.n	8004ee0 <_printf_common+0xb0>
 8004e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	4638      	mov	r0, r7
 8004e90:	47c0      	blx	r8
 8004e92:	3001      	adds	r0, #1
 8004e94:	d01e      	beq.n	8004ed4 <_printf_common+0xa4>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	68e5      	ldr	r5, [r4, #12]
 8004e9a:	6832      	ldr	r2, [r6, #0]
 8004e9c:	f003 0306 	and.w	r3, r3, #6
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	bf08      	it	eq
 8004ea4:	1aad      	subeq	r5, r5, r2
 8004ea6:	68a3      	ldr	r3, [r4, #8]
 8004ea8:	6922      	ldr	r2, [r4, #16]
 8004eaa:	bf0c      	ite	eq
 8004eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004eb0:	2500      	movne	r5, #0
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	bfc4      	itt	gt
 8004eb6:	1a9b      	subgt	r3, r3, r2
 8004eb8:	18ed      	addgt	r5, r5, r3
 8004eba:	2600      	movs	r6, #0
 8004ebc:	341a      	adds	r4, #26
 8004ebe:	42b5      	cmp	r5, r6
 8004ec0:	d11a      	bne.n	8004ef8 <_printf_common+0xc8>
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	e008      	b.n	8004ed8 <_printf_common+0xa8>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	4652      	mov	r2, sl
 8004eca:	4649      	mov	r1, r9
 8004ecc:	4638      	mov	r0, r7
 8004ece:	47c0      	blx	r8
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d103      	bne.n	8004edc <_printf_common+0xac>
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004edc:	3501      	adds	r5, #1
 8004ede:	e7c6      	b.n	8004e6e <_printf_common+0x3e>
 8004ee0:	18e1      	adds	r1, r4, r3
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	2030      	movs	r0, #48	; 0x30
 8004ee6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eea:	4422      	add	r2, r4
 8004eec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ef0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	e7c7      	b.n	8004e88 <_printf_common+0x58>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	4622      	mov	r2, r4
 8004efc:	4649      	mov	r1, r9
 8004efe:	4638      	mov	r0, r7
 8004f00:	47c0      	blx	r8
 8004f02:	3001      	adds	r0, #1
 8004f04:	d0e6      	beq.n	8004ed4 <_printf_common+0xa4>
 8004f06:	3601      	adds	r6, #1
 8004f08:	e7d9      	b.n	8004ebe <_printf_common+0x8e>
	...

08004f0c <_printf_i>:
 8004f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f10:	7e0f      	ldrb	r7, [r1, #24]
 8004f12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f14:	2f78      	cmp	r7, #120	; 0x78
 8004f16:	4691      	mov	r9, r2
 8004f18:	4680      	mov	r8, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	469a      	mov	sl, r3
 8004f1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f22:	d807      	bhi.n	8004f34 <_printf_i+0x28>
 8004f24:	2f62      	cmp	r7, #98	; 0x62
 8004f26:	d80a      	bhi.n	8004f3e <_printf_i+0x32>
 8004f28:	2f00      	cmp	r7, #0
 8004f2a:	f000 80d8 	beq.w	80050de <_printf_i+0x1d2>
 8004f2e:	2f58      	cmp	r7, #88	; 0x58
 8004f30:	f000 80a3 	beq.w	800507a <_printf_i+0x16e>
 8004f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f3c:	e03a      	b.n	8004fb4 <_printf_i+0xa8>
 8004f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f42:	2b15      	cmp	r3, #21
 8004f44:	d8f6      	bhi.n	8004f34 <_printf_i+0x28>
 8004f46:	a101      	add	r1, pc, #4	; (adr r1, 8004f4c <_printf_i+0x40>)
 8004f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f4c:	08004fa5 	.word	0x08004fa5
 8004f50:	08004fb9 	.word	0x08004fb9
 8004f54:	08004f35 	.word	0x08004f35
 8004f58:	08004f35 	.word	0x08004f35
 8004f5c:	08004f35 	.word	0x08004f35
 8004f60:	08004f35 	.word	0x08004f35
 8004f64:	08004fb9 	.word	0x08004fb9
 8004f68:	08004f35 	.word	0x08004f35
 8004f6c:	08004f35 	.word	0x08004f35
 8004f70:	08004f35 	.word	0x08004f35
 8004f74:	08004f35 	.word	0x08004f35
 8004f78:	080050c5 	.word	0x080050c5
 8004f7c:	08004fe9 	.word	0x08004fe9
 8004f80:	080050a7 	.word	0x080050a7
 8004f84:	08004f35 	.word	0x08004f35
 8004f88:	08004f35 	.word	0x08004f35
 8004f8c:	080050e7 	.word	0x080050e7
 8004f90:	08004f35 	.word	0x08004f35
 8004f94:	08004fe9 	.word	0x08004fe9
 8004f98:	08004f35 	.word	0x08004f35
 8004f9c:	08004f35 	.word	0x08004f35
 8004fa0:	080050af 	.word	0x080050af
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	1d1a      	adds	r2, r3, #4
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	602a      	str	r2, [r5, #0]
 8004fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0a3      	b.n	8005100 <_printf_i+0x1f4>
 8004fb8:	6820      	ldr	r0, [r4, #0]
 8004fba:	6829      	ldr	r1, [r5, #0]
 8004fbc:	0606      	lsls	r6, r0, #24
 8004fbe:	f101 0304 	add.w	r3, r1, #4
 8004fc2:	d50a      	bpl.n	8004fda <_printf_i+0xce>
 8004fc4:	680e      	ldr	r6, [r1, #0]
 8004fc6:	602b      	str	r3, [r5, #0]
 8004fc8:	2e00      	cmp	r6, #0
 8004fca:	da03      	bge.n	8004fd4 <_printf_i+0xc8>
 8004fcc:	232d      	movs	r3, #45	; 0x2d
 8004fce:	4276      	negs	r6, r6
 8004fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fd4:	485e      	ldr	r0, [pc, #376]	; (8005150 <_printf_i+0x244>)
 8004fd6:	230a      	movs	r3, #10
 8004fd8:	e019      	b.n	800500e <_printf_i+0x102>
 8004fda:	680e      	ldr	r6, [r1, #0]
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fe2:	bf18      	it	ne
 8004fe4:	b236      	sxthne	r6, r6
 8004fe6:	e7ef      	b.n	8004fc8 <_printf_i+0xbc>
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	6820      	ldr	r0, [r4, #0]
 8004fec:	1d19      	adds	r1, r3, #4
 8004fee:	6029      	str	r1, [r5, #0]
 8004ff0:	0601      	lsls	r1, r0, #24
 8004ff2:	d501      	bpl.n	8004ff8 <_printf_i+0xec>
 8004ff4:	681e      	ldr	r6, [r3, #0]
 8004ff6:	e002      	b.n	8004ffe <_printf_i+0xf2>
 8004ff8:	0646      	lsls	r6, r0, #25
 8004ffa:	d5fb      	bpl.n	8004ff4 <_printf_i+0xe8>
 8004ffc:	881e      	ldrh	r6, [r3, #0]
 8004ffe:	4854      	ldr	r0, [pc, #336]	; (8005150 <_printf_i+0x244>)
 8005000:	2f6f      	cmp	r7, #111	; 0x6f
 8005002:	bf0c      	ite	eq
 8005004:	2308      	moveq	r3, #8
 8005006:	230a      	movne	r3, #10
 8005008:	2100      	movs	r1, #0
 800500a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800500e:	6865      	ldr	r5, [r4, #4]
 8005010:	60a5      	str	r5, [r4, #8]
 8005012:	2d00      	cmp	r5, #0
 8005014:	bfa2      	ittt	ge
 8005016:	6821      	ldrge	r1, [r4, #0]
 8005018:	f021 0104 	bicge.w	r1, r1, #4
 800501c:	6021      	strge	r1, [r4, #0]
 800501e:	b90e      	cbnz	r6, 8005024 <_printf_i+0x118>
 8005020:	2d00      	cmp	r5, #0
 8005022:	d04d      	beq.n	80050c0 <_printf_i+0x1b4>
 8005024:	4615      	mov	r5, r2
 8005026:	fbb6 f1f3 	udiv	r1, r6, r3
 800502a:	fb03 6711 	mls	r7, r3, r1, r6
 800502e:	5dc7      	ldrb	r7, [r0, r7]
 8005030:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005034:	4637      	mov	r7, r6
 8005036:	42bb      	cmp	r3, r7
 8005038:	460e      	mov	r6, r1
 800503a:	d9f4      	bls.n	8005026 <_printf_i+0x11a>
 800503c:	2b08      	cmp	r3, #8
 800503e:	d10b      	bne.n	8005058 <_printf_i+0x14c>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	07de      	lsls	r6, r3, #31
 8005044:	d508      	bpl.n	8005058 <_printf_i+0x14c>
 8005046:	6923      	ldr	r3, [r4, #16]
 8005048:	6861      	ldr	r1, [r4, #4]
 800504a:	4299      	cmp	r1, r3
 800504c:	bfde      	ittt	le
 800504e:	2330      	movle	r3, #48	; 0x30
 8005050:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005054:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005058:	1b52      	subs	r2, r2, r5
 800505a:	6122      	str	r2, [r4, #16]
 800505c:	f8cd a000 	str.w	sl, [sp]
 8005060:	464b      	mov	r3, r9
 8005062:	aa03      	add	r2, sp, #12
 8005064:	4621      	mov	r1, r4
 8005066:	4640      	mov	r0, r8
 8005068:	f7ff fee2 	bl	8004e30 <_printf_common>
 800506c:	3001      	adds	r0, #1
 800506e:	d14c      	bne.n	800510a <_printf_i+0x1fe>
 8005070:	f04f 30ff 	mov.w	r0, #4294967295
 8005074:	b004      	add	sp, #16
 8005076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507a:	4835      	ldr	r0, [pc, #212]	; (8005150 <_printf_i+0x244>)
 800507c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005080:	6829      	ldr	r1, [r5, #0]
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	f851 6b04 	ldr.w	r6, [r1], #4
 8005088:	6029      	str	r1, [r5, #0]
 800508a:	061d      	lsls	r5, r3, #24
 800508c:	d514      	bpl.n	80050b8 <_printf_i+0x1ac>
 800508e:	07df      	lsls	r7, r3, #31
 8005090:	bf44      	itt	mi
 8005092:	f043 0320 	orrmi.w	r3, r3, #32
 8005096:	6023      	strmi	r3, [r4, #0]
 8005098:	b91e      	cbnz	r6, 80050a2 <_printf_i+0x196>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	f023 0320 	bic.w	r3, r3, #32
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	2310      	movs	r3, #16
 80050a4:	e7b0      	b.n	8005008 <_printf_i+0xfc>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	f043 0320 	orr.w	r3, r3, #32
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	2378      	movs	r3, #120	; 0x78
 80050b0:	4828      	ldr	r0, [pc, #160]	; (8005154 <_printf_i+0x248>)
 80050b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050b6:	e7e3      	b.n	8005080 <_printf_i+0x174>
 80050b8:	0659      	lsls	r1, r3, #25
 80050ba:	bf48      	it	mi
 80050bc:	b2b6      	uxthmi	r6, r6
 80050be:	e7e6      	b.n	800508e <_printf_i+0x182>
 80050c0:	4615      	mov	r5, r2
 80050c2:	e7bb      	b.n	800503c <_printf_i+0x130>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	6826      	ldr	r6, [r4, #0]
 80050c8:	6961      	ldr	r1, [r4, #20]
 80050ca:	1d18      	adds	r0, r3, #4
 80050cc:	6028      	str	r0, [r5, #0]
 80050ce:	0635      	lsls	r5, r6, #24
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	d501      	bpl.n	80050d8 <_printf_i+0x1cc>
 80050d4:	6019      	str	r1, [r3, #0]
 80050d6:	e002      	b.n	80050de <_printf_i+0x1d2>
 80050d8:	0670      	lsls	r0, r6, #25
 80050da:	d5fb      	bpl.n	80050d4 <_printf_i+0x1c8>
 80050dc:	8019      	strh	r1, [r3, #0]
 80050de:	2300      	movs	r3, #0
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	4615      	mov	r5, r2
 80050e4:	e7ba      	b.n	800505c <_printf_i+0x150>
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	1d1a      	adds	r2, r3, #4
 80050ea:	602a      	str	r2, [r5, #0]
 80050ec:	681d      	ldr	r5, [r3, #0]
 80050ee:	6862      	ldr	r2, [r4, #4]
 80050f0:	2100      	movs	r1, #0
 80050f2:	4628      	mov	r0, r5
 80050f4:	f7fb f87c 	bl	80001f0 <memchr>
 80050f8:	b108      	cbz	r0, 80050fe <_printf_i+0x1f2>
 80050fa:	1b40      	subs	r0, r0, r5
 80050fc:	6060      	str	r0, [r4, #4]
 80050fe:	6863      	ldr	r3, [r4, #4]
 8005100:	6123      	str	r3, [r4, #16]
 8005102:	2300      	movs	r3, #0
 8005104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005108:	e7a8      	b.n	800505c <_printf_i+0x150>
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	462a      	mov	r2, r5
 800510e:	4649      	mov	r1, r9
 8005110:	4640      	mov	r0, r8
 8005112:	47d0      	blx	sl
 8005114:	3001      	adds	r0, #1
 8005116:	d0ab      	beq.n	8005070 <_printf_i+0x164>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	079b      	lsls	r3, r3, #30
 800511c:	d413      	bmi.n	8005146 <_printf_i+0x23a>
 800511e:	68e0      	ldr	r0, [r4, #12]
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	4298      	cmp	r0, r3
 8005124:	bfb8      	it	lt
 8005126:	4618      	movlt	r0, r3
 8005128:	e7a4      	b.n	8005074 <_printf_i+0x168>
 800512a:	2301      	movs	r3, #1
 800512c:	4632      	mov	r2, r6
 800512e:	4649      	mov	r1, r9
 8005130:	4640      	mov	r0, r8
 8005132:	47d0      	blx	sl
 8005134:	3001      	adds	r0, #1
 8005136:	d09b      	beq.n	8005070 <_printf_i+0x164>
 8005138:	3501      	adds	r5, #1
 800513a:	68e3      	ldr	r3, [r4, #12]
 800513c:	9903      	ldr	r1, [sp, #12]
 800513e:	1a5b      	subs	r3, r3, r1
 8005140:	42ab      	cmp	r3, r5
 8005142:	dcf2      	bgt.n	800512a <_printf_i+0x21e>
 8005144:	e7eb      	b.n	800511e <_printf_i+0x212>
 8005146:	2500      	movs	r5, #0
 8005148:	f104 0619 	add.w	r6, r4, #25
 800514c:	e7f5      	b.n	800513a <_printf_i+0x22e>
 800514e:	bf00      	nop
 8005150:	08005531 	.word	0x08005531
 8005154:	08005542 	.word	0x08005542

08005158 <memcpy>:
 8005158:	440a      	add	r2, r1
 800515a:	4291      	cmp	r1, r2
 800515c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005160:	d100      	bne.n	8005164 <memcpy+0xc>
 8005162:	4770      	bx	lr
 8005164:	b510      	push	{r4, lr}
 8005166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800516a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800516e:	4291      	cmp	r1, r2
 8005170:	d1f9      	bne.n	8005166 <memcpy+0xe>
 8005172:	bd10      	pop	{r4, pc}

08005174 <memmove>:
 8005174:	4288      	cmp	r0, r1
 8005176:	b510      	push	{r4, lr}
 8005178:	eb01 0402 	add.w	r4, r1, r2
 800517c:	d902      	bls.n	8005184 <memmove+0x10>
 800517e:	4284      	cmp	r4, r0
 8005180:	4623      	mov	r3, r4
 8005182:	d807      	bhi.n	8005194 <memmove+0x20>
 8005184:	1e43      	subs	r3, r0, #1
 8005186:	42a1      	cmp	r1, r4
 8005188:	d008      	beq.n	800519c <memmove+0x28>
 800518a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800518e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005192:	e7f8      	b.n	8005186 <memmove+0x12>
 8005194:	4402      	add	r2, r0
 8005196:	4601      	mov	r1, r0
 8005198:	428a      	cmp	r2, r1
 800519a:	d100      	bne.n	800519e <memmove+0x2a>
 800519c:	bd10      	pop	{r4, pc}
 800519e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051a6:	e7f7      	b.n	8005198 <memmove+0x24>

080051a8 <_free_r>:
 80051a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051aa:	2900      	cmp	r1, #0
 80051ac:	d044      	beq.n	8005238 <_free_r+0x90>
 80051ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b2:	9001      	str	r0, [sp, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f1a1 0404 	sub.w	r4, r1, #4
 80051ba:	bfb8      	it	lt
 80051bc:	18e4      	addlt	r4, r4, r3
 80051be:	f000 f913 	bl	80053e8 <__malloc_lock>
 80051c2:	4a1e      	ldr	r2, [pc, #120]	; (800523c <_free_r+0x94>)
 80051c4:	9801      	ldr	r0, [sp, #4]
 80051c6:	6813      	ldr	r3, [r2, #0]
 80051c8:	b933      	cbnz	r3, 80051d8 <_free_r+0x30>
 80051ca:	6063      	str	r3, [r4, #4]
 80051cc:	6014      	str	r4, [r2, #0]
 80051ce:	b003      	add	sp, #12
 80051d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051d4:	f000 b90e 	b.w	80053f4 <__malloc_unlock>
 80051d8:	42a3      	cmp	r3, r4
 80051da:	d908      	bls.n	80051ee <_free_r+0x46>
 80051dc:	6825      	ldr	r5, [r4, #0]
 80051de:	1961      	adds	r1, r4, r5
 80051e0:	428b      	cmp	r3, r1
 80051e2:	bf01      	itttt	eq
 80051e4:	6819      	ldreq	r1, [r3, #0]
 80051e6:	685b      	ldreq	r3, [r3, #4]
 80051e8:	1949      	addeq	r1, r1, r5
 80051ea:	6021      	streq	r1, [r4, #0]
 80051ec:	e7ed      	b.n	80051ca <_free_r+0x22>
 80051ee:	461a      	mov	r2, r3
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	b10b      	cbz	r3, 80051f8 <_free_r+0x50>
 80051f4:	42a3      	cmp	r3, r4
 80051f6:	d9fa      	bls.n	80051ee <_free_r+0x46>
 80051f8:	6811      	ldr	r1, [r2, #0]
 80051fa:	1855      	adds	r5, r2, r1
 80051fc:	42a5      	cmp	r5, r4
 80051fe:	d10b      	bne.n	8005218 <_free_r+0x70>
 8005200:	6824      	ldr	r4, [r4, #0]
 8005202:	4421      	add	r1, r4
 8005204:	1854      	adds	r4, r2, r1
 8005206:	42a3      	cmp	r3, r4
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	d1e0      	bne.n	80051ce <_free_r+0x26>
 800520c:	681c      	ldr	r4, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	6053      	str	r3, [r2, #4]
 8005212:	4421      	add	r1, r4
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	e7da      	b.n	80051ce <_free_r+0x26>
 8005218:	d902      	bls.n	8005220 <_free_r+0x78>
 800521a:	230c      	movs	r3, #12
 800521c:	6003      	str	r3, [r0, #0]
 800521e:	e7d6      	b.n	80051ce <_free_r+0x26>
 8005220:	6825      	ldr	r5, [r4, #0]
 8005222:	1961      	adds	r1, r4, r5
 8005224:	428b      	cmp	r3, r1
 8005226:	bf04      	itt	eq
 8005228:	6819      	ldreq	r1, [r3, #0]
 800522a:	685b      	ldreq	r3, [r3, #4]
 800522c:	6063      	str	r3, [r4, #4]
 800522e:	bf04      	itt	eq
 8005230:	1949      	addeq	r1, r1, r5
 8005232:	6021      	streq	r1, [r4, #0]
 8005234:	6054      	str	r4, [r2, #4]
 8005236:	e7ca      	b.n	80051ce <_free_r+0x26>
 8005238:	b003      	add	sp, #12
 800523a:	bd30      	pop	{r4, r5, pc}
 800523c:	200002dc 	.word	0x200002dc

08005240 <sbrk_aligned>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	4e0e      	ldr	r6, [pc, #56]	; (800527c <sbrk_aligned+0x3c>)
 8005244:	460c      	mov	r4, r1
 8005246:	6831      	ldr	r1, [r6, #0]
 8005248:	4605      	mov	r5, r0
 800524a:	b911      	cbnz	r1, 8005252 <sbrk_aligned+0x12>
 800524c:	f000 f8bc 	bl	80053c8 <_sbrk_r>
 8005250:	6030      	str	r0, [r6, #0]
 8005252:	4621      	mov	r1, r4
 8005254:	4628      	mov	r0, r5
 8005256:	f000 f8b7 	bl	80053c8 <_sbrk_r>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	d00a      	beq.n	8005274 <sbrk_aligned+0x34>
 800525e:	1cc4      	adds	r4, r0, #3
 8005260:	f024 0403 	bic.w	r4, r4, #3
 8005264:	42a0      	cmp	r0, r4
 8005266:	d007      	beq.n	8005278 <sbrk_aligned+0x38>
 8005268:	1a21      	subs	r1, r4, r0
 800526a:	4628      	mov	r0, r5
 800526c:	f000 f8ac 	bl	80053c8 <_sbrk_r>
 8005270:	3001      	adds	r0, #1
 8005272:	d101      	bne.n	8005278 <sbrk_aligned+0x38>
 8005274:	f04f 34ff 	mov.w	r4, #4294967295
 8005278:	4620      	mov	r0, r4
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	200002e0 	.word	0x200002e0

08005280 <_malloc_r>:
 8005280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005284:	1ccd      	adds	r5, r1, #3
 8005286:	f025 0503 	bic.w	r5, r5, #3
 800528a:	3508      	adds	r5, #8
 800528c:	2d0c      	cmp	r5, #12
 800528e:	bf38      	it	cc
 8005290:	250c      	movcc	r5, #12
 8005292:	2d00      	cmp	r5, #0
 8005294:	4607      	mov	r7, r0
 8005296:	db01      	blt.n	800529c <_malloc_r+0x1c>
 8005298:	42a9      	cmp	r1, r5
 800529a:	d905      	bls.n	80052a8 <_malloc_r+0x28>
 800529c:	230c      	movs	r3, #12
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	2600      	movs	r6, #0
 80052a2:	4630      	mov	r0, r6
 80052a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a8:	4e2e      	ldr	r6, [pc, #184]	; (8005364 <_malloc_r+0xe4>)
 80052aa:	f000 f89d 	bl	80053e8 <__malloc_lock>
 80052ae:	6833      	ldr	r3, [r6, #0]
 80052b0:	461c      	mov	r4, r3
 80052b2:	bb34      	cbnz	r4, 8005302 <_malloc_r+0x82>
 80052b4:	4629      	mov	r1, r5
 80052b6:	4638      	mov	r0, r7
 80052b8:	f7ff ffc2 	bl	8005240 <sbrk_aligned>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	4604      	mov	r4, r0
 80052c0:	d14d      	bne.n	800535e <_malloc_r+0xde>
 80052c2:	6834      	ldr	r4, [r6, #0]
 80052c4:	4626      	mov	r6, r4
 80052c6:	2e00      	cmp	r6, #0
 80052c8:	d140      	bne.n	800534c <_malloc_r+0xcc>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	4631      	mov	r1, r6
 80052ce:	4638      	mov	r0, r7
 80052d0:	eb04 0803 	add.w	r8, r4, r3
 80052d4:	f000 f878 	bl	80053c8 <_sbrk_r>
 80052d8:	4580      	cmp	r8, r0
 80052da:	d13a      	bne.n	8005352 <_malloc_r+0xd2>
 80052dc:	6821      	ldr	r1, [r4, #0]
 80052de:	3503      	adds	r5, #3
 80052e0:	1a6d      	subs	r5, r5, r1
 80052e2:	f025 0503 	bic.w	r5, r5, #3
 80052e6:	3508      	adds	r5, #8
 80052e8:	2d0c      	cmp	r5, #12
 80052ea:	bf38      	it	cc
 80052ec:	250c      	movcc	r5, #12
 80052ee:	4629      	mov	r1, r5
 80052f0:	4638      	mov	r0, r7
 80052f2:	f7ff ffa5 	bl	8005240 <sbrk_aligned>
 80052f6:	3001      	adds	r0, #1
 80052f8:	d02b      	beq.n	8005352 <_malloc_r+0xd2>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	442b      	add	r3, r5
 80052fe:	6023      	str	r3, [r4, #0]
 8005300:	e00e      	b.n	8005320 <_malloc_r+0xa0>
 8005302:	6822      	ldr	r2, [r4, #0]
 8005304:	1b52      	subs	r2, r2, r5
 8005306:	d41e      	bmi.n	8005346 <_malloc_r+0xc6>
 8005308:	2a0b      	cmp	r2, #11
 800530a:	d916      	bls.n	800533a <_malloc_r+0xba>
 800530c:	1961      	adds	r1, r4, r5
 800530e:	42a3      	cmp	r3, r4
 8005310:	6025      	str	r5, [r4, #0]
 8005312:	bf18      	it	ne
 8005314:	6059      	strne	r1, [r3, #4]
 8005316:	6863      	ldr	r3, [r4, #4]
 8005318:	bf08      	it	eq
 800531a:	6031      	streq	r1, [r6, #0]
 800531c:	5162      	str	r2, [r4, r5]
 800531e:	604b      	str	r3, [r1, #4]
 8005320:	4638      	mov	r0, r7
 8005322:	f104 060b 	add.w	r6, r4, #11
 8005326:	f000 f865 	bl	80053f4 <__malloc_unlock>
 800532a:	f026 0607 	bic.w	r6, r6, #7
 800532e:	1d23      	adds	r3, r4, #4
 8005330:	1af2      	subs	r2, r6, r3
 8005332:	d0b6      	beq.n	80052a2 <_malloc_r+0x22>
 8005334:	1b9b      	subs	r3, r3, r6
 8005336:	50a3      	str	r3, [r4, r2]
 8005338:	e7b3      	b.n	80052a2 <_malloc_r+0x22>
 800533a:	6862      	ldr	r2, [r4, #4]
 800533c:	42a3      	cmp	r3, r4
 800533e:	bf0c      	ite	eq
 8005340:	6032      	streq	r2, [r6, #0]
 8005342:	605a      	strne	r2, [r3, #4]
 8005344:	e7ec      	b.n	8005320 <_malloc_r+0xa0>
 8005346:	4623      	mov	r3, r4
 8005348:	6864      	ldr	r4, [r4, #4]
 800534a:	e7b2      	b.n	80052b2 <_malloc_r+0x32>
 800534c:	4634      	mov	r4, r6
 800534e:	6876      	ldr	r6, [r6, #4]
 8005350:	e7b9      	b.n	80052c6 <_malloc_r+0x46>
 8005352:	230c      	movs	r3, #12
 8005354:	603b      	str	r3, [r7, #0]
 8005356:	4638      	mov	r0, r7
 8005358:	f000 f84c 	bl	80053f4 <__malloc_unlock>
 800535c:	e7a1      	b.n	80052a2 <_malloc_r+0x22>
 800535e:	6025      	str	r5, [r4, #0]
 8005360:	e7de      	b.n	8005320 <_malloc_r+0xa0>
 8005362:	bf00      	nop
 8005364:	200002dc 	.word	0x200002dc

08005368 <_realloc_r>:
 8005368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536c:	4680      	mov	r8, r0
 800536e:	4614      	mov	r4, r2
 8005370:	460e      	mov	r6, r1
 8005372:	b921      	cbnz	r1, 800537e <_realloc_r+0x16>
 8005374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005378:	4611      	mov	r1, r2
 800537a:	f7ff bf81 	b.w	8005280 <_malloc_r>
 800537e:	b92a      	cbnz	r2, 800538c <_realloc_r+0x24>
 8005380:	f7ff ff12 	bl	80051a8 <_free_r>
 8005384:	4625      	mov	r5, r4
 8005386:	4628      	mov	r0, r5
 8005388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800538c:	f000 f838 	bl	8005400 <_malloc_usable_size_r>
 8005390:	4284      	cmp	r4, r0
 8005392:	4607      	mov	r7, r0
 8005394:	d802      	bhi.n	800539c <_realloc_r+0x34>
 8005396:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800539a:	d812      	bhi.n	80053c2 <_realloc_r+0x5a>
 800539c:	4621      	mov	r1, r4
 800539e:	4640      	mov	r0, r8
 80053a0:	f7ff ff6e 	bl	8005280 <_malloc_r>
 80053a4:	4605      	mov	r5, r0
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d0ed      	beq.n	8005386 <_realloc_r+0x1e>
 80053aa:	42bc      	cmp	r4, r7
 80053ac:	4622      	mov	r2, r4
 80053ae:	4631      	mov	r1, r6
 80053b0:	bf28      	it	cs
 80053b2:	463a      	movcs	r2, r7
 80053b4:	f7ff fed0 	bl	8005158 <memcpy>
 80053b8:	4631      	mov	r1, r6
 80053ba:	4640      	mov	r0, r8
 80053bc:	f7ff fef4 	bl	80051a8 <_free_r>
 80053c0:	e7e1      	b.n	8005386 <_realloc_r+0x1e>
 80053c2:	4635      	mov	r5, r6
 80053c4:	e7df      	b.n	8005386 <_realloc_r+0x1e>
	...

080053c8 <_sbrk_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4d06      	ldr	r5, [pc, #24]	; (80053e4 <_sbrk_r+0x1c>)
 80053cc:	2300      	movs	r3, #0
 80053ce:	4604      	mov	r4, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	f7fb fe02 	bl	8000fdc <_sbrk>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_sbrk_r+0x1a>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_sbrk_r+0x1a>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	200002e4 	.word	0x200002e4

080053e8 <__malloc_lock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__malloc_lock+0x8>)
 80053ea:	f000 b811 	b.w	8005410 <__retarget_lock_acquire_recursive>
 80053ee:	bf00      	nop
 80053f0:	200002e8 	.word	0x200002e8

080053f4 <__malloc_unlock>:
 80053f4:	4801      	ldr	r0, [pc, #4]	; (80053fc <__malloc_unlock+0x8>)
 80053f6:	f000 b80c 	b.w	8005412 <__retarget_lock_release_recursive>
 80053fa:	bf00      	nop
 80053fc:	200002e8 	.word	0x200002e8

08005400 <_malloc_usable_size_r>:
 8005400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005404:	1f18      	subs	r0, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	bfbc      	itt	lt
 800540a:	580b      	ldrlt	r3, [r1, r0]
 800540c:	18c0      	addlt	r0, r0, r3
 800540e:	4770      	bx	lr

08005410 <__retarget_lock_acquire_recursive>:
 8005410:	4770      	bx	lr

08005412 <__retarget_lock_release_recursive>:
 8005412:	4770      	bx	lr

08005414 <_init>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr

08005420 <_fini>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr
