
NPKSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b4  080047b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047bc  080047bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08004834  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004834  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d10e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fed  00000000  00000000  0002d1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0002f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002f990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166fa  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b74b  00000000  00000000  0004679a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a8d  00000000  00000000  00051ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7972  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002184  00000000  00000000  000d79c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004680 	.word	0x08004680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004680 	.word	0x08004680

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fc75 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f8d5 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f9e5 	bl	8000964 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 f967 	bl	800086c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800059e:	f000 f98f 	bl	80008c0 <MX_USART6_UART_Init>
  MX_DMA_Init();
 80005a2:	f000 f9b7 	bl	8000914 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a6:	f000 f937 	bl	8000818 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 80005aa:	f003 f959 	bl	8003860 <LCD_Init>
  LCD_Clear();
 80005ae:	f003 f913 	bl	80037d8 <LCD_Clear>
  LCD_Set_Cursor(1, 1);
 80005b2:	2101      	movs	r1, #1
 80005b4:	2001      	movs	r0, #1
 80005b6:	f003 f919 	bl	80037ec <LCD_Set_Cursor>
  LCD_Write_String("Baslatiliyor... ");
 80005ba:	485c      	ldr	r0, [pc, #368]	; (800072c <main+0x1a4>)
 80005bc:	f003 faac 	bl	8003b18 <LCD_Write_String>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 80005c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c4:	f000 fccc 	bl	8000f60 <HAL_Delay>

	nitroVal = get_nitrogen_data();
 80005c8:	f003 fac2 	bl	8003b50 <get_nitrogen_data>
 80005cc:	4603      	mov	r3, r0
 80005ce:	723b      	strb	r3, [r7, #8]
	phosVal = get_phosphorous_data();
 80005d0:	f003 fb16 	bl	8003c00 <get_phosphorous_data>
 80005d4:	4603      	mov	r3, r0
 80005d6:	71fb      	strb	r3, [r7, #7]
	potaVal = get_potassium_data();
 80005d8:	f003 fb6a 	bl	8003cb0 <get_potassium_data>
 80005dc:	4603      	mov	r3, r0
 80005de:	71bb      	strb	r3, [r7, #6]

	send_nitro_data_to_bluetooth(nitroVal);
 80005e0:	7a3b      	ldrb	r3, [r7, #8]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 ff8a 	bl	80034fc <send_nitro_data_to_bluetooth>
	send_phos_data_to_bluetooth(phosVal);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 ffb4 	bl	8003558 <send_phos_data_to_bluetooth>
	send_pota_data_to_bluetooth(potaVal);
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 ffde 	bl	80035b4 <send_pota_data_to_bluetooth>

	if(nitroVal == 0 && phosVal == 0 && potaVal == 0){
 80005f8:	7a3b      	ldrb	r3, [r7, #8]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d10d      	bne.n	800061a <main+0x92>
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d10a      	bne.n	800061a <main+0x92>
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d107      	bne.n	800061a <main+0x92>
		LCD_Set_Cursor(1, 1);
 800060a:	2101      	movs	r1, #1
 800060c:	2001      	movs	r0, #1
 800060e:	f003 f8ed 	bl	80037ec <LCD_Set_Cursor>
		LCD_Write_String("Olcume Hazir!  ");
 8000612:	4847      	ldr	r0, [pc, #284]	; (8000730 <main+0x1a8>)
 8000614:	f003 fa80 	bl	8003b18 <LCD_Write_String>
 8000618:	e064      	b.n	80006e4 <main+0x15c>
	}
	else if(nitroVal != 0 && nitroVal != 1 && phosVal != 0 && phosVal != 1 && potaVal != 0 && potaVal != 1){
 800061a:	7a3b      	ldrb	r3, [r7, #8]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d061      	beq.n	80006e4 <main+0x15c>
 8000620:	7a3b      	ldrb	r3, [r7, #8]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d05e      	beq.n	80006e4 <main+0x15c>
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d05b      	beq.n	80006e4 <main+0x15c>
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d058      	beq.n	80006e4 <main+0x15c>
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d055      	beq.n	80006e4 <main+0x15c>
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d052      	beq.n	80006e4 <main+0x15c>
		LCD_Set_Cursor(1, 1);
 800063e:	2101      	movs	r1, #1
 8000640:	2001      	movs	r0, #1
 8000642:	f003 f8d3 	bl	80037ec <LCD_Set_Cursor>
		LCD_Write_String("Olcum Yapiliyor!");
 8000646:	483b      	ldr	r0, [pc, #236]	; (8000734 <main+0x1ac>)
 8000648:	f003 fa66 	bl	8003b18 <LCD_Write_String>

		if(nitroVal == nitroVal1 && nitroVal == nitroVal2 && nitroVal == nitroVal3 && nitroVal == nitroVal4 && nitroVal == nitroVal5
 800064c:	7a3a      	ldrb	r2, [r7, #8]
 800064e:	7dfb      	ldrb	r3, [r7, #23]
 8000650:	429a      	cmp	r2, r3
 8000652:	d147      	bne.n	80006e4 <main+0x15c>
 8000654:	7a3a      	ldrb	r2, [r7, #8]
 8000656:	7d3b      	ldrb	r3, [r7, #20]
 8000658:	429a      	cmp	r2, r3
 800065a:	d143      	bne.n	80006e4 <main+0x15c>
 800065c:	7a3a      	ldrb	r2, [r7, #8]
 800065e:	7c7b      	ldrb	r3, [r7, #17]
 8000660:	429a      	cmp	r2, r3
 8000662:	d13f      	bne.n	80006e4 <main+0x15c>
 8000664:	7a3a      	ldrb	r2, [r7, #8]
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	429a      	cmp	r2, r3
 800066a:	d13b      	bne.n	80006e4 <main+0x15c>
 800066c:	7a3a      	ldrb	r2, [r7, #8]
 800066e:	7afb      	ldrb	r3, [r7, #11]
 8000670:	429a      	cmp	r2, r3
 8000672:	d137      	bne.n	80006e4 <main+0x15c>
			&& phosVal == phosVal1 && phosVal == phosVal2 && phosVal == phosVal3 && phosVal == phosVal4 && phosVal == phosVal5
 8000674:	79fa      	ldrb	r2, [r7, #7]
 8000676:	7dbb      	ldrb	r3, [r7, #22]
 8000678:	429a      	cmp	r2, r3
 800067a:	d133      	bne.n	80006e4 <main+0x15c>
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	7cfb      	ldrb	r3, [r7, #19]
 8000680:	429a      	cmp	r2, r3
 8000682:	d12f      	bne.n	80006e4 <main+0x15c>
 8000684:	79fa      	ldrb	r2, [r7, #7]
 8000686:	7c3b      	ldrb	r3, [r7, #16]
 8000688:	429a      	cmp	r2, r3
 800068a:	d12b      	bne.n	80006e4 <main+0x15c>
 800068c:	79fa      	ldrb	r2, [r7, #7]
 800068e:	7b7b      	ldrb	r3, [r7, #13]
 8000690:	429a      	cmp	r2, r3
 8000692:	d127      	bne.n	80006e4 <main+0x15c>
 8000694:	79fa      	ldrb	r2, [r7, #7]
 8000696:	7abb      	ldrb	r3, [r7, #10]
 8000698:	429a      	cmp	r2, r3
 800069a:	d123      	bne.n	80006e4 <main+0x15c>
			&& potaVal == potaVal1 && potaVal == potaVal2 && potaVal == potaVal3 && potaVal == potaVal4 && potaVal == potaVal5){
 800069c:	79ba      	ldrb	r2, [r7, #6]
 800069e:	7d7b      	ldrb	r3, [r7, #21]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d11f      	bne.n	80006e4 <main+0x15c>
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	7cbb      	ldrb	r3, [r7, #18]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d11b      	bne.n	80006e4 <main+0x15c>
 80006ac:	79ba      	ldrb	r2, [r7, #6]
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d117      	bne.n	80006e4 <main+0x15c>
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	7b3b      	ldrb	r3, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d113      	bne.n	80006e4 <main+0x15c>
 80006bc:	79ba      	ldrb	r2, [r7, #6]
 80006be:	7a7b      	ldrb	r3, [r7, #9]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d10f      	bne.n	80006e4 <main+0x15c>

			LCD_Set_Cursor(1, 1);
 80006c4:	2101      	movs	r1, #1
 80006c6:	2001      	movs	r0, #1
 80006c8:	f003 f890 	bl	80037ec <LCD_Set_Cursor>
			LCD_Write_String("     Olcum      ");
 80006cc:	481a      	ldr	r0, [pc, #104]	; (8000738 <main+0x1b0>)
 80006ce:	f003 fa23 	bl	8003b18 <LCD_Write_String>
			LCD_Set_Cursor(2, 1);
 80006d2:	2101      	movs	r1, #1
 80006d4:	2002      	movs	r0, #2
 80006d6:	f003 f889 	bl	80037ec <LCD_Set_Cursor>
			LCD_Write_String("  Tamamlandi!   ");
 80006da:	4818      	ldr	r0, [pc, #96]	; (800073c <main+0x1b4>)
 80006dc:	f003 fa1c 	bl	8003b18 <LCD_Write_String>

			return 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	e01e      	b.n	8000722 <main+0x19a>
		}
	}
	nitroVal5 = nitroVal4;
 80006e4:	7bbb      	ldrb	r3, [r7, #14]
 80006e6:	72fb      	strb	r3, [r7, #11]
	phosVal5 = phosVal4;
 80006e8:	7b7b      	ldrb	r3, [r7, #13]
 80006ea:	72bb      	strb	r3, [r7, #10]
	potaVal5 = potaVal4;
 80006ec:	7b3b      	ldrb	r3, [r7, #12]
 80006ee:	727b      	strb	r3, [r7, #9]

	nitroVal4 = nitroVal3;
 80006f0:	7c7b      	ldrb	r3, [r7, #17]
 80006f2:	73bb      	strb	r3, [r7, #14]
	phosVal4 = phosVal3;
 80006f4:	7c3b      	ldrb	r3, [r7, #16]
 80006f6:	737b      	strb	r3, [r7, #13]
	potaVal4 = potaVal3;
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	733b      	strb	r3, [r7, #12]

	nitroVal3 = nitroVal2;
 80006fc:	7d3b      	ldrb	r3, [r7, #20]
 80006fe:	747b      	strb	r3, [r7, #17]
	phosVal3 = phosVal2;
 8000700:	7cfb      	ldrb	r3, [r7, #19]
 8000702:	743b      	strb	r3, [r7, #16]
	potaVal3 = potaVal2;
 8000704:	7cbb      	ldrb	r3, [r7, #18]
 8000706:	73fb      	strb	r3, [r7, #15]

	nitroVal2 = nitroVal1;
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	753b      	strb	r3, [r7, #20]
	phosVal2 = phosVal1;
 800070c:	7dbb      	ldrb	r3, [r7, #22]
 800070e:	74fb      	strb	r3, [r7, #19]
	potaVal2 = potaVal1;
 8000710:	7d7b      	ldrb	r3, [r7, #21]
 8000712:	74bb      	strb	r3, [r7, #18]

	nitroVal1 = nitroVal;
 8000714:	7a3b      	ldrb	r3, [r7, #8]
 8000716:	75fb      	strb	r3, [r7, #23]
	phosVal1 = phosVal;
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	75bb      	strb	r3, [r7, #22]
	potaVal1 = potaVal;
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	757b      	strb	r3, [r7, #21]
	HAL_Delay(1000);
 8000720:	e74e      	b.n	80005c0 <main+0x38>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000722:	4618      	mov	r0, r3
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	08004698 	.word	0x08004698
 8000730:	080046ac 	.word	0x080046ac
 8000734:	080046bc 	.word	0x080046bc
 8000738:	080046d0 	.word	0x080046d0
 800073c:	080046e4 	.word	0x080046e4

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2230      	movs	r2, #48	; 0x30
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f003 fb60 	bl	8003e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <SystemClock_Config+0xd0>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a28      	ldr	r2, [pc, #160]	; (8000810 <SystemClock_Config+0xd0>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <SystemClock_Config+0xd0>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <SystemClock_Config+0xd4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xd4>)
 800078e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007b4:	2310      	movs	r3, #16
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007be:	2304      	movs	r3, #4
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c2:	2307      	movs	r3, #7
 80007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fa18 	bl	8001c00 <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007d6:	f000 f949 	bl	8000a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2102      	movs	r1, #2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 fc7a 	bl	80020f0 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000802:	f000 f933 	bl	8000a6c <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_USART1_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000824:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000850:	f001 fe4a 	bl	80024e8 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f000 f907 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000158 	.word	0x20000158
 8000868:	40011000 	.word	0x40011000

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART2_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000878:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f001 fe20 	bl	80024e8 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f8dd 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200001e0 	.word	0x200001e0
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART6_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_USART6_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4800;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_USART6_UART_Init+0x4c>)
 80008cc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80008d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART6_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART6_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART6_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART6_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART6_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART6_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART6_UART_Init+0x4c>)
 80008f8:	f001 fdf6 	bl	80024e8 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f000 f8b3 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000019c 	.word	0x2000019c
 8000910:	40011400 	.word	0x40011400

08000914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_DMA_Init+0x4c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <MX_DMA_Init+0x4c>)
 8000924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_DMA_Init+0x4c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2039      	movs	r0, #57	; 0x39
 800093c:	f000 fc0f 	bl	800115e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000940:	2039      	movs	r0, #57	; 0x39
 8000942:	f000 fc28 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2045      	movs	r0, #69	; 0x45
 800094c:	f000 fc07 	bl	800115e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000950:	2045      	movs	r0, #69	; 0x45
 8000952:	f000 fc20 	bl	8001196 <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <MX_GPIO_Init+0xfc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a37      	ldr	r2, [pc, #220]	; (8000a60 <MX_GPIO_Init+0xfc>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <MX_GPIO_Init+0xfc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <MX_GPIO_Init+0xfc>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a30      	ldr	r2, [pc, #192]	; (8000a60 <MX_GPIO_Init+0xfc>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <MX_GPIO_Init+0xfc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <MX_GPIO_Init+0xfc>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <MX_GPIO_Init+0xfc>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <MX_GPIO_Init+0xfc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_GPIO_Init+0xfc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <MX_GPIO_Init+0xfc>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_GPIO_Init+0xfc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2120      	movs	r1, #32
 80009ee:	481d      	ldr	r0, [pc, #116]	; (8000a64 <MX_GPIO_Init+0x100>)
 80009f0:	f001 f8ec 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80009fa:	481b      	ldr	r0, [pc, #108]	; (8000a68 <MX_GPIO_Init+0x104>)
 80009fc:	f001 f8e6 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4814      	ldr	r0, [pc, #80]	; (8000a68 <MX_GPIO_Init+0x104>)
 8000a18:	f000 ff54 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_GPIO_Init+0x100>)
 8000a34:	f000 ff46 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_GPIO_Init+0x104>)
 8000a52:	f000 ff37 	bl	80018c4 <HAL_GPIO_Init>

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020800 	.word	0x40020800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab6:	2007      	movs	r0, #7
 8000ab8:	f000 fb46 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	; 0x38
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a7e      	ldr	r2, [pc, #504]	; (8000ce0 <HAL_UART_MspInit+0x218>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12d      	bne.n	8000b46 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
 8000aee:	4b7d      	ldr	r3, [pc, #500]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a7c      	ldr	r2, [pc, #496]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000af4:	f043 0310 	orr.w	r3, r3, #16
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b7a      	ldr	r3, [pc, #488]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	623b      	str	r3, [r7, #32]
 8000b04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
 8000b0a:	4b76      	ldr	r3, [pc, #472]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a75      	ldr	r2, [pc, #468]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b73      	ldr	r3, [pc, #460]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b34:	2307      	movs	r3, #7
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	486a      	ldr	r0, [pc, #424]	; (8000ce8 <HAL_UART_MspInit+0x220>)
 8000b40:	f000 fec0 	bl	80018c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000b44:	e0c7      	b.n	8000cd6 <HAL_UART_MspInit+0x20e>
  else if(huart->Instance==USART2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a68      	ldr	r2, [pc, #416]	; (8000cec <HAL_UART_MspInit+0x224>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d12c      	bne.n	8000baa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	4b63      	ldr	r3, [pc, #396]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a62      	ldr	r2, [pc, #392]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b60      	ldr	r3, [pc, #384]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a5b      	ldr	r2, [pc, #364]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b59      	ldr	r3, [pc, #356]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4851      	ldr	r0, [pc, #324]	; (8000ce8 <HAL_UART_MspInit+0x220>)
 8000ba4:	f000 fe8e 	bl	80018c4 <HAL_GPIO_Init>
}
 8000ba8:	e095      	b.n	8000cd6 <HAL_UART_MspInit+0x20e>
  else if(huart->Instance==USART6)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a50      	ldr	r2, [pc, #320]	; (8000cf0 <HAL_UART_MspInit+0x228>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	f040 8090 	bne.w	8000cd6 <HAL_UART_MspInit+0x20e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b4a      	ldr	r3, [pc, #296]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a49      	ldr	r2, [pc, #292]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f003 0320 	and.w	r3, r3, #32
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a42      	ldr	r2, [pc, #264]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b40      	ldr	r3, [pc, #256]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bee:	23c0      	movs	r3, #192	; 0xc0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000bfe:	2308      	movs	r3, #8
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	483a      	ldr	r0, [pc, #232]	; (8000cf4 <HAL_UART_MspInit+0x22c>)
 8000c0a:	f000 fe5b 	bl	80018c4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000c0e:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c10:	4a3a      	ldr	r2, [pc, #232]	; (8000cfc <HAL_UART_MspInit+0x234>)
 8000c12:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000c14:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c16:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000c1a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c1c:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c22:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c28:	4b33      	ldr	r3, [pc, #204]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c30:	4b31      	ldr	r3, [pc, #196]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c36:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c48:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000c4e:	482a      	ldr	r0, [pc, #168]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c50:	f000 fabc 	bl	80011cc <HAL_DMA_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_UART_MspInit+0x196>
      Error_Handler();
 8000c5a:	f7ff ff07 	bl	8000a6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a25      	ldr	r2, [pc, #148]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c62:	639a      	str	r2, [r3, #56]	; 0x38
 8000c64:	4a24      	ldr	r2, [pc, #144]	; (8000cf8 <HAL_UART_MspInit+0x230>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000c6c:	4a25      	ldr	r2, [pc, #148]	; (8000d04 <HAL_UART_MspInit+0x23c>)
 8000c6e:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000c72:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000c76:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000c7a:	2240      	movs	r2, #64	; 0x40
 8000c7c:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8a:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000caa:	4815      	ldr	r0, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000cac:	f000 fa8e 	bl	80011cc <HAL_DMA_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 8000cb6:	f7ff fed9 	bl	8000a6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc0:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_UART_MspInit+0x238>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2047      	movs	r0, #71	; 0x47
 8000ccc:	f000 fa47 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000cd0:	2047      	movs	r0, #71	; 0x47
 8000cd2:	f000 fa60 	bl	8001196 <HAL_NVIC_EnableIRQ>
}
 8000cd6:	bf00      	nop
 8000cd8:	3738      	adds	r7, #56	; 0x38
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40011400 	.word	0x40011400
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	20000098 	.word	0x20000098
 8000cfc:	40026428 	.word	0x40026428
 8000d00:	200000f8 	.word	0x200000f8
 8000d04:	400264a0 	.word	0x400264a0

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f8e4 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <DMA2_Stream1_IRQHandler+0x10>)
 8000d62:	f000 fb73 	bl	800144c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000098 	.word	0x20000098

08000d70 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <DMA2_Stream6_IRQHandler+0x10>)
 8000d76:	f000 fb69 	bl	800144c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000f8 	.word	0x200000f8

08000d84 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <USART6_IRQHandler+0x10>)
 8000d8a:	f001 fd2f 	bl	80027ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000019c 	.word	0x2000019c

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f002 fffa 	bl	8003dc0 <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20018000 	.word	0x20018000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	2000008c 	.word	0x2000008c
 8000e00:	20000238 	.word	0x20000238

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2e:	490e      	ldr	r1, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e44:	4c0b      	ldr	r4, [pc, #44]	; (8000e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e52:	f7ff ffd7 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f002 ffb9 	bl	8003dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fb95 	bl	8000588 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e6c:	080047c4 	.word	0x080047c4
  ldr r2, =_sbss
 8000e70:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e74:	20000238 	.word	0x20000238

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <HAL_Init+0x40>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_Init+0x40>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x40>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f94f 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fde2 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f967 	bl	80011b2 <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f92f 	bl	800115e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000224 	.word	0x20000224

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000224 	.word	0x20000224

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff ffee 	bl	8000f48 <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffde 	bl	8000f48 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	; (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff8e 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff29 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff3e 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff8e 	bl	800109c <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5d 	bl	8001048 <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff31 	bl	800100c <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa2 	bl	8001104 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff feb6 	bl	8000f48 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e099      	b.n	800131c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2202      	movs	r2, #2
 80011ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001208:	e00f      	b.n	800122a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800120a:	f7ff fe9d 	bl	8000f48 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b05      	cmp	r3, #5
 8001216:	d908      	bls.n	800122a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2220      	movs	r2, #32
 800121c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2203      	movs	r2, #3
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e078      	b.n	800131c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1e8      	bne.n	800120a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4b38      	ldr	r3, [pc, #224]	; (8001324 <HAL_DMA_Init+0x158>)
 8001244:	4013      	ands	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001256:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4313      	orrs	r3, r2
 800127a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	2b04      	cmp	r3, #4
 8001282:	d107      	bne.n	8001294 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4313      	orrs	r3, r2
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f023 0307 	bic.w	r3, r3, #7
 80012aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d117      	bne.n	80012ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00e      	beq.n	80012ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fa7b 	bl	80017cc <DMA_CheckFifoParam>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012ea:	2301      	movs	r3, #1
 80012ec:	e016      	b.n	800131c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fa32 	bl	8001760 <DMA_CalcBaseAndBitshift>
 80012fc:	4603      	mov	r3, r0
 80012fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001304:	223f      	movs	r2, #63	; 0x3f
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	f010803f 	.word	0xf010803f

08001328 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001334:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001336:	f7ff fe07 	bl	8000f48 <HAL_GetTick>
 800133a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d008      	beq.n	800135a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e052      	b.n	8001400 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0216 	bic.w	r2, r2, #22
 8001368:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695a      	ldr	r2, [r3, #20]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001378:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	2b00      	cmp	r3, #0
 8001380:	d103      	bne.n	800138a <HAL_DMA_Abort+0x62>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0208 	bic.w	r2, r2, #8
 8001398:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0201 	bic.w	r2, r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013aa:	e013      	b.n	80013d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ac:	f7ff fdcc 	bl	8000f48 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d90c      	bls.n	80013d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2220      	movs	r2, #32
 80013be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2203      	movs	r2, #3
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e015      	b.n	8001400 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1e4      	bne.n	80013ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e6:	223f      	movs	r2, #63	; 0x3f
 80013e8:	409a      	lsls	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d004      	beq.n	8001426 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00c      	b.n	8001440 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2205      	movs	r2, #5
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0201 	bic.w	r2, r2, #1
 800143c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001458:	4b92      	ldr	r3, [pc, #584]	; (80016a4 <HAL_DMA_IRQHandler+0x258>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a92      	ldr	r2, [pc, #584]	; (80016a8 <HAL_DMA_IRQHandler+0x25c>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0a9b      	lsrs	r3, r3, #10
 8001464:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	2208      	movs	r2, #8
 8001478:	409a      	lsls	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d01a      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0204 	bic.w	r2, r2, #4
 800149e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	2208      	movs	r2, #8
 80014a6:	409a      	lsls	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	2201      	movs	r2, #1
 80014be:	409a      	lsls	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d012      	beq.n	80014ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014da:	2201      	movs	r2, #1
 80014dc:	409a      	lsls	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e6:	f043 0202 	orr.w	r2, r3, #2
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f2:	2204      	movs	r2, #4
 80014f4:	409a      	lsls	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d012      	beq.n	8001524 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	2204      	movs	r2, #4
 8001512:	409a      	lsls	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151c:	f043 0204 	orr.w	r2, r3, #4
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001528:	2210      	movs	r2, #16
 800152a:	409a      	lsls	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4013      	ands	r3, r2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d043      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d03c      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001546:	2210      	movs	r2, #16
 8001548:	409a      	lsls	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d018      	beq.n	800158e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d108      	bne.n	800157c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	2b00      	cmp	r3, #0
 8001570:	d024      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
 800157a:	e01f      	b.n	80015bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01b      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	4798      	blx	r3
 800158c:	e016      	b.n	80015bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d107      	bne.n	80015ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0208 	bic.w	r2, r2, #8
 80015aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	2220      	movs	r2, #32
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 808e 	beq.w	80016ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 8086 	beq.w	80016ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e2:	2220      	movs	r2, #32
 80015e4:	409a      	lsls	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d136      	bne.n	8001664 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0216 	bic.w	r2, r2, #22
 8001604:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001614:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <HAL_DMA_IRQHandler+0x1da>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0208 	bic.w	r2, r2, #8
 8001634:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163a:	223f      	movs	r2, #63	; 0x3f
 800163c:	409a      	lsls	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001656:	2b00      	cmp	r3, #0
 8001658:	d07d      	beq.n	8001756 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	4798      	blx	r3
        }
        return;
 8001662:	e078      	b.n	8001756 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d01c      	beq.n	80016ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d108      	bne.n	8001692 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001684:	2b00      	cmp	r3, #0
 8001686:	d030      	beq.n	80016ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
 8001690:	e02b      	b.n	80016ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	2b00      	cmp	r3, #0
 8001698:	d027      	beq.n	80016ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
 80016a2:	e022      	b.n	80016ea <HAL_DMA_IRQHandler+0x29e>
 80016a4:	20000000 	.word	0x20000000
 80016a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10f      	bne.n	80016da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0210 	bic.w	r2, r2, #16
 80016c8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d032      	beq.n	8001758 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d022      	beq.n	8001744 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2205      	movs	r2, #5
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0201 	bic.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3301      	adds	r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	429a      	cmp	r2, r3
 8001720:	d307      	bcc.n	8001732 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f2      	bne.n	8001716 <HAL_DMA_IRQHandler+0x2ca>
 8001730:	e000      	b.n	8001734 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001732:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
 8001754:	e000      	b.n	8001758 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001756:	bf00      	nop
    }
  }
}
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop

08001760 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3b10      	subs	r3, #16
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <DMA_CalcBaseAndBitshift+0x68>)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d909      	bls.n	80017a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	1d1a      	adds	r2, r3, #4
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	659a      	str	r2, [r3, #88]	; 0x58
 80017a0:	e007      	b.n	80017b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017aa:	f023 0303 	bic.w	r3, r3, #3
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	aaaaaaab 	.word	0xaaaaaaab
 80017c8:	08004764 	.word	0x08004764

080017cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d11f      	bne.n	8001826 <DMA_CheckFifoParam+0x5a>
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d856      	bhi.n	800189a <DMA_CheckFifoParam+0xce>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <DMA_CheckFifoParam+0x28>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001805 	.word	0x08001805
 80017f8:	08001817 	.word	0x08001817
 80017fc:	08001805 	.word	0x08001805
 8001800:	0800189b 	.word	0x0800189b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d046      	beq.n	800189e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001814:	e043      	b.n	800189e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800181e:	d140      	bne.n	80018a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001824:	e03d      	b.n	80018a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800182e:	d121      	bne.n	8001874 <DMA_CheckFifoParam+0xa8>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d837      	bhi.n	80018a6 <DMA_CheckFifoParam+0xda>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <DMA_CheckFifoParam+0x70>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800184d 	.word	0x0800184d
 8001840:	08001853 	.word	0x08001853
 8001844:	0800184d 	.word	0x0800184d
 8001848:	08001865 	.word	0x08001865
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
      break;
 8001850:	e030      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d025      	beq.n	80018aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001862:	e022      	b.n	80018aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800186c:	d11f      	bne.n	80018ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001872:	e01c      	b.n	80018ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d903      	bls.n	8001882 <DMA_CheckFifoParam+0xb6>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d003      	beq.n	8001888 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001880:	e018      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
      break;
 8001886:	e015      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00e      	beq.n	80018b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
      break;
 8001898:	e00b      	b.n	80018b2 <DMA_CheckFifoParam+0xe6>
      break;
 800189a:	bf00      	nop
 800189c:	e00a      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;
 800189e:	bf00      	nop
 80018a0:	e008      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;
 80018a2:	bf00      	nop
 80018a4:	e006      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;
 80018a6:	bf00      	nop
 80018a8:	e004      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;
 80018aa:	bf00      	nop
 80018ac:	e002      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80018ae:	bf00      	nop
 80018b0:	e000      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;
 80018b2:	bf00      	nop
    }
  } 
  
  return status; 
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e159      	b.n	8001b94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8148 	bne.w	8001b8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d005      	beq.n	8001916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001912:	2b02      	cmp	r3, #2
 8001914:	d130      	bne.n	8001978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 0201 	and.w	r2, r3, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b03      	cmp	r3, #3
 8001982:	d017      	beq.n	80019b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d123      	bne.n	8001a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	69b9      	ldr	r1, [r7, #24]
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80a2 	beq.w	8001b8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b57      	ldr	r3, [pc, #348]	; (8001bac <HAL_GPIO_Init+0x2e8>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a56      	ldr	r2, [pc, #344]	; (8001bac <HAL_GPIO_Init+0x2e8>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b54      	ldr	r3, [pc, #336]	; (8001bac <HAL_GPIO_Init+0x2e8>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a66:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_GPIO_Init+0x2ec>)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a49      	ldr	r2, [pc, #292]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d019      	beq.n	8001ac6 <HAL_GPIO_Init+0x202>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a48      	ldr	r2, [pc, #288]	; (8001bb8 <HAL_GPIO_Init+0x2f4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_GPIO_Init+0x1fe>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a47      	ldr	r2, [pc, #284]	; (8001bbc <HAL_GPIO_Init+0x2f8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00d      	beq.n	8001abe <HAL_GPIO_Init+0x1fa>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a46      	ldr	r2, [pc, #280]	; (8001bc0 <HAL_GPIO_Init+0x2fc>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d007      	beq.n	8001aba <HAL_GPIO_Init+0x1f6>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a45      	ldr	r2, [pc, #276]	; (8001bc4 <HAL_GPIO_Init+0x300>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d101      	bne.n	8001ab6 <HAL_GPIO_Init+0x1f2>
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	e008      	b.n	8001ac8 <HAL_GPIO_Init+0x204>
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x204>
 8001aba:	2303      	movs	r3, #3
 8001abc:	e004      	b.n	8001ac8 <HAL_GPIO_Init+0x204>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e002      	b.n	8001ac8 <HAL_GPIO_Init+0x204>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_GPIO_Init+0x204>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	f002 0203 	and.w	r2, r2, #3
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	4093      	lsls	r3, r2
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad8:	4935      	ldr	r1, [pc, #212]	; (8001bb0 <HAL_GPIO_Init+0x2ec>)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae6:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b0a:	4a2f      	ldr	r2, [pc, #188]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b34:	4a24      	ldr	r2, [pc, #144]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3a:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5e:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b88:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3301      	adds	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b0f      	cmp	r3, #15
 8001b98:	f67f aea2 	bls.w	80018e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020c00 	.word	0x40020c00
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40013c00 	.word	0x40013c00

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001be8:	e003      	b.n	8001bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	041a      	lsls	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	619a      	str	r2, [r3, #24]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e264      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d075      	beq.n	8001d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c1e:	4ba3      	ldr	r3, [pc, #652]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d00c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2a:	4ba0      	ldr	r3, [pc, #640]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d112      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c36:	4b9d      	ldr	r3, [pc, #628]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c42:	d10b      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	4b99      	ldr	r3, [pc, #612]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d05b      	beq.n	8001d08 <HAL_RCC_OscConfig+0x108>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d157      	bne.n	8001d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e23f      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d106      	bne.n	8001c74 <HAL_RCC_OscConfig+0x74>
 8001c66:	4b91      	ldr	r3, [pc, #580]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a90      	ldr	r2, [pc, #576]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e01d      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x98>
 8001c7e:	4b8b      	ldr	r3, [pc, #556]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a8a      	ldr	r2, [pc, #552]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a87      	ldr	r2, [pc, #540]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
 8001c98:	4b84      	ldr	r3, [pc, #528]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a83      	ldr	r2, [pc, #524]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a80      	ldr	r2, [pc, #512]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f946 	bl	8000f48 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff f942 	bl	8000f48 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e204      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b76      	ldr	r3, [pc, #472]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xc0>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f932 	bl	8000f48 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f92e 	bl	8000f48 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1f0      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	4b6c      	ldr	r3, [pc, #432]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xe8>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d063      	beq.n	8001dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d16:	4b65      	ldr	r3, [pc, #404]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b62      	ldr	r3, [pc, #392]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d11c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_RCC_OscConfig+0x152>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e1c4      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b56      	ldr	r3, [pc, #344]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4952      	ldr	r1, [pc, #328]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	e03a      	b.n	8001dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_RCC_OscConfig+0x2b0>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f8e7 	bl	8000f48 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff f8e3 	bl	8000f48 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1a5      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	4b46      	ldr	r3, [pc, #280]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b43      	ldr	r3, [pc, #268]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4940      	ldr	r1, [pc, #256]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <HAL_RCC_OscConfig+0x2b0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff f8c6 	bl	8000f48 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f8c2 	bl	8000f48 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e184      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d030      	beq.n	8001e4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d016      	beq.n	8001e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df2:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <HAL_RCC_OscConfig+0x2b4>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f8a6 	bl	8000f48 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff f8a2 	bl	8000f48 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e164      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x200>
 8001e1e:	e015      	b.n	8001e4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_OscConfig+0x2b4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7ff f88f 	bl	8000f48 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f88b 	bl	8000f48 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e14d      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a0 	beq.w	8001f9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_OscConfig+0x2b8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d121      	bne.n	8001eda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_RCC_OscConfig+0x2b8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_RCC_OscConfig+0x2b8>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f851 	bl	8000f48 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e011      	b.n	8001ece <HAL_RCC_OscConfig+0x2ce>
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	42470000 	.word	0x42470000
 8001eb4:	42470e80 	.word	0x42470e80
 8001eb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebc:	f7ff f844 	bl	8000f48 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e106      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	4b85      	ldr	r3, [pc, #532]	; (80020e4 <HAL_RCC_OscConfig+0x4e4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d106      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2f0>
 8001ee2:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	4a80      	ldr	r2, [pc, #512]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
 8001eee:	e01c      	b.n	8001f2a <HAL_RCC_OscConfig+0x32a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x312>
 8001ef8:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a7a      	ldr	r2, [pc, #488]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	4b78      	ldr	r3, [pc, #480]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	4a77      	ldr	r2, [pc, #476]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0x32a>
 8001f12:	4b75      	ldr	r3, [pc, #468]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	4a74      	ldr	r2, [pc, #464]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1e:	4b72      	ldr	r3, [pc, #456]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	4a71      	ldr	r2, [pc, #452]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f32:	f7ff f809 	bl	8000f48 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff f805 	bl	8000f48 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0c5      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	4b65      	ldr	r3, [pc, #404]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ee      	beq.n	8001f3a <HAL_RCC_OscConfig+0x33a>
 8001f5c:	e014      	b.n	8001f88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fff3 	bl	8000f48 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7fe ffef 	bl	8000f48 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0af      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	4b5a      	ldr	r3, [pc, #360]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b56      	ldr	r3, [pc, #344]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a55      	ldr	r2, [pc, #340]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 809b 	beq.w	80020da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa4:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d05c      	beq.n	800206a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d141      	bne.n	800203c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb8:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_RCC_OscConfig+0x4ec>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe ffc3 	bl	8000f48 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7fe ffbf 	bl	8000f48 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e081      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd8:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	019b      	lsls	r3, r3, #6
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	061b      	lsls	r3, r3, #24
 8002008:	4937      	ldr	r1, [pc, #220]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800200e:	4b37      	ldr	r3, [pc, #220]	; (80020ec <HAL_RCC_OscConfig+0x4ec>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe ff98 	bl	8000f48 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe ff94 	bl	8000f48 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e056      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x41c>
 800203a:	e04e      	b.n	80020da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_RCC_OscConfig+0x4ec>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe ff81 	bl	8000f48 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe ff7d 	bl	8000f48 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e03f      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x44a>
 8002068:	e037      	b.n	80020da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e032      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d028      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d121      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d11a      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a6:	4013      	ands	r3, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d111      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	3b01      	subs	r3, #1
 80020c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40007000 	.word	0x40007000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	42470060 	.word	0x42470060

080020f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0cc      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002104:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d90c      	bls.n	800212c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0b8      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4a58      	ldr	r2, [pc, #352]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800214e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b50      	ldr	r3, [pc, #320]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	494d      	ldr	r1, [pc, #308]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d044      	beq.n	8002210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d119      	bne.n	80021ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07f      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d003      	beq.n	80021ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ae:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06f      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e067      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ce:	4b37      	ldr	r3, [pc, #220]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f023 0203 	bic.w	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e0:	f7fe feb2 	bl	8000f48 <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e8:	f7fe feae 	bl	8000f48 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e04f      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 020c 	and.w	r2, r3, #12
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	429a      	cmp	r2, r3
 800220e:	d1eb      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d20c      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e032      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4916      	ldr	r1, [pc, #88]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002276:	f000 f821 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 800227a:	4602      	mov	r2, r0
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	490a      	ldr	r1, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	5ccb      	ldrb	r3, [r1, r3]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fe12 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023c00 	.word	0x40023c00
 80022ac:	40023800 	.word	0x40023800
 80022b0:	0800474c 	.word	0x0800474c
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000004 	.word	0x20000004

080022bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	2300      	movs	r3, #0
 80022ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d4:	4b67      	ldr	r3, [pc, #412]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d00d      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x40>
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	f200 80bd 	bhi.w	8002460 <HAL_RCC_GetSysClockFreq+0x1a4>
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x34>
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ee:	e0b7      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022f2:	60bb      	str	r3, [r7, #8]
       break;
 80022f4:	e0b7      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f6:	4b61      	ldr	r3, [pc, #388]	; (800247c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80022f8:	60bb      	str	r3, [r7, #8]
      break;
 80022fa:	e0b4      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022fc:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002304:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002306:	4b5b      	ldr	r3, [pc, #364]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d04d      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002312:	4b58      	ldr	r3, [pc, #352]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	099b      	lsrs	r3, r3, #6
 8002318:	461a      	mov	r2, r3
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002322:	f04f 0100 	mov.w	r1, #0
 8002326:	ea02 0800 	and.w	r8, r2, r0
 800232a:	ea03 0901 	and.w	r9, r3, r1
 800232e:	4640      	mov	r0, r8
 8002330:	4649      	mov	r1, r9
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	014b      	lsls	r3, r1, #5
 800233c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002340:	0142      	lsls	r2, r0, #5
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	ebb0 0008 	subs.w	r0, r0, r8
 800234a:	eb61 0109 	sbc.w	r1, r1, r9
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	018b      	lsls	r3, r1, #6
 8002358:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800235c:	0182      	lsls	r2, r0, #6
 800235e:	1a12      	subs	r2, r2, r0
 8002360:	eb63 0301 	sbc.w	r3, r3, r1
 8002364:	f04f 0000 	mov.w	r0, #0
 8002368:	f04f 0100 	mov.w	r1, #0
 800236c:	00d9      	lsls	r1, r3, #3
 800236e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002372:	00d0      	lsls	r0, r2, #3
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	eb12 0208 	adds.w	r2, r2, r8
 800237c:	eb43 0309 	adc.w	r3, r3, r9
 8002380:	f04f 0000 	mov.w	r0, #0
 8002384:	f04f 0100 	mov.w	r1, #0
 8002388:	0259      	lsls	r1, r3, #9
 800238a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800238e:	0250      	lsls	r0, r2, #9
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	f7fd ff76 	bl	8000290 <__aeabi_uldivmod>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4613      	mov	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e04a      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ae:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	099b      	lsrs	r3, r3, #6
 80023b4:	461a      	mov	r2, r3
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	ea02 0400 	and.w	r4, r2, r0
 80023c6:	ea03 0501 	and.w	r5, r3, r1
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	014b      	lsls	r3, r1, #5
 80023d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023dc:	0142      	lsls	r2, r0, #5
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	1b00      	subs	r0, r0, r4
 80023e4:	eb61 0105 	sbc.w	r1, r1, r5
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	018b      	lsls	r3, r1, #6
 80023f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023f6:	0182      	lsls	r2, r0, #6
 80023f8:	1a12      	subs	r2, r2, r0
 80023fa:	eb63 0301 	sbc.w	r3, r3, r1
 80023fe:	f04f 0000 	mov.w	r0, #0
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	00d9      	lsls	r1, r3, #3
 8002408:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800240c:	00d0      	lsls	r0, r2, #3
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	1912      	adds	r2, r2, r4
 8002414:	eb45 0303 	adc.w	r3, r5, r3
 8002418:	f04f 0000 	mov.w	r0, #0
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	0299      	lsls	r1, r3, #10
 8002422:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002426:	0290      	lsls	r0, r2, #10
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	f7fd ff2a 	bl	8000290 <__aeabi_uldivmod>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4613      	mov	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	3301      	adds	r3, #1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	60bb      	str	r3, [r7, #8]
      break;
 800245e:	e002      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002462:	60bb      	str	r3, [r7, #8]
      break;
 8002464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002466:	68bb      	ldr	r3, [r7, #8]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	00f42400 	.word	0x00f42400
 800247c:	007a1200 	.word	0x007a1200

08002480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_RCC_GetHCLKFreq+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000000 	.word	0x20000000

08002498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800249c:	f7ff fff0 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0a9b      	lsrs	r3, r3, #10
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4903      	ldr	r1, [pc, #12]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	0800475c 	.word	0x0800475c

080024c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024c4:	f7ff ffdc 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0b5b      	lsrs	r3, r3, #13
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	0800475c 	.word	0x0800475c

080024e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e03f      	b.n	800257a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fada 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	; 0x24
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fe1d 	bl	800316c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b08a      	sub	sp, #40	; 0x28
 8002586:	af02      	add	r7, sp, #8
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4613      	mov	r3, r2
 8002590:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d17c      	bne.n	800269c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_UART_Transmit+0x2c>
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e075      	b.n	800269e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_UART_Transmit+0x3e>
 80025bc:	2302      	movs	r3, #2
 80025be:	e06e      	b.n	800269e <HAL_UART_Transmit+0x11c>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2221      	movs	r2, #33	; 0x21
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025d6:	f7fe fcb7 	bl	8000f48 <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	88fa      	ldrh	r2, [r7, #6]
 80025e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	88fa      	ldrh	r2, [r7, #6]
 80025e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f0:	d108      	bne.n	8002604 <HAL_UART_Transmit+0x82>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d104      	bne.n	8002604 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	e003      	b.n	800260c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002614:	e02a      	b.n	800266c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2200      	movs	r2, #0
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fb9b 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e036      	b.n	800269e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10b      	bne.n	800264e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002644:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	3302      	adds	r3, #2
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	e007      	b.n	800265e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	3301      	adds	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1cf      	bne.n	8002616 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	2140      	movs	r1, #64	; 0x40
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fb6b 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e006      	b.n	800269e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e000      	b.n	800269e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800269c:	2302      	movs	r3, #2
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b08a      	sub	sp, #40	; 0x28
 80026aa:	af02      	add	r7, sp, #8
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	4613      	mov	r3, r2
 80026b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	f040 808c 	bne.w	80027e0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_UART_Receive+0x2e>
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e084      	b.n	80027e2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_UART_Receive+0x40>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e07d      	b.n	80027e2 <HAL_UART_Receive+0x13c>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2222      	movs	r2, #34	; 0x22
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002702:	f7fe fc21 	bl	8000f48 <HAL_GetTick>
 8002706:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271c:	d108      	bne.n	8002730 <HAL_UART_Receive+0x8a>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d104      	bne.n	8002730 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	e003      	b.n	8002738 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002734:	2300      	movs	r3, #0
 8002736:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002740:	e043      	b.n	80027ca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	2120      	movs	r1, #32
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fb05 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e042      	b.n	80027e2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	b29b      	uxth	r3, r3
 800276a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276e:	b29a      	uxth	r2, r3
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	3302      	adds	r3, #2
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	e01f      	b.n	80027bc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002784:	d007      	beq.n	8002796 <HAL_UART_Receive+0xf0>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <HAL_UART_Receive+0xfe>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e008      	b.n	80027b6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3301      	adds	r3, #1
 80027ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1b6      	bne.n	8002742 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b0ba      	sub	sp, #232	; 0xe8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800281e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800282a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10f      	bne.n	8002852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_UART_IRQHandler+0x66>
 800283e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fbd3 	bl	8002ff6 <UART_Receive_IT>
      return;
 8002850:	e256      	b.n	8002d00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80de 	beq.w	8002a18 <HAL_UART_IRQHandler+0x22c>
 800285c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800286c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80d1 	beq.w	8002a18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_UART_IRQHandler+0xae>
 8002882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800289a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_UART_IRQHandler+0xd2>
 80028a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f043 0202 	orr.w	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_UART_IRQHandler+0xf6>
 80028ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f043 0204 	orr.w	r2, r3, #4
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d011      	beq.n	8002912 <HAL_UART_IRQHandler+0x126>
 80028ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f043 0208 	orr.w	r2, r3, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 81ed 	beq.w	8002cf6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800291c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_UART_IRQHandler+0x14e>
 8002928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fb5e 	bl	8002ff6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <HAL_UART_IRQHandler+0x17a>
 800295e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d04f      	beq.n	8002a06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa66 	bl	8002e38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d141      	bne.n	80029fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3314      	adds	r3, #20
 8002980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002988:	e853 3f00 	ldrex	r3, [r3]
 800298c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3314      	adds	r3, #20
 80029a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1d9      	bne.n	800297a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d013      	beq.n	80029f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	4a7d      	ldr	r2, [pc, #500]	; (8002bc8 <HAL_UART_IRQHandler+0x3dc>)
 80029d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fd14 	bl	8001408 <HAL_DMA_Abort_IT>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029f0:	4610      	mov	r0, r2
 80029f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f4:	e00e      	b.n	8002a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f99a 	bl	8002d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	e00a      	b.n	8002a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f996 	bl	8002d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e006      	b.n	8002a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f992 	bl	8002d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a12:	e170      	b.n	8002cf6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	bf00      	nop
    return;
 8002a16:	e16e      	b.n	8002cf6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f040 814a 	bne.w	8002cb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8143 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 813c 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	f040 80b4 	bne.w	8002bcc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8140 	beq.w	8002cfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a82:	429a      	cmp	r2, r3
 8002a84:	f080 8139 	bcs.w	8002cfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9a:	f000 8088 	beq.w	8002bae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aac:	e853 3f00 	ldrex	r3, [r3]
 8002ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	330c      	adds	r3, #12
 8002ac6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002aca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1d9      	bne.n	8002a9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3314      	adds	r3, #20
 8002af0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af4:	e853 3f00 	ldrex	r3, [r3]
 8002af8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3314      	adds	r3, #20
 8002b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e1      	bne.n	8002aea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3314      	adds	r3, #20
 8002b2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b30:	e853 3f00 	ldrex	r3, [r3]
 8002b34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3314      	adds	r3, #20
 8002b46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b52:	e841 2300 	strex	r3, r2, [r1]
 8002b56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1e3      	bne.n	8002b26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b76:	e853 3f00 	ldrex	r3, [r3]
 8002b7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7e:	f023 0310 	bic.w	r3, r3, #16
 8002b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b90:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b98:	e841 2300 	strex	r3, r2, [r1]
 8002b9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e3      	bne.n	8002b6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe fbbd 	bl	8001328 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f8c0 	bl	8002d44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bc4:	e099      	b.n	8002cfa <HAL_UART_IRQHandler+0x50e>
 8002bc6:	bf00      	nop
 8002bc8:	08002eff 	.word	0x08002eff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 808b 	beq.w	8002cfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8086 	beq.w	8002cfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	330c      	adds	r3, #12
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	330c      	adds	r3, #12
 8002c12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c16:	647a      	str	r2, [r7, #68]	; 0x44
 8002c18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e3      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3314      	adds	r3, #20
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	e853 3f00 	ldrex	r3, [r3]
 8002c38:	623b      	str	r3, [r7, #32]
   return(result);
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3314      	adds	r3, #20
 8002c4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c4e:	633a      	str	r2, [r7, #48]	; 0x30
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e3      	bne.n	8002c2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	330c      	adds	r3, #12
 8002c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	e853 3f00 	ldrex	r3, [r3]
 8002c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0310 	bic.w	r3, r3, #16
 8002c86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330c      	adds	r3, #12
 8002c90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c94:	61fa      	str	r2, [r7, #28]
 8002c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c98:	69b9      	ldr	r1, [r7, #24]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	e841 2300 	strex	r3, r2, [r1]
 8002ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e3      	bne.n	8002c70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f848 	bl	8002d44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cb4:	e023      	b.n	8002cfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x4ea>
 8002cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f929 	bl	8002f26 <UART_Transmit_IT>
    return;
 8002cd4:	e014      	b.n	8002d00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00e      	beq.n	8002d00 <HAL_UART_IRQHandler+0x514>
 8002ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f969 	bl	8002fc6 <UART_EndTransmit_IT>
    return;
 8002cf4:	e004      	b.n	8002d00 <HAL_UART_IRQHandler+0x514>
    return;
 8002cf6:	bf00      	nop
 8002cf8:	e002      	b.n	8002d00 <HAL_UART_IRQHandler+0x514>
      return;
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <HAL_UART_IRQHandler+0x514>
      return;
 8002cfe:	bf00      	nop
  }
}
 8002d00:	37e8      	adds	r7, #232	; 0xe8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop

08002d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b090      	sub	sp, #64	; 0x40
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d6c:	e050      	b.n	8002e10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d04c      	beq.n	8002e10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d7c:	f7fe f8e4 	bl	8000f48 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d241      	bcs.n	8002e10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	e853 3f00 	ldrex	r3, [r3]
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	330c      	adds	r3, #12
 8002daa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dac:	637a      	str	r2, [r7, #52]	; 0x34
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002db4:	e841 2300 	strex	r3, r2, [r1]
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e5      	bne.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	e853 3f00 	ldrex	r3, [r3]
 8002dce:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3314      	adds	r3, #20
 8002dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002de0:	623a      	str	r2, [r7, #32]
 8002de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de4:	69f9      	ldr	r1, [r7, #28]
 8002de6:	6a3a      	ldr	r2, [r7, #32]
 8002de8:	e841 2300 	strex	r3, r2, [r1]
 8002dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e5      	bne.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e00f      	b.n	8002e30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d09f      	beq.n	8002d6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3740      	adds	r7, #64	; 0x40
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b095      	sub	sp, #84	; 0x54
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4a:	e853 3f00 	ldrex	r3, [r3]
 8002e4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e60:	643a      	str	r2, [r7, #64]	; 0x40
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e5      	bne.n	8002e40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3314      	adds	r3, #20
 8002e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	e853 3f00 	ldrex	r3, [r3]
 8002e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3314      	adds	r3, #20
 8002e92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e5      	bne.n	8002e74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d119      	bne.n	8002ee4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	e853 3f00 	ldrex	r3, [r3]
 8002ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f023 0310 	bic.w	r3, r3, #16
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ed0:	61ba      	str	r2, [r7, #24]
 8002ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	6979      	ldr	r1, [r7, #20]
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	613b      	str	r3, [r7, #16]
   return(result);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e5      	bne.n	8002eb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ef2:	bf00      	nop
 8002ef4:	3754      	adds	r7, #84	; 0x54
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7ff ff09 	bl	8002d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b21      	cmp	r3, #33	; 0x21
 8002f38:	d13e      	bne.n	8002fb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f42:	d114      	bne.n	8002f6e <UART_Transmit_IT+0x48>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d110      	bne.n	8002f6e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	1c9a      	adds	r2, r3, #2
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	621a      	str	r2, [r3, #32]
 8002f6c:	e008      	b.n	8002f80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	1c59      	adds	r1, r3, #1
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6211      	str	r1, [r2, #32]
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10f      	bne.n	8002fb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e000      	b.n	8002fba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff fe8e 	bl	8002d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b08c      	sub	sp, #48	; 0x30
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b22      	cmp	r3, #34	; 0x22
 8003008:	f040 80ab 	bne.w	8003162 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003014:	d117      	bne.n	8003046 <UART_Receive_IT+0x50>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d113      	bne.n	8003046 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003034:	b29a      	uxth	r2, r3
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	1c9a      	adds	r2, r3, #2
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
 8003044:	e026      	b.n	8003094 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800304c:	2300      	movs	r3, #0
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003058:	d007      	beq.n	800306a <UART_Receive_IT+0x74>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <UART_Receive_IT+0x82>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	e008      	b.n	800308a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003084:	b2da      	uxtb	r2, r3
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29b      	uxth	r3, r3
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4619      	mov	r1, r3
 80030a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d15a      	bne.n	800315e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0220 	bic.w	r2, r2, #32
 80030b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d135      	bne.n	8003154 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	613b      	str	r3, [r7, #16]
   return(result);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f023 0310 	bic.w	r3, r3, #16
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	623a      	str	r2, [r7, #32]
 8003110:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	69f9      	ldr	r1, [r7, #28]
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	61bb      	str	r3, [r7, #24]
   return(result);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e5      	bne.n	80030ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b10      	cmp	r3, #16
 800312e:	d10a      	bne.n	8003146 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800314a:	4619      	mov	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fdf9 	bl	8002d44 <HAL_UARTEx_RxEventCallback>
 8003152:	e002      	b.n	800315a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff fde1 	bl	8002d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e002      	b.n	8003164 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	3730      	adds	r7, #48	; 0x30
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800316c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003170:	b09f      	sub	sp, #124	; 0x7c
 8003172:	af00      	add	r7, sp, #0
 8003174:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003182:	68d9      	ldr	r1, [r3, #12]
 8003184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	ea40 0301 	orr.w	r3, r0, r1
 800318c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	431a      	orrs	r2, r3
 8003198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	431a      	orrs	r2, r3
 800319e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80031a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031b0:	f021 010c 	bic.w	r1, r1, #12
 80031b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ba:	430b      	orrs	r3, r1
 80031bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ca:	6999      	ldr	r1, [r3, #24]
 80031cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	ea40 0301 	orr.w	r3, r0, r1
 80031d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4bc5      	ldr	r3, [pc, #788]	; (80034f0 <UART_SetConfig+0x384>)
 80031dc:	429a      	cmp	r2, r3
 80031de:	d004      	beq.n	80031ea <UART_SetConfig+0x7e>
 80031e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4bc3      	ldr	r3, [pc, #780]	; (80034f4 <UART_SetConfig+0x388>)
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d103      	bne.n	80031f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031ea:	f7ff f969 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 80031ee:	6778      	str	r0, [r7, #116]	; 0x74
 80031f0:	e002      	b.n	80031f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031f2:	f7ff f951 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 80031f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003200:	f040 80b6 	bne.w	8003370 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003206:	461c      	mov	r4, r3
 8003208:	f04f 0500 	mov.w	r5, #0
 800320c:	4622      	mov	r2, r4
 800320e:	462b      	mov	r3, r5
 8003210:	1891      	adds	r1, r2, r2
 8003212:	6439      	str	r1, [r7, #64]	; 0x40
 8003214:	415b      	adcs	r3, r3
 8003216:	647b      	str	r3, [r7, #68]	; 0x44
 8003218:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800321c:	1912      	adds	r2, r2, r4
 800321e:	eb45 0303 	adc.w	r3, r5, r3
 8003222:	f04f 0000 	mov.w	r0, #0
 8003226:	f04f 0100 	mov.w	r1, #0
 800322a:	00d9      	lsls	r1, r3, #3
 800322c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003230:	00d0      	lsls	r0, r2, #3
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	1911      	adds	r1, r2, r4
 8003238:	6639      	str	r1, [r7, #96]	; 0x60
 800323a:	416b      	adcs	r3, r5
 800323c:	667b      	str	r3, [r7, #100]	; 0x64
 800323e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	1891      	adds	r1, r2, r2
 800324a:	63b9      	str	r1, [r7, #56]	; 0x38
 800324c:	415b      	adcs	r3, r3
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003254:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003258:	f7fd f81a 	bl	8000290 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4ba5      	ldr	r3, [pc, #660]	; (80034f8 <UART_SetConfig+0x38c>)
 8003262:	fba3 2302 	umull	r2, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	011e      	lsls	r6, r3, #4
 800326a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326c:	461c      	mov	r4, r3
 800326e:	f04f 0500 	mov.w	r5, #0
 8003272:	4622      	mov	r2, r4
 8003274:	462b      	mov	r3, r5
 8003276:	1891      	adds	r1, r2, r2
 8003278:	6339      	str	r1, [r7, #48]	; 0x30
 800327a:	415b      	adcs	r3, r3
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
 800327e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003282:	1912      	adds	r2, r2, r4
 8003284:	eb45 0303 	adc.w	r3, r5, r3
 8003288:	f04f 0000 	mov.w	r0, #0
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	00d9      	lsls	r1, r3, #3
 8003292:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003296:	00d0      	lsls	r0, r2, #3
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	1911      	adds	r1, r2, r4
 800329e:	65b9      	str	r1, [r7, #88]	; 0x58
 80032a0:	416b      	adcs	r3, r5
 80032a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	461a      	mov	r2, r3
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	1891      	adds	r1, r2, r2
 80032b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80032b2:	415b      	adcs	r3, r3
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032be:	f7fc ffe7 	bl	8000290 <__aeabi_uldivmod>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4b8c      	ldr	r3, [pc, #560]	; (80034f8 <UART_SetConfig+0x38c>)
 80032c8:	fba3 1302 	umull	r1, r3, r3, r2
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	2164      	movs	r1, #100	; 0x64
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	3332      	adds	r3, #50	; 0x32
 80032da:	4a87      	ldr	r2, [pc, #540]	; (80034f8 <UART_SetConfig+0x38c>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032e8:	441e      	add	r6, r3
 80032ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ec:	4618      	mov	r0, r3
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	1894      	adds	r4, r2, r2
 80032f8:	623c      	str	r4, [r7, #32]
 80032fa:	415b      	adcs	r3, r3
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003302:	1812      	adds	r2, r2, r0
 8003304:	eb41 0303 	adc.w	r3, r1, r3
 8003308:	f04f 0400 	mov.w	r4, #0
 800330c:	f04f 0500 	mov.w	r5, #0
 8003310:	00dd      	lsls	r5, r3, #3
 8003312:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003316:	00d4      	lsls	r4, r2, #3
 8003318:	4622      	mov	r2, r4
 800331a:	462b      	mov	r3, r5
 800331c:	1814      	adds	r4, r2, r0
 800331e:	653c      	str	r4, [r7, #80]	; 0x50
 8003320:	414b      	adcs	r3, r1
 8003322:	657b      	str	r3, [r7, #84]	; 0x54
 8003324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	461a      	mov	r2, r3
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	1891      	adds	r1, r2, r2
 8003330:	61b9      	str	r1, [r7, #24]
 8003332:	415b      	adcs	r3, r3
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800333a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800333e:	f7fc ffa7 	bl	8000290 <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4b6c      	ldr	r3, [pc, #432]	; (80034f8 <UART_SetConfig+0x38c>)
 8003348:	fba3 1302 	umull	r1, r3, r3, r2
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	2164      	movs	r1, #100	; 0x64
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	3332      	adds	r3, #50	; 0x32
 800335a:	4a67      	ldr	r2, [pc, #412]	; (80034f8 <UART_SetConfig+0x38c>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4432      	add	r2, r6
 800336c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800336e:	e0b9      	b.n	80034e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003372:	461c      	mov	r4, r3
 8003374:	f04f 0500 	mov.w	r5, #0
 8003378:	4622      	mov	r2, r4
 800337a:	462b      	mov	r3, r5
 800337c:	1891      	adds	r1, r2, r2
 800337e:	6139      	str	r1, [r7, #16]
 8003380:	415b      	adcs	r3, r3
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003388:	1912      	adds	r2, r2, r4
 800338a:	eb45 0303 	adc.w	r3, r5, r3
 800338e:	f04f 0000 	mov.w	r0, #0
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	00d9      	lsls	r1, r3, #3
 8003398:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800339c:	00d0      	lsls	r0, r2, #3
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	eb12 0804 	adds.w	r8, r2, r4
 80033a6:	eb43 0905 	adc.w	r9, r3, r5
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	008b      	lsls	r3, r1, #2
 80033be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033c2:	0082      	lsls	r2, r0, #2
 80033c4:	4640      	mov	r0, r8
 80033c6:	4649      	mov	r1, r9
 80033c8:	f7fc ff62 	bl	8000290 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4b49      	ldr	r3, [pc, #292]	; (80034f8 <UART_SetConfig+0x38c>)
 80033d2:	fba3 2302 	umull	r2, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	011e      	lsls	r6, r3, #4
 80033da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033dc:	4618      	mov	r0, r3
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	1894      	adds	r4, r2, r2
 80033e8:	60bc      	str	r4, [r7, #8]
 80033ea:	415b      	adcs	r3, r3
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f2:	1812      	adds	r2, r2, r0
 80033f4:	eb41 0303 	adc.w	r3, r1, r3
 80033f8:	f04f 0400 	mov.w	r4, #0
 80033fc:	f04f 0500 	mov.w	r5, #0
 8003400:	00dd      	lsls	r5, r3, #3
 8003402:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003406:	00d4      	lsls	r4, r2, #3
 8003408:	4622      	mov	r2, r4
 800340a:	462b      	mov	r3, r5
 800340c:	1814      	adds	r4, r2, r0
 800340e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003410:	414b      	adcs	r3, r1
 8003412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4618      	mov	r0, r3
 800341a:	f04f 0100 	mov.w	r1, #0
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	008b      	lsls	r3, r1, #2
 8003428:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800342c:	0082      	lsls	r2, r0, #2
 800342e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003432:	f7fc ff2d 	bl	8000290 <__aeabi_uldivmod>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4b2f      	ldr	r3, [pc, #188]	; (80034f8 <UART_SetConfig+0x38c>)
 800343c:	fba3 1302 	umull	r1, r3, r3, r2
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	2164      	movs	r1, #100	; 0x64
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	3332      	adds	r3, #50	; 0x32
 800344e:	4a2a      	ldr	r2, [pc, #168]	; (80034f8 <UART_SetConfig+0x38c>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345a:	441e      	add	r6, r3
 800345c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800345e:	4618      	mov	r0, r3
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	1894      	adds	r4, r2, r2
 800346a:	603c      	str	r4, [r7, #0]
 800346c:	415b      	adcs	r3, r3
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003474:	1812      	adds	r2, r2, r0
 8003476:	eb41 0303 	adc.w	r3, r1, r3
 800347a:	f04f 0400 	mov.w	r4, #0
 800347e:	f04f 0500 	mov.w	r5, #0
 8003482:	00dd      	lsls	r5, r3, #3
 8003484:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003488:	00d4      	lsls	r4, r2, #3
 800348a:	4622      	mov	r2, r4
 800348c:	462b      	mov	r3, r5
 800348e:	eb12 0a00 	adds.w	sl, r2, r0
 8003492:	eb43 0b01 	adc.w	fp, r3, r1
 8003496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4618      	mov	r0, r3
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	008b      	lsls	r3, r1, #2
 80034aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034ae:	0082      	lsls	r2, r0, #2
 80034b0:	4650      	mov	r0, sl
 80034b2:	4659      	mov	r1, fp
 80034b4:	f7fc feec 	bl	8000290 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <UART_SetConfig+0x38c>)
 80034be:	fba3 1302 	umull	r1, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2164      	movs	r1, #100	; 0x64
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	3332      	adds	r3, #50	; 0x32
 80034d0:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <UART_SetConfig+0x38c>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	f003 020f 	and.w	r2, r3, #15
 80034dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4432      	add	r2, r6
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	377c      	adds	r7, #124	; 0x7c
 80034e8:	46bd      	mov	sp, r7
 80034ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ee:	bf00      	nop
 80034f0:	40011000 	.word	0x40011000
 80034f4:	40011400 	.word	0x40011400
 80034f8:	51eb851f 	.word	0x51eb851f

080034fc <send_nitro_data_to_bluetooth>:
#include "bluetooth_driver.h"
#include "main.h"

UART_HandleTypeDef huart1;

void send_nitro_data_to_bluetooth(uint8_t data){
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]

	char send_nitro[16];

	if(1 == data){
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d106      	bne.n	800351a <send_nitro_data_to_bluetooth+0x1e>
		HAL_UART_Transmit(&huart1, (uint8_t*)"N: NULL\n", strlen("N: NULL\n"), 50);
 800350c:	2332      	movs	r3, #50	; 0x32
 800350e:	2208      	movs	r2, #8
 8003510:	490e      	ldr	r1, [pc, #56]	; (800354c <send_nitro_data_to_bluetooth+0x50>)
 8003512:	480f      	ldr	r0, [pc, #60]	; (8003550 <send_nitro_data_to_bluetooth+0x54>)
 8003514:	f7ff f835 	bl	8002582 <HAL_UART_Transmit>
	}
	else{
		sprintf(send_nitro, "N: %d\n", data);
		HAL_UART_Transmit(&huart1, (uint8_t*)send_nitro, strlen(send_nitro), 50);
	}
}
 8003518:	e013      	b.n	8003542 <send_nitro_data_to_bluetooth+0x46>
		sprintf(send_nitro, "N: %d\n", data);
 800351a:	79fa      	ldrb	r2, [r7, #7]
 800351c:	f107 0308 	add.w	r3, r7, #8
 8003520:	490c      	ldr	r1, [pc, #48]	; (8003554 <send_nitro_data_to_bluetooth+0x58>)
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fc7e 	bl	8003e24 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)send_nitro, strlen(send_nitro), 50);
 8003528:	f107 0308 	add.w	r3, r7, #8
 800352c:	4618      	mov	r0, r3
 800352e:	f7fc fe57 	bl	80001e0 <strlen>
 8003532:	4603      	mov	r3, r0
 8003534:	b29a      	uxth	r2, r3
 8003536:	f107 0108 	add.w	r1, r7, #8
 800353a:	2332      	movs	r3, #50	; 0x32
 800353c:	4804      	ldr	r0, [pc, #16]	; (8003550 <send_nitro_data_to_bluetooth+0x54>)
 800353e:	f7ff f820 	bl	8002582 <HAL_UART_Transmit>
}
 8003542:	bf00      	nop
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	080046f8 	.word	0x080046f8
 8003550:	20000158 	.word	0x20000158
 8003554:	08004704 	.word	0x08004704

08003558 <send_phos_data_to_bluetooth>:

void send_phos_data_to_bluetooth(uint8_t data){
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]

	char send_phos[16];

	if(1 == data){
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <send_phos_data_to_bluetooth+0x1e>
		HAL_UART_Transmit(&huart1, (uint8_t*)"P: NULL\n", strlen("P: NULL\n"), 50);
 8003568:	2332      	movs	r3, #50	; 0x32
 800356a:	2208      	movs	r2, #8
 800356c:	490e      	ldr	r1, [pc, #56]	; (80035a8 <send_phos_data_to_bluetooth+0x50>)
 800356e:	480f      	ldr	r0, [pc, #60]	; (80035ac <send_phos_data_to_bluetooth+0x54>)
 8003570:	f7ff f807 	bl	8002582 <HAL_UART_Transmit>
	}
	else{
		sprintf(send_phos, "P: %d\n", data);
		HAL_UART_Transmit(&huart1, (uint8_t*)send_phos, strlen(send_phos), 50);
	}
}
 8003574:	e013      	b.n	800359e <send_phos_data_to_bluetooth+0x46>
		sprintf(send_phos, "P: %d\n", data);
 8003576:	79fa      	ldrb	r2, [r7, #7]
 8003578:	f107 0308 	add.w	r3, r7, #8
 800357c:	490c      	ldr	r1, [pc, #48]	; (80035b0 <send_phos_data_to_bluetooth+0x58>)
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fc50 	bl	8003e24 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)send_phos, strlen(send_phos), 50);
 8003584:	f107 0308 	add.w	r3, r7, #8
 8003588:	4618      	mov	r0, r3
 800358a:	f7fc fe29 	bl	80001e0 <strlen>
 800358e:	4603      	mov	r3, r0
 8003590:	b29a      	uxth	r2, r3
 8003592:	f107 0108 	add.w	r1, r7, #8
 8003596:	2332      	movs	r3, #50	; 0x32
 8003598:	4804      	ldr	r0, [pc, #16]	; (80035ac <send_phos_data_to_bluetooth+0x54>)
 800359a:	f7fe fff2 	bl	8002582 <HAL_UART_Transmit>
}
 800359e:	bf00      	nop
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	0800470c 	.word	0x0800470c
 80035ac:	20000158 	.word	0x20000158
 80035b0:	08004718 	.word	0x08004718

080035b4 <send_pota_data_to_bluetooth>:

void send_pota_data_to_bluetooth(uint8_t data){
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]

	char send_pota[16];

	if(1 == data){
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d106      	bne.n	80035d2 <send_pota_data_to_bluetooth+0x1e>
		HAL_UART_Transmit(&huart1, (uint8_t*)"K: NULL\n", strlen("K: NULL\n"), 50);
 80035c4:	2332      	movs	r3, #50	; 0x32
 80035c6:	2208      	movs	r2, #8
 80035c8:	490e      	ldr	r1, [pc, #56]	; (8003604 <send_pota_data_to_bluetooth+0x50>)
 80035ca:	480f      	ldr	r0, [pc, #60]	; (8003608 <send_pota_data_to_bluetooth+0x54>)
 80035cc:	f7fe ffd9 	bl	8002582 <HAL_UART_Transmit>
	}
	else{
		sprintf(send_pota, "K: %d\n", data);
		HAL_UART_Transmit(&huart1, (uint8_t*)send_pota, strlen(send_pota), 50);
	}
}
 80035d0:	e013      	b.n	80035fa <send_pota_data_to_bluetooth+0x46>
		sprintf(send_pota, "K: %d\n", data);
 80035d2:	79fa      	ldrb	r2, [r7, #7]
 80035d4:	f107 0308 	add.w	r3, r7, #8
 80035d8:	490c      	ldr	r1, [pc, #48]	; (800360c <send_pota_data_to_bluetooth+0x58>)
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fc22 	bl	8003e24 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)send_pota, strlen(send_pota), 50);
 80035e0:	f107 0308 	add.w	r3, r7, #8
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fc fdfb 	bl	80001e0 <strlen>
 80035ea:	4603      	mov	r3, r0
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	f107 0108 	add.w	r1, r7, #8
 80035f2:	2332      	movs	r3, #50	; 0x32
 80035f4:	4804      	ldr	r0, [pc, #16]	; (8003608 <send_pota_data_to_bluetooth+0x54>)
 80035f6:	f7fe ffc4 	bl	8002582 <HAL_UART_Transmit>
}
 80035fa:	bf00      	nop
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	08004720 	.word	0x08004720
 8003608:	20000158 	.word	0x20000158
 800360c:	0800472c 	.word	0x0800472c

08003610 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <DWT_Delay_us+0x48>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800361e:	f7fe ff2f 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 8003622:	4603      	mov	r3, r0
 8003624:	4a0d      	ldr	r2, [pc, #52]	; (800365c <DWT_Delay_us+0x4c>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0c9b      	lsrs	r3, r3, #18
 800362c:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8003638:	bf00      	nop
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <DWT_Delay_us+0x48>)
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad2      	subs	r2, r2, r3
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	1acb      	subs	r3, r1, r3
 8003648:	429a      	cmp	r2, r3
 800364a:	d3f6      	bcc.n	800363a <DWT_Delay_us+0x2a>
}
 800364c:	bf00      	nop
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e0001000 	.word	0xe0001000
 800365c:	431bde83 	.word	0x431bde83

08003660 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <DWT_Delay_ms+0x44>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 800366e:	f7fe ff07 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 8003672:	4603      	mov	r3, r0
 8003674:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <DWT_Delay_ms+0x48>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	099b      	lsrs	r3, r3, #6
 800367c:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8003688:	bf00      	nop
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <DWT_Delay_ms+0x44>)
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad2      	subs	r2, r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	d3f8      	bcc.n	800368a <DWT_Delay_ms+0x2a>
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	e0001000 	.word	0xe0001000
 80036a8:	10624dd3 	.word	0x10624dd3

080036ac <LCD_DATA>:
#include "../util/DWT_Delay.h"

//-----[ Alphanumeric LCD 16x2 Routines ]-----

void LCD_DATA(unsigned char Data)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <LCD_DATA+0x26>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <LCD_DATA+0xc4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <LCD_DATA+0xc4>)
 80036c6:	8891      	ldrh	r1, [r2, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fa7e 	bl	8001bcc <HAL_GPIO_WritePin>
 80036d0:	e007      	b.n	80036e2 <LCD_DATA+0x36>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 80036d2:	4b27      	ldr	r3, [pc, #156]	; (8003770 <LCD_DATA+0xc4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a26      	ldr	r2, [pc, #152]	; (8003770 <LCD_DATA+0xc4>)
 80036d8:	8891      	ldrh	r1, [r2, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe fa75 	bl	8001bcc <HAL_GPIO_WritePin>
    if(Data & 2)
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <LCD_DATA+0x52>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 80036ec:	4b20      	ldr	r3, [pc, #128]	; (8003770 <LCD_DATA+0xc4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <LCD_DATA+0xc4>)
 80036f2:	88d1      	ldrh	r1, [r2, #6]
 80036f4:	2201      	movs	r2, #1
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fa68 	bl	8001bcc <HAL_GPIO_WritePin>
 80036fc:	e007      	b.n	800370e <LCD_DATA+0x62>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <LCD_DATA+0xc4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1b      	ldr	r2, [pc, #108]	; (8003770 <LCD_DATA+0xc4>)
 8003704:	88d1      	ldrh	r1, [r2, #6]
 8003706:	2200      	movs	r2, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe fa5f 	bl	8001bcc <HAL_GPIO_WritePin>
    if(Data & 4)
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <LCD_DATA+0x7e>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 8003718:	4b15      	ldr	r3, [pc, #84]	; (8003770 <LCD_DATA+0xc4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a14      	ldr	r2, [pc, #80]	; (8003770 <LCD_DATA+0xc4>)
 800371e:	8911      	ldrh	r1, [r2, #8]
 8003720:	2201      	movs	r2, #1
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fa52 	bl	8001bcc <HAL_GPIO_WritePin>
 8003728:	e007      	b.n	800373a <LCD_DATA+0x8e>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <LCD_DATA+0xc4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <LCD_DATA+0xc4>)
 8003730:	8911      	ldrh	r1, [r2, #8]
 8003732:	2200      	movs	r2, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe fa49 	bl	8001bcc <HAL_GPIO_WritePin>
    if(Data & 8)
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <LCD_DATA+0xaa>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 1);
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <LCD_DATA+0xc4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a09      	ldr	r2, [pc, #36]	; (8003770 <LCD_DATA+0xc4>)
 800374a:	8951      	ldrh	r1, [r2, #10]
 800374c:	2201      	movs	r2, #1
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fa3c 	bl	8001bcc <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
}
 8003754:	e007      	b.n	8003766 <LCD_DATA+0xba>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <LCD_DATA+0xc4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a05      	ldr	r2, [pc, #20]	; (8003770 <LCD_DATA+0xc4>)
 800375c:	8951      	ldrh	r1, [r2, #10]
 800375e:	2200      	movs	r2, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fa33 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	0800476c 	.word	0x0800476c

08003774 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <LCD_CMD+0x60>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <LCD_CMD+0x60>)
 8003784:	89d1      	ldrh	r1, [r2, #14]
 8003786:	2200      	movs	r2, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe fa1f 	bl	8001bcc <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff8b 	bl	80036ac <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8003796:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <LCD_CMD+0x60>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <LCD_CMD+0x60>)
 800379c:	8991      	ldrh	r1, [r2, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe fa13 	bl	8001bcc <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <LCD_CMD+0x60>)
 80037a8:	8a1b      	ldrh	r3, [r3, #16]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff ff30 	bl	8003610 <DWT_Delay_us>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <LCD_CMD+0x60>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <LCD_CMD+0x60>)
 80037b6:	8991      	ldrh	r1, [r2, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe fa06 	bl	8001bcc <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <LCD_CMD+0x60>)
 80037c2:	8a1b      	ldrh	r3, [r3, #16]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff23 	bl	8003610 <DWT_Delay_us>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	0800476c 	.word	0x0800476c

080037d8 <LCD_Clear>:
void LCD_Clear()
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 80037dc:	2000      	movs	r0, #0
 80037de:	f7ff ffc9 	bl	8003774 <LCD_CMD>
    LCD_CMD(1);
 80037e2:	2001      	movs	r0, #1
 80037e4:	f7ff ffc6 	bl	8003774 <LCD_CMD>
}
 80037e8:	bf00      	nop
 80037ea:	bd80      	pop	{r7, pc}

080037ec <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	460a      	mov	r2, r1
 80037f6:	71fb      	strb	r3, [r7, #7]
 80037f8:	4613      	mov	r3, r2
 80037fa:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d111      	bne.n	8003826 <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8003802:	79bb      	ldrb	r3, [r7, #6]
 8003804:	337f      	adds	r3, #127	; 0x7f
 8003806:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8003816:	7bbb      	ldrb	r3, [r7, #14]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ffab 	bl	8003774 <LCD_CMD>
      LCD_CMD(Low4);
 800381e:	7b7b      	ldrb	r3, [r7, #13]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ffa7 	bl	8003774 <LCD_CMD>
    }
    if(r == 2)
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d111      	bne.n	8003850 <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 800382c:	79bb      	ldrb	r3, [r7, #6]
 800382e:	3b41      	subs	r3, #65	; 0x41
 8003830:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8003840:	7bbb      	ldrb	r3, [r7, #14]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ff96 	bl	8003774 <LCD_CMD>
      LCD_CMD(Low4);
 8003848:	7b7b      	ldrb	r3, [r7, #13]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff ff92 	bl	8003774 <LCD_CMD>
    }
    DWT_Delay_ms(1);
 8003850:	2001      	movs	r0, #1
 8003852:	f7ff ff05 	bl	8003660 <DWT_Delay_ms>
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <LCD_Init>:
void LCD_Init()
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	611a      	str	r2, [r3, #16]
	// Initialize The DWT Delay Function Which Will Be Used Later On
	DWT_Delay_Init();
 8003876:	f000 fa73 	bl	8003d60 <DWT_Delay_Init>
    // IO Pin Configurations
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 800387a:	4b74      	ldr	r3, [pc, #464]	; (8003a4c <LCD_Init+0x1ec>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a74      	ldr	r2, [pc, #464]	; (8003a50 <LCD_Init+0x1f0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10e      	bne.n	80038a2 <LCD_Init+0x42>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	4b72      	ldr	r3, [pc, #456]	; (8003a54 <LCD_Init+0x1f4>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	4a71      	ldr	r2, [pc, #452]	; (8003a54 <LCD_Init+0x1f4>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6313      	str	r3, [r2, #48]	; 0x30
 8003894:	4b6f      	ldr	r3, [pc, #444]	; (8003a54 <LCD_Init+0x1f4>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	e03a      	b.n	8003918 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 80038a2:	4b6a      	ldr	r3, [pc, #424]	; (8003a4c <LCD_Init+0x1ec>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6c      	ldr	r2, [pc, #432]	; (8003a58 <LCD_Init+0x1f8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d10e      	bne.n	80038ca <LCD_Init+0x6a>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	4b68      	ldr	r3, [pc, #416]	; (8003a54 <LCD_Init+0x1f4>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	4a67      	ldr	r2, [pc, #412]	; (8003a54 <LCD_Init+0x1f4>)
 80038b6:	f043 0302 	orr.w	r3, r3, #2
 80038ba:	6313      	str	r3, [r2, #48]	; 0x30
 80038bc:	4b65      	ldr	r3, [pc, #404]	; (8003a54 <LCD_Init+0x1f4>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	e026      	b.n	8003918 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 80038ca:	4b60      	ldr	r3, [pc, #384]	; (8003a4c <LCD_Init+0x1ec>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a63      	ldr	r2, [pc, #396]	; (8003a5c <LCD_Init+0x1fc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d10e      	bne.n	80038f2 <LCD_Init+0x92>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80038d4:	2300      	movs	r3, #0
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	4b5e      	ldr	r3, [pc, #376]	; (8003a54 <LCD_Init+0x1f4>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <LCD_Init+0x1f4>)
 80038de:	f043 0304 	orr.w	r3, r3, #4
 80038e2:	6313      	str	r3, [r2, #48]	; 0x30
 80038e4:	4b5b      	ldr	r3, [pc, #364]	; (8003a54 <LCD_Init+0x1f4>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	e012      	b.n	8003918 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 80038f2:	4b56      	ldr	r3, [pc, #344]	; (8003a4c <LCD_Init+0x1ec>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5a      	ldr	r2, [pc, #360]	; (8003a60 <LCD_Init+0x200>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10d      	bne.n	8003918 <LCD_Init+0xb8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80038fc:	2300      	movs	r3, #0
 80038fe:	607b      	str	r3, [r7, #4]
 8003900:	4b54      	ldr	r3, [pc, #336]	; (8003a54 <LCD_Init+0x1f4>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	4a53      	ldr	r2, [pc, #332]	; (8003a54 <LCD_Init+0x1f4>)
 8003906:	f043 0308 	orr.w	r3, r3, #8
 800390a:	6313      	str	r3, [r2, #48]	; 0x30
 800390c:	4b51      	ldr	r3, [pc, #324]	; (8003a54 <LCD_Init+0x1f4>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	607b      	str	r3, [r7, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 8003918:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <LCD_Init+0x1ec>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a4b      	ldr	r2, [pc, #300]	; (8003a4c <LCD_Init+0x1ec>)
 800391e:	8891      	ldrh	r1, [r2, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe f952 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 8003928:	4b48      	ldr	r3, [pc, #288]	; (8003a4c <LCD_Init+0x1ec>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a47      	ldr	r2, [pc, #284]	; (8003a4c <LCD_Init+0x1ec>)
 800392e:	88d1      	ldrh	r1, [r2, #6]
 8003930:	2200      	movs	r2, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe f94a 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 8003938:	4b44      	ldr	r3, [pc, #272]	; (8003a4c <LCD_Init+0x1ec>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a43      	ldr	r2, [pc, #268]	; (8003a4c <LCD_Init+0x1ec>)
 800393e:	8911      	ldrh	r1, [r2, #8]
 8003940:	2200      	movs	r2, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe f942 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 8003948:	4b40      	ldr	r3, [pc, #256]	; (8003a4c <LCD_Init+0x1ec>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a3f      	ldr	r2, [pc, #252]	; (8003a4c <LCD_Init+0x1ec>)
 800394e:	8951      	ldrh	r1, [r2, #10]
 8003950:	2200      	movs	r2, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe f93a 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8003958:	4b3c      	ldr	r3, [pc, #240]	; (8003a4c <LCD_Init+0x1ec>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3b      	ldr	r2, [pc, #236]	; (8003a4c <LCD_Init+0x1ec>)
 800395e:	89d1      	ldrh	r1, [r2, #14]
 8003960:	2200      	movs	r2, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe f932 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 8003968:	4b38      	ldr	r3, [pc, #224]	; (8003a4c <LCD_Init+0x1ec>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a37      	ldr	r2, [pc, #220]	; (8003a4c <LCD_Init+0x1ec>)
 800396e:	8991      	ldrh	r1, [r2, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe f92a 	bl	8001bcc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8003978:	4b34      	ldr	r3, [pc, #208]	; (8003a4c <LCD_Init+0x1ec>)
 800397a:	889a      	ldrh	r2, [r3, #4]
 800397c:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <LCD_Init+0x1ec>)
 800397e:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8003980:	4313      	orrs	r3, r2
 8003982:	b29a      	uxth	r2, r3
 8003984:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <LCD_Init+0x1ec>)
 8003986:	891b      	ldrh	r3, [r3, #8]
 8003988:	4313      	orrs	r3, r2
 800398a:	b29a      	uxth	r2, r3
 800398c:	4b2f      	ldr	r3, [pc, #188]	; (8003a4c <LCD_Init+0x1ec>)
 800398e:	895b      	ldrh	r3, [r3, #10]
 8003990:	4313      	orrs	r3, r2
 8003992:	b29a      	uxth	r2, r3
 8003994:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <LCD_Init+0x1ec>)
 8003996:	89db      	ldrh	r3, [r3, #14]
 8003998:	4313      	orrs	r3, r2
 800399a:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <LCD_Init+0x1ec>)
 800399e:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 80039a0:	4313      	orrs	r3, r2
 80039a2:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 80039a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a6:	2301      	movs	r3, #1
 80039a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ae:	2300      	movs	r3, #0
 80039b0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 80039b2:	4b26      	ldr	r3, [pc, #152]	; (8003a4c <LCD_Init+0x1ec>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f107 0214 	add.w	r2, r7, #20
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd ff81 	bl	80018c4 <HAL_GPIO_Init>

	// The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 80039c2:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <LCD_Init+0x1ec>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <LCD_Init+0x1ec>)
 80039c8:	89d1      	ldrh	r1, [r2, #14]
 80039ca:	2200      	movs	r2, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe f8fd 	bl	8001bcc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 80039d2:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <LCD_Init+0x1ec>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <LCD_Init+0x1ec>)
 80039d8:	8991      	ldrh	r1, [r2, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe f8f5 	bl	8001bcc <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 80039e2:	2000      	movs	r0, #0
 80039e4:	f7ff fe62 	bl	80036ac <LCD_DATA>
    DWT_Delay_ms(150);
 80039e8:	2096      	movs	r0, #150	; 0x96
 80039ea:	f7ff fe39 	bl	8003660 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80039ee:	2003      	movs	r0, #3
 80039f0:	f7ff fec0 	bl	8003774 <LCD_CMD>
    DWT_Delay_ms(5);
 80039f4:	2005      	movs	r0, #5
 80039f6:	f7ff fe33 	bl	8003660 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80039fa:	2003      	movs	r0, #3
 80039fc:	f7ff feba 	bl	8003774 <LCD_CMD>
    DWT_Delay_us(150);
 8003a00:	2096      	movs	r0, #150	; 0x96
 8003a02:	f7ff fe05 	bl	8003610 <DWT_Delay_us>
    LCD_CMD(0x03);
 8003a06:	2003      	movs	r0, #3
 8003a08:	f7ff feb4 	bl	8003774 <LCD_CMD>
    LCD_CMD(0x02);
 8003a0c:	2002      	movs	r0, #2
 8003a0e:	f7ff feb1 	bl	8003774 <LCD_CMD>
    LCD_CMD(0x02);
 8003a12:	2002      	movs	r0, #2
 8003a14:	f7ff feae 	bl	8003774 <LCD_CMD>
    LCD_CMD(0x08);
 8003a18:	2008      	movs	r0, #8
 8003a1a:	f7ff feab 	bl	8003774 <LCD_CMD>
    LCD_CMD(0x00);
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7ff fea8 	bl	8003774 <LCD_CMD>
    LCD_CMD(0x0C);
 8003a24:	200c      	movs	r0, #12
 8003a26:	f7ff fea5 	bl	8003774 <LCD_CMD>
    LCD_CMD(0x00);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7ff fea2 	bl	8003774 <LCD_CMD>
    LCD_CMD(0x06);
 8003a30:	2006      	movs	r0, #6
 8003a32:	f7ff fe9f 	bl	8003774 <LCD_CMD>
    LCD_CMD(0x00);
 8003a36:	2000      	movs	r0, #0
 8003a38:	f7ff fe9c 	bl	8003774 <LCD_CMD>
    LCD_CMD(0x01);
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	f7ff fe99 	bl	8003774 <LCD_CMD>
}
 8003a42:	bf00      	nop
 8003a44:	3728      	adds	r7, #40	; 0x28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	0800476c 	.word	0x0800476c
 8003a50:	40020000 	.word	0x40020000
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40020400 	.word	0x40020400
 8003a5c:	40020800 	.word	0x40020800
 8003a60:	40020c00 	.word	0x40020c00

08003a64 <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	f023 030f 	bic.w	r3, r3, #15
 8003a7c:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 8003a7e:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a24      	ldr	r2, [pc, #144]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003a84:	89d1      	ldrh	r1, [r2, #14]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe f89f 	bl	8001bcc <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 8003a8e:	7bbb      	ldrb	r3, [r7, #14]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fe09 	bl	80036ac <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003aa0:	8991      	ldrh	r1, [r2, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe f891 	bl	8001bcc <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003aac:	8a1b      	ldrh	r3, [r3, #16]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fdae 	bl	8003610 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003aba:	8991      	ldrh	r1, [r2, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe f884 	bl	8001bcc <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003ac6:	8a1b      	ldrh	r3, [r3, #16]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff fda1 	bl	8003610 <DWT_Delay_us>

   LCD_DATA(Low4);
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff fdeb 	bl	80036ac <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a0e      	ldr	r2, [pc, #56]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003adc:	8991      	ldrh	r1, [r2, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe f873 	bl	8001bcc <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003ae8:	8a1b      	ldrh	r3, [r3, #16]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fd90 	bl	8003610 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003af6:	8991      	ldrh	r1, [r2, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe f866 	bl	8001bcc <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <LCD_Write_Char+0xb0>)
 8003b02:	8a1b      	ldrh	r3, [r3, #16]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fd83 	bl	8003610 <DWT_Delay_us>
}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	0800476c 	.word	0x0800476c

08003b18 <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	e009      	b.n	8003b3a <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff ff98 	bl	8003a64 <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3301      	adds	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	4413      	add	r3, r2
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1ef      	bne.n	8003b26 <LCD_Write_String+0xe>
}
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <get_nitrogen_data>:
#include "npk_driver.h"
#include "main.h"

UART_HandleTypeDef huart6;

uint8_t get_nitrogen_data(void){
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0

	uint8_t nitroAdd[] = {0x01,0x03, 0x00, 0x1e, 0x00, 0x01, 0xe4, 0x0c};
 8003b56:	4a27      	ldr	r2, [pc, #156]	; (8003bf4 <get_nitrogen_data+0xa4>)
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b60:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t nitroVal[9] = {0};
 8003b64:	2300      	movs	r3, #0
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	1d3b      	adds	r3, r7, #4
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	711a      	strb	r2, [r3, #4]
	uint8_t nitroRet;

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8003b70:	2201      	movs	r2, #1
 8003b72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b76:	4820      	ldr	r0, [pc, #128]	; (8003bf8 <get_nitrogen_data+0xa8>)
 8003b78:	f7fe f828 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b82:	481d      	ldr	r0, [pc, #116]	; (8003bf8 <get_nitrogen_data+0xa8>)
 8003b84:	f7fe f822 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003b88:	200a      	movs	r0, #10
 8003b8a:	f7fd f9e9 	bl	8000f60 <HAL_Delay>
	if(HAL_UART_Transmit(&huart6, nitroAdd, sizeof(nitroAdd),50) == HAL_OK){
 8003b8e:	f107 010c 	add.w	r1, r7, #12
 8003b92:	2332      	movs	r3, #50	; 0x32
 8003b94:	2208      	movs	r2, #8
 8003b96:	4819      	ldr	r0, [pc, #100]	; (8003bfc <get_nitrogen_data+0xac>)
 8003b98:	f7fe fcf3 	bl	8002582 <HAL_UART_Transmit>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d122      	bne.n	8003be8 <get_nitrogen_data+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ba8:	4813      	ldr	r0, [pc, #76]	; (8003bf8 <get_nitrogen_data+0xa8>)
 8003baa:	f7fe f80f 	bl	8001bcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bb4:	4810      	ldr	r0, [pc, #64]	; (8003bf8 <get_nitrogen_data+0xa8>)
 8003bb6:	f7fe f809 	bl	8001bcc <HAL_GPIO_WritePin>

		HAL_UART_Receive(&huart6, (uint8_t*)nitroVal, sizeof(nitroVal),200);
 8003bba:	4639      	mov	r1, r7
 8003bbc:	23c8      	movs	r3, #200	; 0xc8
 8003bbe:	2209      	movs	r2, #9
 8003bc0:	480e      	ldr	r0, [pc, #56]	; (8003bfc <get_nitrogen_data+0xac>)
 8003bc2:	f7fe fd70 	bl	80026a6 <HAL_UART_Receive>

		if(nitroVal[0]==0 && nitroVal[1]==1 && nitroVal[2]==3 && nitroVal[3]==2){
 8003bc6:	783b      	ldrb	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10b      	bne.n	8003be4 <get_nitrogen_data+0x94>
 8003bcc:	787b      	ldrb	r3, [r7, #1]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d108      	bne.n	8003be4 <get_nitrogen_data+0x94>
 8003bd2:	78bb      	ldrb	r3, [r7, #2]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d105      	bne.n	8003be4 <get_nitrogen_data+0x94>
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d102      	bne.n	8003be4 <get_nitrogen_data+0x94>

			nitroRet = nitroVal[5];
 8003bde:	797b      	ldrb	r3, [r7, #5]
 8003be0:	75fb      	strb	r3, [r7, #23]
 8003be2:	e001      	b.n	8003be8 <get_nitrogen_data+0x98>
		}
		else{

			nitroRet = (uint8_t)1;
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
		}
	}
	return nitroRet;
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	08004734 	.word	0x08004734
 8003bf8:	40020800 	.word	0x40020800
 8003bfc:	2000019c 	.word	0x2000019c

08003c00 <get_phosphorous_data>:

uint8_t get_phosphorous_data(void){
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0

	uint8_t phosAdd[] = {0x01,0x03, 0x00, 0x1f, 0x00, 0x01, 0xb5, 0xcc};
 8003c06:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <get_phosphorous_data+0xa4>)
 8003c08:	f107 030c 	add.w	r3, r7, #12
 8003c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c10:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t phosVal[9] = {0};
 8003c14:	2300      	movs	r3, #0
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	1d3b      	adds	r3, r7, #4
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	711a      	strb	r2, [r3, #4]
	uint8_t phosRet;

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8003c20:	2201      	movs	r2, #1
 8003c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c26:	4820      	ldr	r0, [pc, #128]	; (8003ca8 <get_phosphorous_data+0xa8>)
 8003c28:	f7fd ffd0 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c32:	481d      	ldr	r0, [pc, #116]	; (8003ca8 <get_phosphorous_data+0xa8>)
 8003c34:	f7fd ffca 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003c38:	200a      	movs	r0, #10
 8003c3a:	f7fd f991 	bl	8000f60 <HAL_Delay>
	if(HAL_UART_Transmit(&huart6, phosAdd, sizeof(phosAdd),50) == HAL_OK){
 8003c3e:	f107 010c 	add.w	r1, r7, #12
 8003c42:	2332      	movs	r3, #50	; 0x32
 8003c44:	2208      	movs	r2, #8
 8003c46:	4819      	ldr	r0, [pc, #100]	; (8003cac <get_phosphorous_data+0xac>)
 8003c48:	f7fe fc9b 	bl	8002582 <HAL_UART_Transmit>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d122      	bne.n	8003c98 <get_phosphorous_data+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8003c52:	2200      	movs	r2, #0
 8003c54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c58:	4813      	ldr	r0, [pc, #76]	; (8003ca8 <get_phosphorous_data+0xa8>)
 8003c5a:	f7fd ffb7 	bl	8001bcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c64:	4810      	ldr	r0, [pc, #64]	; (8003ca8 <get_phosphorous_data+0xa8>)
 8003c66:	f7fd ffb1 	bl	8001bcc <HAL_GPIO_WritePin>

		HAL_UART_Receive(&huart6, (uint8_t*)phosVal, sizeof(phosVal),200);
 8003c6a:	4639      	mov	r1, r7
 8003c6c:	23c8      	movs	r3, #200	; 0xc8
 8003c6e:	2209      	movs	r2, #9
 8003c70:	480e      	ldr	r0, [pc, #56]	; (8003cac <get_phosphorous_data+0xac>)
 8003c72:	f7fe fd18 	bl	80026a6 <HAL_UART_Receive>

		if(phosVal[0]==0 && phosVal[1]==1 && phosVal[2]==3 && phosVal[3]==2){
 8003c76:	783b      	ldrb	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <get_phosphorous_data+0x94>
 8003c7c:	787b      	ldrb	r3, [r7, #1]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d108      	bne.n	8003c94 <get_phosphorous_data+0x94>
 8003c82:	78bb      	ldrb	r3, [r7, #2]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d105      	bne.n	8003c94 <get_phosphorous_data+0x94>
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d102      	bne.n	8003c94 <get_phosphorous_data+0x94>

			phosRet = phosVal[5];
 8003c8e:	797b      	ldrb	r3, [r7, #5]
 8003c90:	75fb      	strb	r3, [r7, #23]
 8003c92:	e001      	b.n	8003c98 <get_phosphorous_data+0x98>
		}
		else{

			phosRet = (uint8_t)1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
		}
	}
	return phosRet;
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	0800473c 	.word	0x0800473c
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	2000019c 	.word	0x2000019c

08003cb0 <get_potassium_data>:

uint8_t get_potassium_data(void){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0

	uint8_t potaAdd[] = {0x01,0x03, 0x00, 0x20, 0x00, 0x01, 0x85, 0xc0};
 8003cb6:	4a27      	ldr	r2, [pc, #156]	; (8003d54 <get_potassium_data+0xa4>)
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cc0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t potaVal[9] = {0};
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	1d3b      	adds	r3, r7, #4
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	711a      	strb	r2, [r3, #4]
	uint8_t potaRet;

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cd6:	4820      	ldr	r0, [pc, #128]	; (8003d58 <get_potassium_data+0xa8>)
 8003cd8:	f7fd ff78 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ce2:	481d      	ldr	r0, [pc, #116]	; (8003d58 <get_potassium_data+0xa8>)
 8003ce4:	f7fd ff72 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003ce8:	200a      	movs	r0, #10
 8003cea:	f7fd f939 	bl	8000f60 <HAL_Delay>
	if(HAL_UART_Transmit(&huart6, potaAdd, sizeof(potaAdd),50) == HAL_OK){
 8003cee:	f107 010c 	add.w	r1, r7, #12
 8003cf2:	2332      	movs	r3, #50	; 0x32
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	4819      	ldr	r0, [pc, #100]	; (8003d5c <get_potassium_data+0xac>)
 8003cf8:	f7fe fc43 	bl	8002582 <HAL_UART_Transmit>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d122      	bne.n	8003d48 <get_potassium_data+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8003d02:	2200      	movs	r2, #0
 8003d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d08:	4813      	ldr	r0, [pc, #76]	; (8003d58 <get_potassium_data+0xa8>)
 8003d0a:	f7fd ff5f 	bl	8001bcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d14:	4810      	ldr	r0, [pc, #64]	; (8003d58 <get_potassium_data+0xa8>)
 8003d16:	f7fd ff59 	bl	8001bcc <HAL_GPIO_WritePin>

		HAL_UART_Receive(&huart6, (uint8_t*)potaVal, sizeof(potaVal),200);
 8003d1a:	4639      	mov	r1, r7
 8003d1c:	23c8      	movs	r3, #200	; 0xc8
 8003d1e:	2209      	movs	r2, #9
 8003d20:	480e      	ldr	r0, [pc, #56]	; (8003d5c <get_potassium_data+0xac>)
 8003d22:	f7fe fcc0 	bl	80026a6 <HAL_UART_Receive>

		if(potaVal[0]==0 && potaVal[1]==1 && potaVal[2]==3 && potaVal[3]==2){
 8003d26:	783b      	ldrb	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10b      	bne.n	8003d44 <get_potassium_data+0x94>
 8003d2c:	787b      	ldrb	r3, [r7, #1]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d108      	bne.n	8003d44 <get_potassium_data+0x94>
 8003d32:	78bb      	ldrb	r3, [r7, #2]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d105      	bne.n	8003d44 <get_potassium_data+0x94>
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d102      	bne.n	8003d44 <get_potassium_data+0x94>

			potaRet = potaVal[5];
 8003d3e:	797b      	ldrb	r3, [r7, #5]
 8003d40:	75fb      	strb	r3, [r7, #23]
 8003d42:	e001      	b.n	8003d48 <get_potassium_data+0x98>
		}
		else{

			potaRet = (uint8_t)1;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
		}

	}
	return potaRet;
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	08004744 	.word	0x08004744
 8003d58:	40020800 	.word	0x40020800
 8003d5c:	2000019c 	.word	0x2000019c

08003d60 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8003d64:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <DWT_Delay_Init+0x58>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <DWT_Delay_Init+0x58>)
 8003d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8003d70:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <DWT_Delay_Init+0x58>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <DWT_Delay_Init+0x58>)
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <DWT_Delay_Init+0x5c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <DWT_Delay_Init+0x5c>)
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <DWT_Delay_Init+0x5c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0b      	ldr	r2, [pc, #44]	; (8003dbc <DWT_Delay_Init+0x5c>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <DWT_Delay_Init+0x5c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8003d9a:	bf00      	nop
    __ASM volatile ("NOP");
 8003d9c:	bf00      	nop
    __ASM volatile ("NOP");
 8003d9e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <DWT_Delay_Init+0x5c>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8003da8:	2300      	movs	r3, #0
 8003daa:	e000      	b.n	8003dae <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8003dac:	2301      	movs	r3, #1
    }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000edf0 	.word	0xe000edf0
 8003dbc:	e0001000 	.word	0xe0001000

08003dc0 <__errno>:
 8003dc0:	4b01      	ldr	r3, [pc, #4]	; (8003dc8 <__errno+0x8>)
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	2000000c 	.word	0x2000000c

08003dcc <__libc_init_array>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	4d0d      	ldr	r5, [pc, #52]	; (8003e04 <__libc_init_array+0x38>)
 8003dd0:	4c0d      	ldr	r4, [pc, #52]	; (8003e08 <__libc_init_array+0x3c>)
 8003dd2:	1b64      	subs	r4, r4, r5
 8003dd4:	10a4      	asrs	r4, r4, #2
 8003dd6:	2600      	movs	r6, #0
 8003dd8:	42a6      	cmp	r6, r4
 8003dda:	d109      	bne.n	8003df0 <__libc_init_array+0x24>
 8003ddc:	4d0b      	ldr	r5, [pc, #44]	; (8003e0c <__libc_init_array+0x40>)
 8003dde:	4c0c      	ldr	r4, [pc, #48]	; (8003e10 <__libc_init_array+0x44>)
 8003de0:	f000 fc4e 	bl	8004680 <_init>
 8003de4:	1b64      	subs	r4, r4, r5
 8003de6:	10a4      	asrs	r4, r4, #2
 8003de8:	2600      	movs	r6, #0
 8003dea:	42a6      	cmp	r6, r4
 8003dec:	d105      	bne.n	8003dfa <__libc_init_array+0x2e>
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
 8003df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df4:	4798      	blx	r3
 8003df6:	3601      	adds	r6, #1
 8003df8:	e7ee      	b.n	8003dd8 <__libc_init_array+0xc>
 8003dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfe:	4798      	blx	r3
 8003e00:	3601      	adds	r6, #1
 8003e02:	e7f2      	b.n	8003dea <__libc_init_array+0x1e>
 8003e04:	080047bc 	.word	0x080047bc
 8003e08:	080047bc 	.word	0x080047bc
 8003e0c:	080047bc 	.word	0x080047bc
 8003e10:	080047c0 	.word	0x080047c0

08003e14 <memset>:
 8003e14:	4402      	add	r2, r0
 8003e16:	4603      	mov	r3, r0
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d100      	bne.n	8003e1e <memset+0xa>
 8003e1c:	4770      	bx	lr
 8003e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e22:	e7f9      	b.n	8003e18 <memset+0x4>

08003e24 <siprintf>:
 8003e24:	b40e      	push	{r1, r2, r3}
 8003e26:	b500      	push	{lr}
 8003e28:	b09c      	sub	sp, #112	; 0x70
 8003e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003e2c:	9002      	str	r0, [sp, #8]
 8003e2e:	9006      	str	r0, [sp, #24]
 8003e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e34:	4809      	ldr	r0, [pc, #36]	; (8003e5c <siprintf+0x38>)
 8003e36:	9107      	str	r1, [sp, #28]
 8003e38:	9104      	str	r1, [sp, #16]
 8003e3a:	4909      	ldr	r1, [pc, #36]	; (8003e60 <siprintf+0x3c>)
 8003e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e40:	9105      	str	r1, [sp, #20]
 8003e42:	6800      	ldr	r0, [r0, #0]
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	a902      	add	r1, sp, #8
 8003e48:	f000 f868 	bl	8003f1c <_svfiprintf_r>
 8003e4c:	9b02      	ldr	r3, [sp, #8]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	b01c      	add	sp, #112	; 0x70
 8003e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e58:	b003      	add	sp, #12
 8003e5a:	4770      	bx	lr
 8003e5c:	2000000c 	.word	0x2000000c
 8003e60:	ffff0208 	.word	0xffff0208

08003e64 <__ssputs_r>:
 8003e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e68:	688e      	ldr	r6, [r1, #8]
 8003e6a:	429e      	cmp	r6, r3
 8003e6c:	4682      	mov	sl, r0
 8003e6e:	460c      	mov	r4, r1
 8003e70:	4690      	mov	r8, r2
 8003e72:	461f      	mov	r7, r3
 8003e74:	d838      	bhi.n	8003ee8 <__ssputs_r+0x84>
 8003e76:	898a      	ldrh	r2, [r1, #12]
 8003e78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e7c:	d032      	beq.n	8003ee4 <__ssputs_r+0x80>
 8003e7e:	6825      	ldr	r5, [r4, #0]
 8003e80:	6909      	ldr	r1, [r1, #16]
 8003e82:	eba5 0901 	sub.w	r9, r5, r1
 8003e86:	6965      	ldr	r5, [r4, #20]
 8003e88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e90:	3301      	adds	r3, #1
 8003e92:	444b      	add	r3, r9
 8003e94:	106d      	asrs	r5, r5, #1
 8003e96:	429d      	cmp	r5, r3
 8003e98:	bf38      	it	cc
 8003e9a:	461d      	movcc	r5, r3
 8003e9c:	0553      	lsls	r3, r2, #21
 8003e9e:	d531      	bpl.n	8003f04 <__ssputs_r+0xa0>
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	f000 fb47 	bl	8004534 <_malloc_r>
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	b950      	cbnz	r0, 8003ec0 <__ssputs_r+0x5c>
 8003eaa:	230c      	movs	r3, #12
 8003eac:	f8ca 3000 	str.w	r3, [sl]
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb6:	81a3      	strh	r3, [r4, #12]
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec0:	6921      	ldr	r1, [r4, #16]
 8003ec2:	464a      	mov	r2, r9
 8003ec4:	f000 fabe 	bl	8004444 <memcpy>
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed2:	81a3      	strh	r3, [r4, #12]
 8003ed4:	6126      	str	r6, [r4, #16]
 8003ed6:	6165      	str	r5, [r4, #20]
 8003ed8:	444e      	add	r6, r9
 8003eda:	eba5 0509 	sub.w	r5, r5, r9
 8003ede:	6026      	str	r6, [r4, #0]
 8003ee0:	60a5      	str	r5, [r4, #8]
 8003ee2:	463e      	mov	r6, r7
 8003ee4:	42be      	cmp	r6, r7
 8003ee6:	d900      	bls.n	8003eea <__ssputs_r+0x86>
 8003ee8:	463e      	mov	r6, r7
 8003eea:	4632      	mov	r2, r6
 8003eec:	6820      	ldr	r0, [r4, #0]
 8003eee:	4641      	mov	r1, r8
 8003ef0:	f000 fab6 	bl	8004460 <memmove>
 8003ef4:	68a3      	ldr	r3, [r4, #8]
 8003ef6:	6822      	ldr	r2, [r4, #0]
 8003ef8:	1b9b      	subs	r3, r3, r6
 8003efa:	4432      	add	r2, r6
 8003efc:	60a3      	str	r3, [r4, #8]
 8003efe:	6022      	str	r2, [r4, #0]
 8003f00:	2000      	movs	r0, #0
 8003f02:	e7db      	b.n	8003ebc <__ssputs_r+0x58>
 8003f04:	462a      	mov	r2, r5
 8003f06:	f000 fb6f 	bl	80045e8 <_realloc_r>
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d1e1      	bne.n	8003ed4 <__ssputs_r+0x70>
 8003f10:	6921      	ldr	r1, [r4, #16]
 8003f12:	4650      	mov	r0, sl
 8003f14:	f000 fabe 	bl	8004494 <_free_r>
 8003f18:	e7c7      	b.n	8003eaa <__ssputs_r+0x46>
	...

08003f1c <_svfiprintf_r>:
 8003f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f20:	4698      	mov	r8, r3
 8003f22:	898b      	ldrh	r3, [r1, #12]
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	b09d      	sub	sp, #116	; 0x74
 8003f28:	4607      	mov	r7, r0
 8003f2a:	460d      	mov	r5, r1
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	d50e      	bpl.n	8003f4e <_svfiprintf_r+0x32>
 8003f30:	690b      	ldr	r3, [r1, #16]
 8003f32:	b963      	cbnz	r3, 8003f4e <_svfiprintf_r+0x32>
 8003f34:	2140      	movs	r1, #64	; 0x40
 8003f36:	f000 fafd 	bl	8004534 <_malloc_r>
 8003f3a:	6028      	str	r0, [r5, #0]
 8003f3c:	6128      	str	r0, [r5, #16]
 8003f3e:	b920      	cbnz	r0, 8003f4a <_svfiprintf_r+0x2e>
 8003f40:	230c      	movs	r3, #12
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295
 8003f48:	e0d1      	b.n	80040ee <_svfiprintf_r+0x1d2>
 8003f4a:	2340      	movs	r3, #64	; 0x40
 8003f4c:	616b      	str	r3, [r5, #20]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	9309      	str	r3, [sp, #36]	; 0x24
 8003f52:	2320      	movs	r3, #32
 8003f54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f58:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f5c:	2330      	movs	r3, #48	; 0x30
 8003f5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004108 <_svfiprintf_r+0x1ec>
 8003f62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f66:	f04f 0901 	mov.w	r9, #1
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	469a      	mov	sl, r3
 8003f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f72:	b10a      	cbz	r2, 8003f78 <_svfiprintf_r+0x5c>
 8003f74:	2a25      	cmp	r2, #37	; 0x25
 8003f76:	d1f9      	bne.n	8003f6c <_svfiprintf_r+0x50>
 8003f78:	ebba 0b04 	subs.w	fp, sl, r4
 8003f7c:	d00b      	beq.n	8003f96 <_svfiprintf_r+0x7a>
 8003f7e:	465b      	mov	r3, fp
 8003f80:	4622      	mov	r2, r4
 8003f82:	4629      	mov	r1, r5
 8003f84:	4638      	mov	r0, r7
 8003f86:	f7ff ff6d 	bl	8003e64 <__ssputs_r>
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	f000 80aa 	beq.w	80040e4 <_svfiprintf_r+0x1c8>
 8003f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f92:	445a      	add	r2, fp
 8003f94:	9209      	str	r2, [sp, #36]	; 0x24
 8003f96:	f89a 3000 	ldrb.w	r3, [sl]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 80a2 	beq.w	80040e4 <_svfiprintf_r+0x1c8>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003faa:	f10a 0a01 	add.w	sl, sl, #1
 8003fae:	9304      	str	r3, [sp, #16]
 8003fb0:	9307      	str	r3, [sp, #28]
 8003fb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fb6:	931a      	str	r3, [sp, #104]	; 0x68
 8003fb8:	4654      	mov	r4, sl
 8003fba:	2205      	movs	r2, #5
 8003fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fc0:	4851      	ldr	r0, [pc, #324]	; (8004108 <_svfiprintf_r+0x1ec>)
 8003fc2:	f7fc f915 	bl	80001f0 <memchr>
 8003fc6:	9a04      	ldr	r2, [sp, #16]
 8003fc8:	b9d8      	cbnz	r0, 8004002 <_svfiprintf_r+0xe6>
 8003fca:	06d0      	lsls	r0, r2, #27
 8003fcc:	bf44      	itt	mi
 8003fce:	2320      	movmi	r3, #32
 8003fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fd4:	0711      	lsls	r1, r2, #28
 8003fd6:	bf44      	itt	mi
 8003fd8:	232b      	movmi	r3, #43	; 0x2b
 8003fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fde:	f89a 3000 	ldrb.w	r3, [sl]
 8003fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe4:	d015      	beq.n	8004012 <_svfiprintf_r+0xf6>
 8003fe6:	9a07      	ldr	r2, [sp, #28]
 8003fe8:	4654      	mov	r4, sl
 8003fea:	2000      	movs	r0, #0
 8003fec:	f04f 0c0a 	mov.w	ip, #10
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ff6:	3b30      	subs	r3, #48	; 0x30
 8003ff8:	2b09      	cmp	r3, #9
 8003ffa:	d94e      	bls.n	800409a <_svfiprintf_r+0x17e>
 8003ffc:	b1b0      	cbz	r0, 800402c <_svfiprintf_r+0x110>
 8003ffe:	9207      	str	r2, [sp, #28]
 8004000:	e014      	b.n	800402c <_svfiprintf_r+0x110>
 8004002:	eba0 0308 	sub.w	r3, r0, r8
 8004006:	fa09 f303 	lsl.w	r3, r9, r3
 800400a:	4313      	orrs	r3, r2
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	46a2      	mov	sl, r4
 8004010:	e7d2      	b.n	8003fb8 <_svfiprintf_r+0x9c>
 8004012:	9b03      	ldr	r3, [sp, #12]
 8004014:	1d19      	adds	r1, r3, #4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	9103      	str	r1, [sp, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	bfbb      	ittet	lt
 800401e:	425b      	neglt	r3, r3
 8004020:	f042 0202 	orrlt.w	r2, r2, #2
 8004024:	9307      	strge	r3, [sp, #28]
 8004026:	9307      	strlt	r3, [sp, #28]
 8004028:	bfb8      	it	lt
 800402a:	9204      	strlt	r2, [sp, #16]
 800402c:	7823      	ldrb	r3, [r4, #0]
 800402e:	2b2e      	cmp	r3, #46	; 0x2e
 8004030:	d10c      	bne.n	800404c <_svfiprintf_r+0x130>
 8004032:	7863      	ldrb	r3, [r4, #1]
 8004034:	2b2a      	cmp	r3, #42	; 0x2a
 8004036:	d135      	bne.n	80040a4 <_svfiprintf_r+0x188>
 8004038:	9b03      	ldr	r3, [sp, #12]
 800403a:	1d1a      	adds	r2, r3, #4
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	9203      	str	r2, [sp, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	bfb8      	it	lt
 8004044:	f04f 33ff 	movlt.w	r3, #4294967295
 8004048:	3402      	adds	r4, #2
 800404a:	9305      	str	r3, [sp, #20]
 800404c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004118 <_svfiprintf_r+0x1fc>
 8004050:	7821      	ldrb	r1, [r4, #0]
 8004052:	2203      	movs	r2, #3
 8004054:	4650      	mov	r0, sl
 8004056:	f7fc f8cb 	bl	80001f0 <memchr>
 800405a:	b140      	cbz	r0, 800406e <_svfiprintf_r+0x152>
 800405c:	2340      	movs	r3, #64	; 0x40
 800405e:	eba0 000a 	sub.w	r0, r0, sl
 8004062:	fa03 f000 	lsl.w	r0, r3, r0
 8004066:	9b04      	ldr	r3, [sp, #16]
 8004068:	4303      	orrs	r3, r0
 800406a:	3401      	adds	r4, #1
 800406c:	9304      	str	r3, [sp, #16]
 800406e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004072:	4826      	ldr	r0, [pc, #152]	; (800410c <_svfiprintf_r+0x1f0>)
 8004074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004078:	2206      	movs	r2, #6
 800407a:	f7fc f8b9 	bl	80001f0 <memchr>
 800407e:	2800      	cmp	r0, #0
 8004080:	d038      	beq.n	80040f4 <_svfiprintf_r+0x1d8>
 8004082:	4b23      	ldr	r3, [pc, #140]	; (8004110 <_svfiprintf_r+0x1f4>)
 8004084:	bb1b      	cbnz	r3, 80040ce <_svfiprintf_r+0x1b2>
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	3307      	adds	r3, #7
 800408a:	f023 0307 	bic.w	r3, r3, #7
 800408e:	3308      	adds	r3, #8
 8004090:	9303      	str	r3, [sp, #12]
 8004092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004094:	4433      	add	r3, r6
 8004096:	9309      	str	r3, [sp, #36]	; 0x24
 8004098:	e767      	b.n	8003f6a <_svfiprintf_r+0x4e>
 800409a:	fb0c 3202 	mla	r2, ip, r2, r3
 800409e:	460c      	mov	r4, r1
 80040a0:	2001      	movs	r0, #1
 80040a2:	e7a5      	b.n	8003ff0 <_svfiprintf_r+0xd4>
 80040a4:	2300      	movs	r3, #0
 80040a6:	3401      	adds	r4, #1
 80040a8:	9305      	str	r3, [sp, #20]
 80040aa:	4619      	mov	r1, r3
 80040ac:	f04f 0c0a 	mov.w	ip, #10
 80040b0:	4620      	mov	r0, r4
 80040b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040b6:	3a30      	subs	r2, #48	; 0x30
 80040b8:	2a09      	cmp	r2, #9
 80040ba:	d903      	bls.n	80040c4 <_svfiprintf_r+0x1a8>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0c5      	beq.n	800404c <_svfiprintf_r+0x130>
 80040c0:	9105      	str	r1, [sp, #20]
 80040c2:	e7c3      	b.n	800404c <_svfiprintf_r+0x130>
 80040c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80040c8:	4604      	mov	r4, r0
 80040ca:	2301      	movs	r3, #1
 80040cc:	e7f0      	b.n	80040b0 <_svfiprintf_r+0x194>
 80040ce:	ab03      	add	r3, sp, #12
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	462a      	mov	r2, r5
 80040d4:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <_svfiprintf_r+0x1f8>)
 80040d6:	a904      	add	r1, sp, #16
 80040d8:	4638      	mov	r0, r7
 80040da:	f3af 8000 	nop.w
 80040de:	1c42      	adds	r2, r0, #1
 80040e0:	4606      	mov	r6, r0
 80040e2:	d1d6      	bne.n	8004092 <_svfiprintf_r+0x176>
 80040e4:	89ab      	ldrh	r3, [r5, #12]
 80040e6:	065b      	lsls	r3, r3, #25
 80040e8:	f53f af2c 	bmi.w	8003f44 <_svfiprintf_r+0x28>
 80040ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040ee:	b01d      	add	sp, #116	; 0x74
 80040f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f4:	ab03      	add	r3, sp, #12
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	462a      	mov	r2, r5
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <_svfiprintf_r+0x1f8>)
 80040fc:	a904      	add	r1, sp, #16
 80040fe:	4638      	mov	r0, r7
 8004100:	f000 f87a 	bl	80041f8 <_printf_i>
 8004104:	e7eb      	b.n	80040de <_svfiprintf_r+0x1c2>
 8004106:	bf00      	nop
 8004108:	08004780 	.word	0x08004780
 800410c:	0800478a 	.word	0x0800478a
 8004110:	00000000 	.word	0x00000000
 8004114:	08003e65 	.word	0x08003e65
 8004118:	08004786 	.word	0x08004786

0800411c <_printf_common>:
 800411c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	4616      	mov	r6, r2
 8004122:	4699      	mov	r9, r3
 8004124:	688a      	ldr	r2, [r1, #8]
 8004126:	690b      	ldr	r3, [r1, #16]
 8004128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800412c:	4293      	cmp	r3, r2
 800412e:	bfb8      	it	lt
 8004130:	4613      	movlt	r3, r2
 8004132:	6033      	str	r3, [r6, #0]
 8004134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004138:	4607      	mov	r7, r0
 800413a:	460c      	mov	r4, r1
 800413c:	b10a      	cbz	r2, 8004142 <_printf_common+0x26>
 800413e:	3301      	adds	r3, #1
 8004140:	6033      	str	r3, [r6, #0]
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	0699      	lsls	r1, r3, #26
 8004146:	bf42      	ittt	mi
 8004148:	6833      	ldrmi	r3, [r6, #0]
 800414a:	3302      	addmi	r3, #2
 800414c:	6033      	strmi	r3, [r6, #0]
 800414e:	6825      	ldr	r5, [r4, #0]
 8004150:	f015 0506 	ands.w	r5, r5, #6
 8004154:	d106      	bne.n	8004164 <_printf_common+0x48>
 8004156:	f104 0a19 	add.w	sl, r4, #25
 800415a:	68e3      	ldr	r3, [r4, #12]
 800415c:	6832      	ldr	r2, [r6, #0]
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	42ab      	cmp	r3, r5
 8004162:	dc26      	bgt.n	80041b2 <_printf_common+0x96>
 8004164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004168:	1e13      	subs	r3, r2, #0
 800416a:	6822      	ldr	r2, [r4, #0]
 800416c:	bf18      	it	ne
 800416e:	2301      	movne	r3, #1
 8004170:	0692      	lsls	r2, r2, #26
 8004172:	d42b      	bmi.n	80041cc <_printf_common+0xb0>
 8004174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004178:	4649      	mov	r1, r9
 800417a:	4638      	mov	r0, r7
 800417c:	47c0      	blx	r8
 800417e:	3001      	adds	r0, #1
 8004180:	d01e      	beq.n	80041c0 <_printf_common+0xa4>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	68e5      	ldr	r5, [r4, #12]
 8004186:	6832      	ldr	r2, [r6, #0]
 8004188:	f003 0306 	and.w	r3, r3, #6
 800418c:	2b04      	cmp	r3, #4
 800418e:	bf08      	it	eq
 8004190:	1aad      	subeq	r5, r5, r2
 8004192:	68a3      	ldr	r3, [r4, #8]
 8004194:	6922      	ldr	r2, [r4, #16]
 8004196:	bf0c      	ite	eq
 8004198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800419c:	2500      	movne	r5, #0
 800419e:	4293      	cmp	r3, r2
 80041a0:	bfc4      	itt	gt
 80041a2:	1a9b      	subgt	r3, r3, r2
 80041a4:	18ed      	addgt	r5, r5, r3
 80041a6:	2600      	movs	r6, #0
 80041a8:	341a      	adds	r4, #26
 80041aa:	42b5      	cmp	r5, r6
 80041ac:	d11a      	bne.n	80041e4 <_printf_common+0xc8>
 80041ae:	2000      	movs	r0, #0
 80041b0:	e008      	b.n	80041c4 <_printf_common+0xa8>
 80041b2:	2301      	movs	r3, #1
 80041b4:	4652      	mov	r2, sl
 80041b6:	4649      	mov	r1, r9
 80041b8:	4638      	mov	r0, r7
 80041ba:	47c0      	blx	r8
 80041bc:	3001      	adds	r0, #1
 80041be:	d103      	bne.n	80041c8 <_printf_common+0xac>
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295
 80041c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c8:	3501      	adds	r5, #1
 80041ca:	e7c6      	b.n	800415a <_printf_common+0x3e>
 80041cc:	18e1      	adds	r1, r4, r3
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	2030      	movs	r0, #48	; 0x30
 80041d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041d6:	4422      	add	r2, r4
 80041d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041e0:	3302      	adds	r3, #2
 80041e2:	e7c7      	b.n	8004174 <_printf_common+0x58>
 80041e4:	2301      	movs	r3, #1
 80041e6:	4622      	mov	r2, r4
 80041e8:	4649      	mov	r1, r9
 80041ea:	4638      	mov	r0, r7
 80041ec:	47c0      	blx	r8
 80041ee:	3001      	adds	r0, #1
 80041f0:	d0e6      	beq.n	80041c0 <_printf_common+0xa4>
 80041f2:	3601      	adds	r6, #1
 80041f4:	e7d9      	b.n	80041aa <_printf_common+0x8e>
	...

080041f8 <_printf_i>:
 80041f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041fc:	460c      	mov	r4, r1
 80041fe:	4691      	mov	r9, r2
 8004200:	7e27      	ldrb	r7, [r4, #24]
 8004202:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004204:	2f78      	cmp	r7, #120	; 0x78
 8004206:	4680      	mov	r8, r0
 8004208:	469a      	mov	sl, r3
 800420a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800420e:	d807      	bhi.n	8004220 <_printf_i+0x28>
 8004210:	2f62      	cmp	r7, #98	; 0x62
 8004212:	d80a      	bhi.n	800422a <_printf_i+0x32>
 8004214:	2f00      	cmp	r7, #0
 8004216:	f000 80d8 	beq.w	80043ca <_printf_i+0x1d2>
 800421a:	2f58      	cmp	r7, #88	; 0x58
 800421c:	f000 80a3 	beq.w	8004366 <_printf_i+0x16e>
 8004220:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004228:	e03a      	b.n	80042a0 <_printf_i+0xa8>
 800422a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800422e:	2b15      	cmp	r3, #21
 8004230:	d8f6      	bhi.n	8004220 <_printf_i+0x28>
 8004232:	a001      	add	r0, pc, #4	; (adr r0, 8004238 <_printf_i+0x40>)
 8004234:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004238:	08004291 	.word	0x08004291
 800423c:	080042a5 	.word	0x080042a5
 8004240:	08004221 	.word	0x08004221
 8004244:	08004221 	.word	0x08004221
 8004248:	08004221 	.word	0x08004221
 800424c:	08004221 	.word	0x08004221
 8004250:	080042a5 	.word	0x080042a5
 8004254:	08004221 	.word	0x08004221
 8004258:	08004221 	.word	0x08004221
 800425c:	08004221 	.word	0x08004221
 8004260:	08004221 	.word	0x08004221
 8004264:	080043b1 	.word	0x080043b1
 8004268:	080042d5 	.word	0x080042d5
 800426c:	08004393 	.word	0x08004393
 8004270:	08004221 	.word	0x08004221
 8004274:	08004221 	.word	0x08004221
 8004278:	080043d3 	.word	0x080043d3
 800427c:	08004221 	.word	0x08004221
 8004280:	080042d5 	.word	0x080042d5
 8004284:	08004221 	.word	0x08004221
 8004288:	08004221 	.word	0x08004221
 800428c:	0800439b 	.word	0x0800439b
 8004290:	680b      	ldr	r3, [r1, #0]
 8004292:	1d1a      	adds	r2, r3, #4
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	600a      	str	r2, [r1, #0]
 8004298:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800429c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0a3      	b.n	80043ec <_printf_i+0x1f4>
 80042a4:	6825      	ldr	r5, [r4, #0]
 80042a6:	6808      	ldr	r0, [r1, #0]
 80042a8:	062e      	lsls	r6, r5, #24
 80042aa:	f100 0304 	add.w	r3, r0, #4
 80042ae:	d50a      	bpl.n	80042c6 <_printf_i+0xce>
 80042b0:	6805      	ldr	r5, [r0, #0]
 80042b2:	600b      	str	r3, [r1, #0]
 80042b4:	2d00      	cmp	r5, #0
 80042b6:	da03      	bge.n	80042c0 <_printf_i+0xc8>
 80042b8:	232d      	movs	r3, #45	; 0x2d
 80042ba:	426d      	negs	r5, r5
 80042bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c0:	485e      	ldr	r0, [pc, #376]	; (800443c <_printf_i+0x244>)
 80042c2:	230a      	movs	r3, #10
 80042c4:	e019      	b.n	80042fa <_printf_i+0x102>
 80042c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80042ca:	6805      	ldr	r5, [r0, #0]
 80042cc:	600b      	str	r3, [r1, #0]
 80042ce:	bf18      	it	ne
 80042d0:	b22d      	sxthne	r5, r5
 80042d2:	e7ef      	b.n	80042b4 <_printf_i+0xbc>
 80042d4:	680b      	ldr	r3, [r1, #0]
 80042d6:	6825      	ldr	r5, [r4, #0]
 80042d8:	1d18      	adds	r0, r3, #4
 80042da:	6008      	str	r0, [r1, #0]
 80042dc:	0628      	lsls	r0, r5, #24
 80042de:	d501      	bpl.n	80042e4 <_printf_i+0xec>
 80042e0:	681d      	ldr	r5, [r3, #0]
 80042e2:	e002      	b.n	80042ea <_printf_i+0xf2>
 80042e4:	0669      	lsls	r1, r5, #25
 80042e6:	d5fb      	bpl.n	80042e0 <_printf_i+0xe8>
 80042e8:	881d      	ldrh	r5, [r3, #0]
 80042ea:	4854      	ldr	r0, [pc, #336]	; (800443c <_printf_i+0x244>)
 80042ec:	2f6f      	cmp	r7, #111	; 0x6f
 80042ee:	bf0c      	ite	eq
 80042f0:	2308      	moveq	r3, #8
 80042f2:	230a      	movne	r3, #10
 80042f4:	2100      	movs	r1, #0
 80042f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042fa:	6866      	ldr	r6, [r4, #4]
 80042fc:	60a6      	str	r6, [r4, #8]
 80042fe:	2e00      	cmp	r6, #0
 8004300:	bfa2      	ittt	ge
 8004302:	6821      	ldrge	r1, [r4, #0]
 8004304:	f021 0104 	bicge.w	r1, r1, #4
 8004308:	6021      	strge	r1, [r4, #0]
 800430a:	b90d      	cbnz	r5, 8004310 <_printf_i+0x118>
 800430c:	2e00      	cmp	r6, #0
 800430e:	d04d      	beq.n	80043ac <_printf_i+0x1b4>
 8004310:	4616      	mov	r6, r2
 8004312:	fbb5 f1f3 	udiv	r1, r5, r3
 8004316:	fb03 5711 	mls	r7, r3, r1, r5
 800431a:	5dc7      	ldrb	r7, [r0, r7]
 800431c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004320:	462f      	mov	r7, r5
 8004322:	42bb      	cmp	r3, r7
 8004324:	460d      	mov	r5, r1
 8004326:	d9f4      	bls.n	8004312 <_printf_i+0x11a>
 8004328:	2b08      	cmp	r3, #8
 800432a:	d10b      	bne.n	8004344 <_printf_i+0x14c>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	07df      	lsls	r7, r3, #31
 8004330:	d508      	bpl.n	8004344 <_printf_i+0x14c>
 8004332:	6923      	ldr	r3, [r4, #16]
 8004334:	6861      	ldr	r1, [r4, #4]
 8004336:	4299      	cmp	r1, r3
 8004338:	bfde      	ittt	le
 800433a:	2330      	movle	r3, #48	; 0x30
 800433c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004340:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004344:	1b92      	subs	r2, r2, r6
 8004346:	6122      	str	r2, [r4, #16]
 8004348:	f8cd a000 	str.w	sl, [sp]
 800434c:	464b      	mov	r3, r9
 800434e:	aa03      	add	r2, sp, #12
 8004350:	4621      	mov	r1, r4
 8004352:	4640      	mov	r0, r8
 8004354:	f7ff fee2 	bl	800411c <_printf_common>
 8004358:	3001      	adds	r0, #1
 800435a:	d14c      	bne.n	80043f6 <_printf_i+0x1fe>
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	b004      	add	sp, #16
 8004362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004366:	4835      	ldr	r0, [pc, #212]	; (800443c <_printf_i+0x244>)
 8004368:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	680e      	ldr	r6, [r1, #0]
 8004370:	061f      	lsls	r7, r3, #24
 8004372:	f856 5b04 	ldr.w	r5, [r6], #4
 8004376:	600e      	str	r6, [r1, #0]
 8004378:	d514      	bpl.n	80043a4 <_printf_i+0x1ac>
 800437a:	07d9      	lsls	r1, r3, #31
 800437c:	bf44      	itt	mi
 800437e:	f043 0320 	orrmi.w	r3, r3, #32
 8004382:	6023      	strmi	r3, [r4, #0]
 8004384:	b91d      	cbnz	r5, 800438e <_printf_i+0x196>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	f023 0320 	bic.w	r3, r3, #32
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	2310      	movs	r3, #16
 8004390:	e7b0      	b.n	80042f4 <_printf_i+0xfc>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	f043 0320 	orr.w	r3, r3, #32
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	2378      	movs	r3, #120	; 0x78
 800439c:	4828      	ldr	r0, [pc, #160]	; (8004440 <_printf_i+0x248>)
 800439e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043a2:	e7e3      	b.n	800436c <_printf_i+0x174>
 80043a4:	065e      	lsls	r6, r3, #25
 80043a6:	bf48      	it	mi
 80043a8:	b2ad      	uxthmi	r5, r5
 80043aa:	e7e6      	b.n	800437a <_printf_i+0x182>
 80043ac:	4616      	mov	r6, r2
 80043ae:	e7bb      	b.n	8004328 <_printf_i+0x130>
 80043b0:	680b      	ldr	r3, [r1, #0]
 80043b2:	6826      	ldr	r6, [r4, #0]
 80043b4:	6960      	ldr	r0, [r4, #20]
 80043b6:	1d1d      	adds	r5, r3, #4
 80043b8:	600d      	str	r5, [r1, #0]
 80043ba:	0635      	lsls	r5, r6, #24
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	d501      	bpl.n	80043c4 <_printf_i+0x1cc>
 80043c0:	6018      	str	r0, [r3, #0]
 80043c2:	e002      	b.n	80043ca <_printf_i+0x1d2>
 80043c4:	0671      	lsls	r1, r6, #25
 80043c6:	d5fb      	bpl.n	80043c0 <_printf_i+0x1c8>
 80043c8:	8018      	strh	r0, [r3, #0]
 80043ca:	2300      	movs	r3, #0
 80043cc:	6123      	str	r3, [r4, #16]
 80043ce:	4616      	mov	r6, r2
 80043d0:	e7ba      	b.n	8004348 <_printf_i+0x150>
 80043d2:	680b      	ldr	r3, [r1, #0]
 80043d4:	1d1a      	adds	r2, r3, #4
 80043d6:	600a      	str	r2, [r1, #0]
 80043d8:	681e      	ldr	r6, [r3, #0]
 80043da:	6862      	ldr	r2, [r4, #4]
 80043dc:	2100      	movs	r1, #0
 80043de:	4630      	mov	r0, r6
 80043e0:	f7fb ff06 	bl	80001f0 <memchr>
 80043e4:	b108      	cbz	r0, 80043ea <_printf_i+0x1f2>
 80043e6:	1b80      	subs	r0, r0, r6
 80043e8:	6060      	str	r0, [r4, #4]
 80043ea:	6863      	ldr	r3, [r4, #4]
 80043ec:	6123      	str	r3, [r4, #16]
 80043ee:	2300      	movs	r3, #0
 80043f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f4:	e7a8      	b.n	8004348 <_printf_i+0x150>
 80043f6:	6923      	ldr	r3, [r4, #16]
 80043f8:	4632      	mov	r2, r6
 80043fa:	4649      	mov	r1, r9
 80043fc:	4640      	mov	r0, r8
 80043fe:	47d0      	blx	sl
 8004400:	3001      	adds	r0, #1
 8004402:	d0ab      	beq.n	800435c <_printf_i+0x164>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	079b      	lsls	r3, r3, #30
 8004408:	d413      	bmi.n	8004432 <_printf_i+0x23a>
 800440a:	68e0      	ldr	r0, [r4, #12]
 800440c:	9b03      	ldr	r3, [sp, #12]
 800440e:	4298      	cmp	r0, r3
 8004410:	bfb8      	it	lt
 8004412:	4618      	movlt	r0, r3
 8004414:	e7a4      	b.n	8004360 <_printf_i+0x168>
 8004416:	2301      	movs	r3, #1
 8004418:	4632      	mov	r2, r6
 800441a:	4649      	mov	r1, r9
 800441c:	4640      	mov	r0, r8
 800441e:	47d0      	blx	sl
 8004420:	3001      	adds	r0, #1
 8004422:	d09b      	beq.n	800435c <_printf_i+0x164>
 8004424:	3501      	adds	r5, #1
 8004426:	68e3      	ldr	r3, [r4, #12]
 8004428:	9903      	ldr	r1, [sp, #12]
 800442a:	1a5b      	subs	r3, r3, r1
 800442c:	42ab      	cmp	r3, r5
 800442e:	dcf2      	bgt.n	8004416 <_printf_i+0x21e>
 8004430:	e7eb      	b.n	800440a <_printf_i+0x212>
 8004432:	2500      	movs	r5, #0
 8004434:	f104 0619 	add.w	r6, r4, #25
 8004438:	e7f5      	b.n	8004426 <_printf_i+0x22e>
 800443a:	bf00      	nop
 800443c:	08004791 	.word	0x08004791
 8004440:	080047a2 	.word	0x080047a2

08004444 <memcpy>:
 8004444:	440a      	add	r2, r1
 8004446:	4291      	cmp	r1, r2
 8004448:	f100 33ff 	add.w	r3, r0, #4294967295
 800444c:	d100      	bne.n	8004450 <memcpy+0xc>
 800444e:	4770      	bx	lr
 8004450:	b510      	push	{r4, lr}
 8004452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800445a:	4291      	cmp	r1, r2
 800445c:	d1f9      	bne.n	8004452 <memcpy+0xe>
 800445e:	bd10      	pop	{r4, pc}

08004460 <memmove>:
 8004460:	4288      	cmp	r0, r1
 8004462:	b510      	push	{r4, lr}
 8004464:	eb01 0402 	add.w	r4, r1, r2
 8004468:	d902      	bls.n	8004470 <memmove+0x10>
 800446a:	4284      	cmp	r4, r0
 800446c:	4623      	mov	r3, r4
 800446e:	d807      	bhi.n	8004480 <memmove+0x20>
 8004470:	1e43      	subs	r3, r0, #1
 8004472:	42a1      	cmp	r1, r4
 8004474:	d008      	beq.n	8004488 <memmove+0x28>
 8004476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800447a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800447e:	e7f8      	b.n	8004472 <memmove+0x12>
 8004480:	4402      	add	r2, r0
 8004482:	4601      	mov	r1, r0
 8004484:	428a      	cmp	r2, r1
 8004486:	d100      	bne.n	800448a <memmove+0x2a>
 8004488:	bd10      	pop	{r4, pc}
 800448a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800448e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004492:	e7f7      	b.n	8004484 <memmove+0x24>

08004494 <_free_r>:
 8004494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004496:	2900      	cmp	r1, #0
 8004498:	d048      	beq.n	800452c <_free_r+0x98>
 800449a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800449e:	9001      	str	r0, [sp, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f1a1 0404 	sub.w	r4, r1, #4
 80044a6:	bfb8      	it	lt
 80044a8:	18e4      	addlt	r4, r4, r3
 80044aa:	f000 f8d3 	bl	8004654 <__malloc_lock>
 80044ae:	4a20      	ldr	r2, [pc, #128]	; (8004530 <_free_r+0x9c>)
 80044b0:	9801      	ldr	r0, [sp, #4]
 80044b2:	6813      	ldr	r3, [r2, #0]
 80044b4:	4615      	mov	r5, r2
 80044b6:	b933      	cbnz	r3, 80044c6 <_free_r+0x32>
 80044b8:	6063      	str	r3, [r4, #4]
 80044ba:	6014      	str	r4, [r2, #0]
 80044bc:	b003      	add	sp, #12
 80044be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044c2:	f000 b8cd 	b.w	8004660 <__malloc_unlock>
 80044c6:	42a3      	cmp	r3, r4
 80044c8:	d90b      	bls.n	80044e2 <_free_r+0x4e>
 80044ca:	6821      	ldr	r1, [r4, #0]
 80044cc:	1862      	adds	r2, r4, r1
 80044ce:	4293      	cmp	r3, r2
 80044d0:	bf04      	itt	eq
 80044d2:	681a      	ldreq	r2, [r3, #0]
 80044d4:	685b      	ldreq	r3, [r3, #4]
 80044d6:	6063      	str	r3, [r4, #4]
 80044d8:	bf04      	itt	eq
 80044da:	1852      	addeq	r2, r2, r1
 80044dc:	6022      	streq	r2, [r4, #0]
 80044de:	602c      	str	r4, [r5, #0]
 80044e0:	e7ec      	b.n	80044bc <_free_r+0x28>
 80044e2:	461a      	mov	r2, r3
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	b10b      	cbz	r3, 80044ec <_free_r+0x58>
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	d9fa      	bls.n	80044e2 <_free_r+0x4e>
 80044ec:	6811      	ldr	r1, [r2, #0]
 80044ee:	1855      	adds	r5, r2, r1
 80044f0:	42a5      	cmp	r5, r4
 80044f2:	d10b      	bne.n	800450c <_free_r+0x78>
 80044f4:	6824      	ldr	r4, [r4, #0]
 80044f6:	4421      	add	r1, r4
 80044f8:	1854      	adds	r4, r2, r1
 80044fa:	42a3      	cmp	r3, r4
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	d1dd      	bne.n	80044bc <_free_r+0x28>
 8004500:	681c      	ldr	r4, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	6053      	str	r3, [r2, #4]
 8004506:	4421      	add	r1, r4
 8004508:	6011      	str	r1, [r2, #0]
 800450a:	e7d7      	b.n	80044bc <_free_r+0x28>
 800450c:	d902      	bls.n	8004514 <_free_r+0x80>
 800450e:	230c      	movs	r3, #12
 8004510:	6003      	str	r3, [r0, #0]
 8004512:	e7d3      	b.n	80044bc <_free_r+0x28>
 8004514:	6825      	ldr	r5, [r4, #0]
 8004516:	1961      	adds	r1, r4, r5
 8004518:	428b      	cmp	r3, r1
 800451a:	bf04      	itt	eq
 800451c:	6819      	ldreq	r1, [r3, #0]
 800451e:	685b      	ldreq	r3, [r3, #4]
 8004520:	6063      	str	r3, [r4, #4]
 8004522:	bf04      	itt	eq
 8004524:	1949      	addeq	r1, r1, r5
 8004526:	6021      	streq	r1, [r4, #0]
 8004528:	6054      	str	r4, [r2, #4]
 800452a:	e7c7      	b.n	80044bc <_free_r+0x28>
 800452c:	b003      	add	sp, #12
 800452e:	bd30      	pop	{r4, r5, pc}
 8004530:	20000090 	.word	0x20000090

08004534 <_malloc_r>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	1ccd      	adds	r5, r1, #3
 8004538:	f025 0503 	bic.w	r5, r5, #3
 800453c:	3508      	adds	r5, #8
 800453e:	2d0c      	cmp	r5, #12
 8004540:	bf38      	it	cc
 8004542:	250c      	movcc	r5, #12
 8004544:	2d00      	cmp	r5, #0
 8004546:	4606      	mov	r6, r0
 8004548:	db01      	blt.n	800454e <_malloc_r+0x1a>
 800454a:	42a9      	cmp	r1, r5
 800454c:	d903      	bls.n	8004556 <_malloc_r+0x22>
 800454e:	230c      	movs	r3, #12
 8004550:	6033      	str	r3, [r6, #0]
 8004552:	2000      	movs	r0, #0
 8004554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004556:	f000 f87d 	bl	8004654 <__malloc_lock>
 800455a:	4921      	ldr	r1, [pc, #132]	; (80045e0 <_malloc_r+0xac>)
 800455c:	680a      	ldr	r2, [r1, #0]
 800455e:	4614      	mov	r4, r2
 8004560:	b99c      	cbnz	r4, 800458a <_malloc_r+0x56>
 8004562:	4f20      	ldr	r7, [pc, #128]	; (80045e4 <_malloc_r+0xb0>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	b923      	cbnz	r3, 8004572 <_malloc_r+0x3e>
 8004568:	4621      	mov	r1, r4
 800456a:	4630      	mov	r0, r6
 800456c:	f000 f862 	bl	8004634 <_sbrk_r>
 8004570:	6038      	str	r0, [r7, #0]
 8004572:	4629      	mov	r1, r5
 8004574:	4630      	mov	r0, r6
 8004576:	f000 f85d 	bl	8004634 <_sbrk_r>
 800457a:	1c43      	adds	r3, r0, #1
 800457c:	d123      	bne.n	80045c6 <_malloc_r+0x92>
 800457e:	230c      	movs	r3, #12
 8004580:	6033      	str	r3, [r6, #0]
 8004582:	4630      	mov	r0, r6
 8004584:	f000 f86c 	bl	8004660 <__malloc_unlock>
 8004588:	e7e3      	b.n	8004552 <_malloc_r+0x1e>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	1b5b      	subs	r3, r3, r5
 800458e:	d417      	bmi.n	80045c0 <_malloc_r+0x8c>
 8004590:	2b0b      	cmp	r3, #11
 8004592:	d903      	bls.n	800459c <_malloc_r+0x68>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	441c      	add	r4, r3
 8004598:	6025      	str	r5, [r4, #0]
 800459a:	e004      	b.n	80045a6 <_malloc_r+0x72>
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	42a2      	cmp	r2, r4
 80045a0:	bf0c      	ite	eq
 80045a2:	600b      	streq	r3, [r1, #0]
 80045a4:	6053      	strne	r3, [r2, #4]
 80045a6:	4630      	mov	r0, r6
 80045a8:	f000 f85a 	bl	8004660 <__malloc_unlock>
 80045ac:	f104 000b 	add.w	r0, r4, #11
 80045b0:	1d23      	adds	r3, r4, #4
 80045b2:	f020 0007 	bic.w	r0, r0, #7
 80045b6:	1ac2      	subs	r2, r0, r3
 80045b8:	d0cc      	beq.n	8004554 <_malloc_r+0x20>
 80045ba:	1a1b      	subs	r3, r3, r0
 80045bc:	50a3      	str	r3, [r4, r2]
 80045be:	e7c9      	b.n	8004554 <_malloc_r+0x20>
 80045c0:	4622      	mov	r2, r4
 80045c2:	6864      	ldr	r4, [r4, #4]
 80045c4:	e7cc      	b.n	8004560 <_malloc_r+0x2c>
 80045c6:	1cc4      	adds	r4, r0, #3
 80045c8:	f024 0403 	bic.w	r4, r4, #3
 80045cc:	42a0      	cmp	r0, r4
 80045ce:	d0e3      	beq.n	8004598 <_malloc_r+0x64>
 80045d0:	1a21      	subs	r1, r4, r0
 80045d2:	4630      	mov	r0, r6
 80045d4:	f000 f82e 	bl	8004634 <_sbrk_r>
 80045d8:	3001      	adds	r0, #1
 80045da:	d1dd      	bne.n	8004598 <_malloc_r+0x64>
 80045dc:	e7cf      	b.n	800457e <_malloc_r+0x4a>
 80045de:	bf00      	nop
 80045e0:	20000090 	.word	0x20000090
 80045e4:	20000094 	.word	0x20000094

080045e8 <_realloc_r>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	4607      	mov	r7, r0
 80045ec:	4614      	mov	r4, r2
 80045ee:	460e      	mov	r6, r1
 80045f0:	b921      	cbnz	r1, 80045fc <_realloc_r+0x14>
 80045f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045f6:	4611      	mov	r1, r2
 80045f8:	f7ff bf9c 	b.w	8004534 <_malloc_r>
 80045fc:	b922      	cbnz	r2, 8004608 <_realloc_r+0x20>
 80045fe:	f7ff ff49 	bl	8004494 <_free_r>
 8004602:	4625      	mov	r5, r4
 8004604:	4628      	mov	r0, r5
 8004606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004608:	f000 f830 	bl	800466c <_malloc_usable_size_r>
 800460c:	42a0      	cmp	r0, r4
 800460e:	d20f      	bcs.n	8004630 <_realloc_r+0x48>
 8004610:	4621      	mov	r1, r4
 8004612:	4638      	mov	r0, r7
 8004614:	f7ff ff8e 	bl	8004534 <_malloc_r>
 8004618:	4605      	mov	r5, r0
 800461a:	2800      	cmp	r0, #0
 800461c:	d0f2      	beq.n	8004604 <_realloc_r+0x1c>
 800461e:	4631      	mov	r1, r6
 8004620:	4622      	mov	r2, r4
 8004622:	f7ff ff0f 	bl	8004444 <memcpy>
 8004626:	4631      	mov	r1, r6
 8004628:	4638      	mov	r0, r7
 800462a:	f7ff ff33 	bl	8004494 <_free_r>
 800462e:	e7e9      	b.n	8004604 <_realloc_r+0x1c>
 8004630:	4635      	mov	r5, r6
 8004632:	e7e7      	b.n	8004604 <_realloc_r+0x1c>

08004634 <_sbrk_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4d06      	ldr	r5, [pc, #24]	; (8004650 <_sbrk_r+0x1c>)
 8004638:	2300      	movs	r3, #0
 800463a:	4604      	mov	r4, r0
 800463c:	4608      	mov	r0, r1
 800463e:	602b      	str	r3, [r5, #0]
 8004640:	f7fc fbaa 	bl	8000d98 <_sbrk>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_sbrk_r+0x1a>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_sbrk_r+0x1a>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	20000228 	.word	0x20000228

08004654 <__malloc_lock>:
 8004654:	4801      	ldr	r0, [pc, #4]	; (800465c <__malloc_lock+0x8>)
 8004656:	f000 b811 	b.w	800467c <__retarget_lock_acquire_recursive>
 800465a:	bf00      	nop
 800465c:	20000230 	.word	0x20000230

08004660 <__malloc_unlock>:
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <__malloc_unlock+0x8>)
 8004662:	f000 b80c 	b.w	800467e <__retarget_lock_release_recursive>
 8004666:	bf00      	nop
 8004668:	20000230 	.word	0x20000230

0800466c <_malloc_usable_size_r>:
 800466c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004670:	1f18      	subs	r0, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	bfbc      	itt	lt
 8004676:	580b      	ldrlt	r3, [r1, r0]
 8004678:	18c0      	addlt	r0, r0, r3
 800467a:	4770      	bx	lr

0800467c <__retarget_lock_acquire_recursive>:
 800467c:	4770      	bx	lr

0800467e <__retarget_lock_release_recursive>:
 800467e:	4770      	bx	lr

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
